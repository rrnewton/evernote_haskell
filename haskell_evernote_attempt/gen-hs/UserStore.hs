{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module UserStore where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift

--import qualified Types_Types
-- import qualified Errors_Types
import Types_Types
import Errors_Types


import UserStore_Types
import qualified UserStore_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data CheckVersion_args = CheckVersion_args{f_CheckVersion_args_clientName :: Maybe String,f_CheckVersion_args_edamVersionMajor :: Maybe Int16,f_CheckVersion_args_edamVersionMinor :: Maybe Int16} deriving (Show,Eq,Ord,Typeable)
write_CheckVersion_args oprot record = do
  writeStructBegin oprot "CheckVersion_args"
  case f_CheckVersion_args_clientName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("clientName",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CheckVersion_args_edamVersionMajor record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("edamVersionMajor",T_I16,2)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_CheckVersion_args_edamVersionMinor record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("edamVersionMinor",T_I16,3)
    writeI16 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CheckVersion_args_fields iprot record = do
  (_,_t13,_id14) <- readFieldBegin iprot
  if _t13 == T_STOP then return record else
    case _id14 of 
      1 -> if _t13 == T_STRING then do
        s <- readString iprot
        read_CheckVersion_args_fields iprot record{f_CheckVersion_args_clientName=Just s}
        else do
          skip iprot _t13
          read_CheckVersion_args_fields iprot record
      2 -> if _t13 == T_I16 then do
        s <- readI16 iprot
        read_CheckVersion_args_fields iprot record{f_CheckVersion_args_edamVersionMajor=Just s}
        else do
          skip iprot _t13
          read_CheckVersion_args_fields iprot record
      3 -> if _t13 == T_I16 then do
        s <- readI16 iprot
        read_CheckVersion_args_fields iprot record{f_CheckVersion_args_edamVersionMinor=Just s}
        else do
          skip iprot _t13
          read_CheckVersion_args_fields iprot record
      _ -> do
        skip iprot _t13
        readFieldEnd iprot
        read_CheckVersion_args_fields iprot record
read_CheckVersion_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CheckVersion_args_fields iprot (CheckVersion_args{f_CheckVersion_args_clientName=Nothing,f_CheckVersion_args_edamVersionMajor=Nothing,f_CheckVersion_args_edamVersionMinor=Nothing})
  readStructEnd iprot
  return record
data CheckVersion_result = CheckVersion_result{f_CheckVersion_result_success :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_CheckVersion_result oprot record = do
  writeStructBegin oprot "CheckVersion_result"
  case f_CheckVersion_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_BOOL,0)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CheckVersion_result_fields iprot record = do
  (_,_t18,_id19) <- readFieldBegin iprot
  if _t18 == T_STOP then return record else
    case _id19 of 
      0 -> if _t18 == T_BOOL then do
        s <- readBool iprot
        read_CheckVersion_result_fields iprot record{f_CheckVersion_result_success=Just s}
        else do
          skip iprot _t18
          read_CheckVersion_result_fields iprot record
      _ -> do
        skip iprot _t18
        readFieldEnd iprot
        read_CheckVersion_result_fields iprot record
read_CheckVersion_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CheckVersion_result_fields iprot (CheckVersion_result{f_CheckVersion_result_success=Nothing})
  readStructEnd iprot
  return record
data Authenticate_args = Authenticate_args{f_Authenticate_args_username :: Maybe String,f_Authenticate_args_password :: Maybe String,f_Authenticate_args_consumerKey :: Maybe String,f_Authenticate_args_consumerSecret :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_Authenticate_args oprot record = do
  writeStructBegin oprot "Authenticate_args"
  case f_Authenticate_args_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Authenticate_args_password record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("password",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Authenticate_args_consumerKey record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("consumerKey",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Authenticate_args_consumerSecret record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("consumerSecret",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Authenticate_args_fields iprot record = do
  (_,_t23,_id24) <- readFieldBegin iprot
  if _t23 == T_STOP then return record else
    case _id24 of 
      1 -> if _t23 == T_STRING then do
        s <- readString iprot
        read_Authenticate_args_fields iprot record{f_Authenticate_args_username=Just s}
        else do
          skip iprot _t23
          read_Authenticate_args_fields iprot record
      2 -> if _t23 == T_STRING then do
        s <- readString iprot
        read_Authenticate_args_fields iprot record{f_Authenticate_args_password=Just s}
        else do
          skip iprot _t23
          read_Authenticate_args_fields iprot record
      3 -> if _t23 == T_STRING then do
        s <- readString iprot
        read_Authenticate_args_fields iprot record{f_Authenticate_args_consumerKey=Just s}
        else do
          skip iprot _t23
          read_Authenticate_args_fields iprot record
      4 -> if _t23 == T_STRING then do
        s <- readString iprot
        read_Authenticate_args_fields iprot record{f_Authenticate_args_consumerSecret=Just s}
        else do
          skip iprot _t23
          read_Authenticate_args_fields iprot record
      _ -> do
        skip iprot _t23
        readFieldEnd iprot
        read_Authenticate_args_fields iprot record
read_Authenticate_args iprot = do
  _ <- readStructBegin iprot
  record <- read_Authenticate_args_fields iprot (Authenticate_args{f_Authenticate_args_username=Nothing,f_Authenticate_args_password=Nothing,f_Authenticate_args_consumerKey=Nothing,f_Authenticate_args_consumerSecret=Nothing})
  readStructEnd iprot
  return record
data Authenticate_result = Authenticate_result{f_Authenticate_result_success :: Maybe AuthenticationResult,f_Authenticate_result_userException :: Maybe Errors_Types.EDAMUserException,f_Authenticate_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_Authenticate_result oprot record = do
  writeStructBegin oprot "Authenticate_result"
  case f_Authenticate_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_AuthenticationResult oprot _v
    writeFieldEnd oprot}
  case f_Authenticate_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_Authenticate_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Authenticate_result_fields iprot record = do
  (_,_t28,_id29) <- readFieldBegin iprot
  if _t28 == T_STOP then return record else
    case _id29 of 
      0 -> if _t28 == T_STRUCT then do
        s <- (read_AuthenticationResult iprot)
        read_Authenticate_result_fields iprot record{f_Authenticate_result_success=Just s}
        else do
          skip iprot _t28
          read_Authenticate_result_fields iprot record
      1 -> if _t28 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_Authenticate_result_fields iprot record{f_Authenticate_result_userException=Just s}
        else do
          skip iprot _t28
          read_Authenticate_result_fields iprot record
      2 -> if _t28 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_Authenticate_result_fields iprot record{f_Authenticate_result_systemException=Just s}
        else do
          skip iprot _t28
          read_Authenticate_result_fields iprot record
      _ -> do
        skip iprot _t28
        readFieldEnd iprot
        read_Authenticate_result_fields iprot record
read_Authenticate_result iprot = do
  _ <- readStructBegin iprot
  record <- read_Authenticate_result_fields iprot (Authenticate_result{f_Authenticate_result_success=Nothing,f_Authenticate_result_userException=Nothing,f_Authenticate_result_systemException=Nothing})
  readStructEnd iprot
  return record
data RefreshAuthentication_args = RefreshAuthentication_args{f_RefreshAuthentication_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_RefreshAuthentication_args oprot record = do
  writeStructBegin oprot "RefreshAuthentication_args"
  case f_RefreshAuthentication_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_RefreshAuthentication_args_fields iprot record = do
  (_,_t33,_id34) <- readFieldBegin iprot
  if _t33 == T_STOP then return record else
    case _id34 of 
      1 -> if _t33 == T_STRING then do
        s <- readString iprot
        read_RefreshAuthentication_args_fields iprot record{f_RefreshAuthentication_args_authenticationToken=Just s}
        else do
          skip iprot _t33
          read_RefreshAuthentication_args_fields iprot record
      _ -> do
        skip iprot _t33
        readFieldEnd iprot
        read_RefreshAuthentication_args_fields iprot record
read_RefreshAuthentication_args iprot = do
  _ <- readStructBegin iprot
  record <- read_RefreshAuthentication_args_fields iprot (RefreshAuthentication_args{f_RefreshAuthentication_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data RefreshAuthentication_result = RefreshAuthentication_result{f_RefreshAuthentication_result_success :: Maybe AuthenticationResult,f_RefreshAuthentication_result_userException :: Maybe Errors_Types.EDAMUserException,f_RefreshAuthentication_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_RefreshAuthentication_result oprot record = do
  writeStructBegin oprot "RefreshAuthentication_result"
  case f_RefreshAuthentication_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_AuthenticationResult oprot _v
    writeFieldEnd oprot}
  case f_RefreshAuthentication_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_RefreshAuthentication_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_RefreshAuthentication_result_fields iprot record = do
  (_,_t38,_id39) <- readFieldBegin iprot
  if _t38 == T_STOP then return record else
    case _id39 of 
      0 -> if _t38 == T_STRUCT then do
        s <- (read_AuthenticationResult iprot)
        read_RefreshAuthentication_result_fields iprot record{f_RefreshAuthentication_result_success=Just s}
        else do
          skip iprot _t38
          read_RefreshAuthentication_result_fields iprot record
      1 -> if _t38 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_RefreshAuthentication_result_fields iprot record{f_RefreshAuthentication_result_userException=Just s}
        else do
          skip iprot _t38
          read_RefreshAuthentication_result_fields iprot record
      2 -> if _t38 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_RefreshAuthentication_result_fields iprot record{f_RefreshAuthentication_result_systemException=Just s}
        else do
          skip iprot _t38
          read_RefreshAuthentication_result_fields iprot record
      _ -> do
        skip iprot _t38
        readFieldEnd iprot
        read_RefreshAuthentication_result_fields iprot record
read_RefreshAuthentication_result iprot = do
  _ <- readStructBegin iprot
  record <- read_RefreshAuthentication_result_fields iprot (RefreshAuthentication_result{f_RefreshAuthentication_result_success=Nothing,f_RefreshAuthentication_result_userException=Nothing,f_RefreshAuthentication_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetUser_args = GetUser_args{f_GetUser_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetUser_args oprot record = do
  writeStructBegin oprot "GetUser_args"
  case f_GetUser_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetUser_args_fields iprot record = do
  (_,_t43,_id44) <- readFieldBegin iprot
  if _t43 == T_STOP then return record else
    case _id44 of 
      1 -> if _t43 == T_STRING then do
        s <- readString iprot
        read_GetUser_args_fields iprot record{f_GetUser_args_authenticationToken=Just s}
        else do
          skip iprot _t43
          read_GetUser_args_fields iprot record
      _ -> do
        skip iprot _t43
        readFieldEnd iprot
        read_GetUser_args_fields iprot record
read_GetUser_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetUser_args_fields iprot (GetUser_args{f_GetUser_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data GetUser_result = GetUser_result{f_GetUser_result_success :: Maybe Types_Types.User,f_GetUser_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetUser_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetUser_result oprot record = do
  writeStructBegin oprot "GetUser_result"
  case f_GetUser_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_User oprot _v
    writeFieldEnd oprot}
  case f_GetUser_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetUser_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetUser_result_fields iprot record = do
  (_,_t48,_id49) <- readFieldBegin iprot
  if _t48 == T_STOP then return record else
    case _id49 of 
      0 -> if _t48 == T_STRUCT then do
        s <- (read_User iprot)
        read_GetUser_result_fields iprot record{f_GetUser_result_success=Just s}
        else do
          skip iprot _t48
          read_GetUser_result_fields iprot record
      1 -> if _t48 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetUser_result_fields iprot record{f_GetUser_result_userException=Just s}
        else do
          skip iprot _t48
          read_GetUser_result_fields iprot record
      2 -> if _t48 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetUser_result_fields iprot record{f_GetUser_result_systemException=Just s}
        else do
          skip iprot _t48
          read_GetUser_result_fields iprot record
      _ -> do
        skip iprot _t48
        readFieldEnd iprot
        read_GetUser_result_fields iprot record
read_GetUser_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetUser_result_fields iprot (GetUser_result{f_GetUser_result_success=Nothing,f_GetUser_result_userException=Nothing,f_GetUser_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetPublicUserInfo_args = GetPublicUserInfo_args{f_GetPublicUserInfo_args_username :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetPublicUserInfo_args oprot record = do
  writeStructBegin oprot "GetPublicUserInfo_args"
  case f_GetPublicUserInfo_args_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetPublicUserInfo_args_fields iprot record = do
  (_,_t53,_id54) <- readFieldBegin iprot
  if _t53 == T_STOP then return record else
    case _id54 of 
      1 -> if _t53 == T_STRING then do
        s <- readString iprot
        read_GetPublicUserInfo_args_fields iprot record{f_GetPublicUserInfo_args_username=Just s}
        else do
          skip iprot _t53
          read_GetPublicUserInfo_args_fields iprot record
      _ -> do
        skip iprot _t53
        readFieldEnd iprot
        read_GetPublicUserInfo_args_fields iprot record
read_GetPublicUserInfo_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetPublicUserInfo_args_fields iprot (GetPublicUserInfo_args{f_GetPublicUserInfo_args_username=Nothing})
  readStructEnd iprot
  return record
data GetPublicUserInfo_result = GetPublicUserInfo_result{f_GetPublicUserInfo_result_success :: Maybe PublicUserInfo,f_GetPublicUserInfo_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_GetPublicUserInfo_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetPublicUserInfo_result_userException :: Maybe Errors_Types.EDAMUserException} deriving (Show,Eq,Ord,Typeable)
write_GetPublicUserInfo_result oprot record = do
  writeStructBegin oprot "GetPublicUserInfo_result"
  case f_GetPublicUserInfo_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_PublicUserInfo oprot _v
    writeFieldEnd oprot}
  case f_GetPublicUserInfo_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,1)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_GetPublicUserInfo_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetPublicUserInfo_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,3)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetPublicUserInfo_result_fields iprot record = do
  (_,_t58,_id59) <- readFieldBegin iprot
  if _t58 == T_STOP then return record else
    case _id59 of 
      0 -> if _t58 == T_STRUCT then do
        s <- (read_PublicUserInfo iprot)
        read_GetPublicUserInfo_result_fields iprot record{f_GetPublicUserInfo_result_success=Just s}
        else do
          skip iprot _t58
          read_GetPublicUserInfo_result_fields iprot record
      1 -> if _t58 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetPublicUserInfo_result_fields iprot record{f_GetPublicUserInfo_result_notFoundException=Just s}
        else do
          skip iprot _t58
          read_GetPublicUserInfo_result_fields iprot record
      2 -> if _t58 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetPublicUserInfo_result_fields iprot record{f_GetPublicUserInfo_result_systemException=Just s}
        else do
          skip iprot _t58
          read_GetPublicUserInfo_result_fields iprot record
      3 -> if _t58 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetPublicUserInfo_result_fields iprot record{f_GetPublicUserInfo_result_userException=Just s}
        else do
          skip iprot _t58
          read_GetPublicUserInfo_result_fields iprot record
      _ -> do
        skip iprot _t58
        readFieldEnd iprot
        read_GetPublicUserInfo_result_fields iprot record
read_GetPublicUserInfo_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetPublicUserInfo_result_fields iprot (GetPublicUserInfo_result{f_GetPublicUserInfo_result_success=Nothing,f_GetPublicUserInfo_result_notFoundException=Nothing,f_GetPublicUserInfo_result_systemException=Nothing,f_GetPublicUserInfo_result_userException=Nothing})
  readStructEnd iprot
  return record
process_checkVersion (seqid, iprot, oprot, handler) = do
  args <- read_CheckVersion_args iprot
  readMessageEnd iprot
  rs <- return (CheckVersion_result Nothing)
  res <- (do
    res <- Iface.checkVersion handler (f_CheckVersion_args_clientName args) (f_CheckVersion_args_edamVersionMajor args) (f_CheckVersion_args_edamVersionMinor args)
    return rs{f_CheckVersion_result_success= Just res})
  writeMessageBegin oprot ("checkVersion", M_REPLY, seqid);
  write_CheckVersion_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_authenticate (seqid, iprot, oprot, handler) = do
  args <- read_Authenticate_args iprot
  readMessageEnd iprot
  rs <- return (Authenticate_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.authenticate handler (f_Authenticate_args_username args) (f_Authenticate_args_password args) (f_Authenticate_args_consumerKey args) (f_Authenticate_args_consumerSecret args)
        return rs{f_Authenticate_result_success= Just res})
      (\e  -> 
        return rs{f_Authenticate_result_userException =Just e}))
    (\e  -> 
      return rs{f_Authenticate_result_systemException =Just e}))
  writeMessageBegin oprot ("authenticate", M_REPLY, seqid);
  write_Authenticate_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_refreshAuthentication (seqid, iprot, oprot, handler) = do
  args <- read_RefreshAuthentication_args iprot
  readMessageEnd iprot
  rs <- return (RefreshAuthentication_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.refreshAuthentication handler (f_RefreshAuthentication_args_authenticationToken args)
        return rs{f_RefreshAuthentication_result_success= Just res})
      (\e  -> 
        return rs{f_RefreshAuthentication_result_userException =Just e}))
    (\e  -> 
      return rs{f_RefreshAuthentication_result_systemException =Just e}))
  writeMessageBegin oprot ("refreshAuthentication", M_REPLY, seqid);
  write_RefreshAuthentication_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getUser (seqid, iprot, oprot, handler) = do
  args <- read_GetUser_args iprot
  readMessageEnd iprot
  rs <- return (GetUser_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getUser handler (f_GetUser_args_authenticationToken args)
        return rs{f_GetUser_result_success= Just res})
      (\e  -> 
        return rs{f_GetUser_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetUser_result_systemException =Just e}))
  writeMessageBegin oprot ("getUser", M_REPLY, seqid);
  write_GetUser_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getPublicUserInfo (seqid, iprot, oprot, handler) = do
  args <- read_GetPublicUserInfo_args iprot
  readMessageEnd iprot
  rs <- return (GetPublicUserInfo_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getPublicUserInfo handler (f_GetPublicUserInfo_args_username args)
          return rs{f_GetPublicUserInfo_result_success= Just res})
        (\e  -> 
          return rs{f_GetPublicUserInfo_result_notFoundException =Just e}))
      (\e  -> 
        return rs{f_GetPublicUserInfo_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetPublicUserInfo_result_userException =Just e}))
  writeMessageBegin oprot ("getPublicUserInfo", M_REPLY, seqid);
  write_GetPublicUserInfo_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "checkVersion" -> process_checkVersion (seqid,iprot,oprot,handler)
  "authenticate" -> process_authenticate (seqid,iprot,oprot,handler)
  "refreshAuthentication" -> process_refreshAuthentication (seqid,iprot,oprot,handler)
  "getUser" -> process_getUser (seqid,iprot,oprot,handler)
  "getPublicUserInfo" -> process_getPublicUserInfo (seqid,iprot,oprot,handler)
  _ -> do
    skip iprot T_STRUCT
    readMessageEnd iprot
    writeMessageBegin oprot (name,M_EXCEPTION,seqid)
    writeAppExn oprot (AppExn AE_UNKNOWN_METHOD ("Unknown function " ++ name))
    writeMessageEnd oprot
    tFlush (getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  return True
