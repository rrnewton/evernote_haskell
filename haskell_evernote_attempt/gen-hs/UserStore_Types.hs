{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module UserStore_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift

import qualified Types_Types
import qualified Errors_Types


data PublicUserInfo = PublicUserInfo{
  f_PublicUserInfo_userId :: Maybe Int32,
  f_PublicUserInfo_shardId :: Maybe String,
  f_PublicUserInfo_privilege :: Maybe Types_Types.PrivilegeLevel,
  f_PublicUserInfo_username :: Maybe String}
 deriving (Show,Eq,Ord,Typeable)

write_PublicUserInfo oprot record = do
  writeStructBegin oprot "PublicUserInfo"
  case f_PublicUserInfo_userId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userId",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_PublicUserInfo_shardId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shardId",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_PublicUserInfo_privilege record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("privilege",T_I32,3)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_PublicUserInfo_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_PublicUserInfo_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_PublicUserInfo_fields iprot record{f_PublicUserInfo_userId=Just s}
        else do
          skip iprot _t3
          read_PublicUserInfo_fields iprot record
      2 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_PublicUserInfo_fields iprot record{f_PublicUserInfo_shardId=Just s}
        else do
          skip iprot _t3
          read_PublicUserInfo_fields iprot record
      3 -> if _t3 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_PublicUserInfo_fields iprot record{f_PublicUserInfo_privilege=Just s}
        else do
          skip iprot _t3
          read_PublicUserInfo_fields iprot record
      4 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_PublicUserInfo_fields iprot record{f_PublicUserInfo_username=Just s}
        else do
          skip iprot _t3
          read_PublicUserInfo_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_PublicUserInfo_fields iprot record
read_PublicUserInfo iprot = do
  _ <- readStructBegin iprot
  record <- read_PublicUserInfo_fields iprot (PublicUserInfo{f_PublicUserInfo_userId=Nothing,f_PublicUserInfo_shardId=Nothing,f_PublicUserInfo_privilege=Nothing,f_PublicUserInfo_username=Nothing})
  readStructEnd iprot
  return record
data AuthenticationResult = AuthenticationResult{f_AuthenticationResult_currentTime :: Maybe Int64,f_AuthenticationResult_authenticationToken :: Maybe String,f_AuthenticationResult_expiration :: Maybe Int64,f_AuthenticationResult_user :: Maybe Types_Types.User,f_AuthenticationResult_publicUserInfo :: Maybe PublicUserInfo} deriving (Show,Eq,Ord,Typeable)
write_AuthenticationResult oprot record = do
  writeStructBegin oprot "AuthenticationResult"
  case f_AuthenticationResult_currentTime record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("currentTime",T_I64,1)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_AuthenticationResult_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_AuthenticationResult_expiration record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("expiration",T_I64,3)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_AuthenticationResult_user record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("user",T_STRUCT,4)
    Types_Types.write_User oprot _v
    writeFieldEnd oprot}
  case f_AuthenticationResult_publicUserInfo record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("publicUserInfo",T_STRUCT,5)
    write_PublicUserInfo oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AuthenticationResult_fields iprot record = do
  (_,_t8,_id9) <- readFieldBegin iprot
  if _t8 == T_STOP then return record else
    case _id9 of 
      1 -> if _t8 == T_I64 then do
        s <- readI64 iprot
        read_AuthenticationResult_fields iprot record{f_AuthenticationResult_currentTime=Just s}
        else do
          skip iprot _t8
          read_AuthenticationResult_fields iprot record
      2 -> if _t8 == T_STRING then do
        s <- readString iprot
        read_AuthenticationResult_fields iprot record{f_AuthenticationResult_authenticationToken=Just s}
        else do
          skip iprot _t8
          read_AuthenticationResult_fields iprot record
      3 -> if _t8 == T_I64 then do
        s <- readI64 iprot
        read_AuthenticationResult_fields iprot record{f_AuthenticationResult_expiration=Just s}
        else do
          skip iprot _t8
          read_AuthenticationResult_fields iprot record
      4 -> if _t8 == T_STRUCT then do
        s <- (Types_Types.read_User iprot)
        read_AuthenticationResult_fields iprot record{f_AuthenticationResult_user=Just s}
        else do
          skip iprot _t8
          read_AuthenticationResult_fields iprot record
      5 -> if _t8 == T_STRUCT then do
        s <- (read_PublicUserInfo iprot)
        read_AuthenticationResult_fields iprot record{f_AuthenticationResult_publicUserInfo=Just s}
        else do
          skip iprot _t8
          read_AuthenticationResult_fields iprot record
      _ -> do
        skip iprot _t8
        readFieldEnd iprot
        read_AuthenticationResult_fields iprot record
read_AuthenticationResult iprot = do
  _ <- readStructBegin iprot
  record <- read_AuthenticationResult_fields iprot (AuthenticationResult{f_AuthenticationResult_currentTime=Nothing,f_AuthenticationResult_authenticationToken=Nothing,f_AuthenticationResult_expiration=Nothing,f_AuthenticationResult_user=Nothing,f_AuthenticationResult_publicUserInfo=Nothing})
  readStructEnd iprot
  return record
