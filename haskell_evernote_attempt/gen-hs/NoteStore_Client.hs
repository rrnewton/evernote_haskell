{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NoteStore_Client(getSyncState,getSyncChunk,getLinkedNotebookSyncState,getLinkedNotebookSyncChunk,listNotebooks,getNotebook,getDefaultNotebook,createNotebook,updateNotebook,expungeNotebook,listTags,listTagsByNotebook,getTag,createTag,updateTag,untagAll,expungeTag,listSearches,getSearch,createSearch,updateSearch,expungeSearch,findNotes,findNoteOffset,findNotesMetadata,findNoteCounts,getNote,getNoteContent,getNoteSearchText,getResourceSearchText,getNoteTagNames,createNote,updateNote,deleteNote,expungeNote,expungeNotes,expungeInactiveNotes,copyNote,listNoteVersions,getNoteVersion,getResource,updateResource,getResourceData,getResourceByHash,getResourceRecognition,getResourceAlternateData,getResourceAttributes,getAccountSize,getAds,getRandomAd,getPublicNotebook,createSharedNotebook,listSharedNotebooks,expungeSharedNotebooks,createLinkedNotebook,updateLinkedNotebook,listLinkedNotebooks,expungeLinkedNotebook,authenticateToSharedNotebook,getSharedNotebookByAuth,emailNote,shareNote,stopSharingNote,authenticateToSharedNote) where
import Data.IORef
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift

import qualified UserStore_Types
import qualified Types_Types
import qualified Errors_Types
import qualified Limits_Types


import NoteStore_Types
import NoteStore
seqid = newIORef 0
getSyncState (ip,op) arg_authenticationToken = do
  send_getSyncState op arg_authenticationToken
  recv_getSyncState ip
send_getSyncState op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getSyncState", M_CALL, seqn)
  write_GetSyncState_args op (GetSyncState_args{f_GetSyncState_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getSyncState ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetSyncState_result ip
  readMessageEnd ip
  case f_GetSyncState_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetSyncState_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSyncState_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getSyncState failed: unknown result")
getSyncChunk (ip,op) arg_authenticationToken arg_afterUSN arg_maxEntries arg_fullSyncOnly = do
  send_getSyncChunk op arg_authenticationToken arg_afterUSN arg_maxEntries arg_fullSyncOnly
  recv_getSyncChunk ip
send_getSyncChunk op arg_authenticationToken arg_afterUSN arg_maxEntries arg_fullSyncOnly = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getSyncChunk", M_CALL, seqn)
  write_GetSyncChunk_args op (GetSyncChunk_args{f_GetSyncChunk_args_authenticationToken=Just arg_authenticationToken,f_GetSyncChunk_args_afterUSN=Just arg_afterUSN,f_GetSyncChunk_args_maxEntries=Just arg_maxEntries,f_GetSyncChunk_args_fullSyncOnly=Just arg_fullSyncOnly})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getSyncChunk ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetSyncChunk_result ip
  readMessageEnd ip
  case f_GetSyncChunk_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetSyncChunk_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSyncChunk_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getSyncChunk failed: unknown result")
getLinkedNotebookSyncState (ip,op) arg_authenticationToken arg_linkedNotebook = do
  send_getLinkedNotebookSyncState op arg_authenticationToken arg_linkedNotebook
  recv_getLinkedNotebookSyncState ip
send_getLinkedNotebookSyncState op arg_authenticationToken arg_linkedNotebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getLinkedNotebookSyncState", M_CALL, seqn)
  write_GetLinkedNotebookSyncState_args op (GetLinkedNotebookSyncState_args{f_GetLinkedNotebookSyncState_args_authenticationToken=Just arg_authenticationToken,f_GetLinkedNotebookSyncState_args_linkedNotebook=Just arg_linkedNotebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getLinkedNotebookSyncState ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetLinkedNotebookSyncState_result ip
  readMessageEnd ip
  case f_GetLinkedNotebookSyncState_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetLinkedNotebookSyncState_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetLinkedNotebookSyncState_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetLinkedNotebookSyncState_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getLinkedNotebookSyncState failed: unknown result")
getLinkedNotebookSyncChunk (ip,op) arg_authenticationToken arg_linkedNotebook arg_afterUSN arg_maxEntries arg_fullSyncOnly = do
  send_getLinkedNotebookSyncChunk op arg_authenticationToken arg_linkedNotebook arg_afterUSN arg_maxEntries arg_fullSyncOnly
  recv_getLinkedNotebookSyncChunk ip
send_getLinkedNotebookSyncChunk op arg_authenticationToken arg_linkedNotebook arg_afterUSN arg_maxEntries arg_fullSyncOnly = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getLinkedNotebookSyncChunk", M_CALL, seqn)
  write_GetLinkedNotebookSyncChunk_args op (GetLinkedNotebookSyncChunk_args{f_GetLinkedNotebookSyncChunk_args_authenticationToken=Just arg_authenticationToken,f_GetLinkedNotebookSyncChunk_args_linkedNotebook=Just arg_linkedNotebook,f_GetLinkedNotebookSyncChunk_args_afterUSN=Just arg_afterUSN,f_GetLinkedNotebookSyncChunk_args_maxEntries=Just arg_maxEntries,f_GetLinkedNotebookSyncChunk_args_fullSyncOnly=Just arg_fullSyncOnly})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getLinkedNotebookSyncChunk ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetLinkedNotebookSyncChunk_result ip
  readMessageEnd ip
  case f_GetLinkedNotebookSyncChunk_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetLinkedNotebookSyncChunk_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetLinkedNotebookSyncChunk_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetLinkedNotebookSyncChunk_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getLinkedNotebookSyncChunk failed: unknown result")
listNotebooks (ip,op) arg_authenticationToken = do
  send_listNotebooks op arg_authenticationToken
  recv_listNotebooks ip
send_listNotebooks op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listNotebooks", M_CALL, seqn)
  write_ListNotebooks_args op (ListNotebooks_args{f_ListNotebooks_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listNotebooks ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListNotebooks_result ip
  readMessageEnd ip
  case f_ListNotebooks_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListNotebooks_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListNotebooks_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listNotebooks failed: unknown result")
getNotebook (ip,op) arg_authenticationToken arg_guid = do
  send_getNotebook op arg_authenticationToken arg_guid
  recv_getNotebook ip
send_getNotebook op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNotebook", M_CALL, seqn)
  write_GetNotebook_args op (GetNotebook_args{f_GetNotebook_args_authenticationToken=Just arg_authenticationToken,f_GetNotebook_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNotebook_result ip
  readMessageEnd ip
  case f_GetNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNotebook failed: unknown result")
getDefaultNotebook (ip,op) arg_authenticationToken = do
  send_getDefaultNotebook op arg_authenticationToken
  recv_getDefaultNotebook ip
send_getDefaultNotebook op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getDefaultNotebook", M_CALL, seqn)
  write_GetDefaultNotebook_args op (GetDefaultNotebook_args{f_GetDefaultNotebook_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getDefaultNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetDefaultNotebook_result ip
  readMessageEnd ip
  case f_GetDefaultNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetDefaultNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetDefaultNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getDefaultNotebook failed: unknown result")
createNotebook (ip,op) arg_authenticationToken arg_notebook = do
  send_createNotebook op arg_authenticationToken arg_notebook
  recv_createNotebook ip
send_createNotebook op arg_authenticationToken arg_notebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createNotebook", M_CALL, seqn)
  write_CreateNotebook_args op (CreateNotebook_args{f_CreateNotebook_args_authenticationToken=Just arg_authenticationToken,f_CreateNotebook_args_notebook=Just arg_notebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateNotebook_result ip
  readMessageEnd ip
  case f_CreateNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createNotebook failed: unknown result")
updateNotebook (ip,op) arg_authenticationToken arg_notebook = do
  send_updateNotebook op arg_authenticationToken arg_notebook
  recv_updateNotebook ip
send_updateNotebook op arg_authenticationToken arg_notebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateNotebook", M_CALL, seqn)
  write_UpdateNotebook_args op (UpdateNotebook_args{f_UpdateNotebook_args_authenticationToken=Just arg_authenticationToken,f_UpdateNotebook_args_notebook=Just arg_notebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateNotebook_result ip
  readMessageEnd ip
  case f_UpdateNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateNotebook failed: unknown result")
expungeNotebook (ip,op) arg_authenticationToken arg_guid = do
  send_expungeNotebook op arg_authenticationToken arg_guid
  recv_expungeNotebook ip
send_expungeNotebook op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeNotebook", M_CALL, seqn)
  write_ExpungeNotebook_args op (ExpungeNotebook_args{f_ExpungeNotebook_args_authenticationToken=Just arg_authenticationToken,f_ExpungeNotebook_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeNotebook_result ip
  readMessageEnd ip
  case f_ExpungeNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeNotebook failed: unknown result")
listTags (ip,op) arg_authenticationToken = do
  send_listTags op arg_authenticationToken
  recv_listTags ip
send_listTags op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listTags", M_CALL, seqn)
  write_ListTags_args op (ListTags_args{f_ListTags_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listTags ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListTags_result ip
  readMessageEnd ip
  case f_ListTags_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListTags_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListTags_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listTags failed: unknown result")
listTagsByNotebook (ip,op) arg_authenticationToken arg_notebookGuid = do
  send_listTagsByNotebook op arg_authenticationToken arg_notebookGuid
  recv_listTagsByNotebook ip
send_listTagsByNotebook op arg_authenticationToken arg_notebookGuid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listTagsByNotebook", M_CALL, seqn)
  write_ListTagsByNotebook_args op (ListTagsByNotebook_args{f_ListTagsByNotebook_args_authenticationToken=Just arg_authenticationToken,f_ListTagsByNotebook_args_notebookGuid=Just arg_notebookGuid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listTagsByNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListTagsByNotebook_result ip
  readMessageEnd ip
  case f_ListTagsByNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListTagsByNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListTagsByNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListTagsByNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listTagsByNotebook failed: unknown result")
getTag (ip,op) arg_authenticationToken arg_guid = do
  send_getTag op arg_authenticationToken arg_guid
  recv_getTag ip
send_getTag op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getTag", M_CALL, seqn)
  write_GetTag_args op (GetTag_args{f_GetTag_args_authenticationToken=Just arg_authenticationToken,f_GetTag_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getTag ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetTag_result ip
  readMessageEnd ip
  case f_GetTag_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetTag_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetTag_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetTag_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getTag failed: unknown result")
createTag (ip,op) arg_authenticationToken arg_tag = do
  send_createTag op arg_authenticationToken arg_tag
  recv_createTag ip
send_createTag op arg_authenticationToken arg_tag = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createTag", M_CALL, seqn)
  write_CreateTag_args op (CreateTag_args{f_CreateTag_args_authenticationToken=Just arg_authenticationToken,f_CreateTag_args_tag=Just arg_tag})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createTag ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateTag_result ip
  readMessageEnd ip
  case f_CreateTag_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateTag_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateTag_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateTag_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createTag failed: unknown result")
updateTag (ip,op) arg_authenticationToken arg_tag = do
  send_updateTag op arg_authenticationToken arg_tag
  recv_updateTag ip
send_updateTag op arg_authenticationToken arg_tag = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateTag", M_CALL, seqn)
  write_UpdateTag_args op (UpdateTag_args{f_UpdateTag_args_authenticationToken=Just arg_authenticationToken,f_UpdateTag_args_tag=Just arg_tag})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateTag ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateTag_result ip
  readMessageEnd ip
  case f_UpdateTag_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateTag_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateTag_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateTag_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateTag failed: unknown result")
untagAll (ip,op) arg_authenticationToken arg_guid = do
  send_untagAll op arg_authenticationToken arg_guid
  recv_untagAll ip
send_untagAll op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("untagAll", M_CALL, seqn)
  write_UntagAll_args op (UntagAll_args{f_UntagAll_args_authenticationToken=Just arg_authenticationToken,f_UntagAll_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_untagAll ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UntagAll_result ip
  readMessageEnd ip
  case f_UntagAll_result_userException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_UntagAll_result_systemException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_UntagAll_result_notFoundException res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
expungeTag (ip,op) arg_authenticationToken arg_guid = do
  send_expungeTag op arg_authenticationToken arg_guid
  recv_expungeTag ip
send_expungeTag op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeTag", M_CALL, seqn)
  write_ExpungeTag_args op (ExpungeTag_args{f_ExpungeTag_args_authenticationToken=Just arg_authenticationToken,f_ExpungeTag_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeTag ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeTag_result ip
  readMessageEnd ip
  case f_ExpungeTag_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeTag_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeTag_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeTag_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeTag failed: unknown result")
listSearches (ip,op) arg_authenticationToken = do
  send_listSearches op arg_authenticationToken
  recv_listSearches ip
send_listSearches op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listSearches", M_CALL, seqn)
  write_ListSearches_args op (ListSearches_args{f_ListSearches_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listSearches ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListSearches_result ip
  readMessageEnd ip
  case f_ListSearches_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListSearches_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListSearches_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listSearches failed: unknown result")
getSearch (ip,op) arg_authenticationToken arg_guid = do
  send_getSearch op arg_authenticationToken arg_guid
  recv_getSearch ip
send_getSearch op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getSearch", M_CALL, seqn)
  write_GetSearch_args op (GetSearch_args{f_GetSearch_args_authenticationToken=Just arg_authenticationToken,f_GetSearch_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getSearch ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetSearch_result ip
  readMessageEnd ip
  case f_GetSearch_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetSearch_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSearch_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSearch_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getSearch failed: unknown result")
createSearch (ip,op) arg_authenticationToken arg_search = do
  send_createSearch op arg_authenticationToken arg_search
  recv_createSearch ip
send_createSearch op arg_authenticationToken arg_search = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createSearch", M_CALL, seqn)
  write_CreateSearch_args op (CreateSearch_args{f_CreateSearch_args_authenticationToken=Just arg_authenticationToken,f_CreateSearch_args_search=Just arg_search})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createSearch ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateSearch_result ip
  readMessageEnd ip
  case f_CreateSearch_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateSearch_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateSearch_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createSearch failed: unknown result")
updateSearch (ip,op) arg_authenticationToken arg_search = do
  send_updateSearch op arg_authenticationToken arg_search
  recv_updateSearch ip
send_updateSearch op arg_authenticationToken arg_search = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateSearch", M_CALL, seqn)
  write_UpdateSearch_args op (UpdateSearch_args{f_UpdateSearch_args_authenticationToken=Just arg_authenticationToken,f_UpdateSearch_args_search=Just arg_search})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateSearch ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateSearch_result ip
  readMessageEnd ip
  case f_UpdateSearch_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateSearch_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateSearch_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateSearch_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateSearch failed: unknown result")
expungeSearch (ip,op) arg_authenticationToken arg_guid = do
  send_expungeSearch op arg_authenticationToken arg_guid
  recv_expungeSearch ip
send_expungeSearch op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeSearch", M_CALL, seqn)
  write_ExpungeSearch_args op (ExpungeSearch_args{f_ExpungeSearch_args_authenticationToken=Just arg_authenticationToken,f_ExpungeSearch_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeSearch ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeSearch_result ip
  readMessageEnd ip
  case f_ExpungeSearch_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeSearch_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeSearch_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeSearch_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeSearch failed: unknown result")
findNotes (ip,op) arg_authenticationToken arg_filter arg_offset arg_maxNotes = do
  send_findNotes op arg_authenticationToken arg_filter arg_offset arg_maxNotes
  recv_findNotes ip
send_findNotes op arg_authenticationToken arg_filter arg_offset arg_maxNotes = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("findNotes", M_CALL, seqn)
  write_FindNotes_args op (FindNotes_args{f_FindNotes_args_authenticationToken=Just arg_authenticationToken,f_FindNotes_args_filter=Just arg_filter,f_FindNotes_args_offset=Just arg_offset,f_FindNotes_args_maxNotes=Just arg_maxNotes})
  writeMessageEnd op
  tFlush (getTransport op)
recv_findNotes ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_FindNotes_result ip
  readMessageEnd ip
  case f_FindNotes_result_success res of
    Just v -> return v
    Nothing -> do
      case f_FindNotes_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNotes_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNotes_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "findNotes failed: unknown result")
findNoteOffset (ip,op) arg_authenticationToken arg_filter arg_guid = do
  send_findNoteOffset op arg_authenticationToken arg_filter arg_guid
  recv_findNoteOffset ip
send_findNoteOffset op arg_authenticationToken arg_filter arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("findNoteOffset", M_CALL, seqn)
  write_FindNoteOffset_args op (FindNoteOffset_args{f_FindNoteOffset_args_authenticationToken=Just arg_authenticationToken,f_FindNoteOffset_args_filter=Just arg_filter,f_FindNoteOffset_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_findNoteOffset ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_FindNoteOffset_result ip
  readMessageEnd ip
  case f_FindNoteOffset_result_success res of
    Just v -> return v
    Nothing -> do
      case f_FindNoteOffset_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNoteOffset_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNoteOffset_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "findNoteOffset failed: unknown result")
findNotesMetadata (ip,op) arg_authenticationToken arg_filter arg_offset arg_maxNotes arg_resultSpec = do
  send_findNotesMetadata op arg_authenticationToken arg_filter arg_offset arg_maxNotes arg_resultSpec
  recv_findNotesMetadata ip
send_findNotesMetadata op arg_authenticationToken arg_filter arg_offset arg_maxNotes arg_resultSpec = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("findNotesMetadata", M_CALL, seqn)
  write_FindNotesMetadata_args op (FindNotesMetadata_args{f_FindNotesMetadata_args_authenticationToken=Just arg_authenticationToken,f_FindNotesMetadata_args_filter=Just arg_filter,f_FindNotesMetadata_args_offset=Just arg_offset,f_FindNotesMetadata_args_maxNotes=Just arg_maxNotes,f_FindNotesMetadata_args_resultSpec=Just arg_resultSpec})
  writeMessageEnd op
  tFlush (getTransport op)
recv_findNotesMetadata ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_FindNotesMetadata_result ip
  readMessageEnd ip
  case f_FindNotesMetadata_result_success res of
    Just v -> return v
    Nothing -> do
      case f_FindNotesMetadata_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNotesMetadata_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNotesMetadata_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "findNotesMetadata failed: unknown result")
findNoteCounts (ip,op) arg_authenticationToken arg_filter arg_withTrash = do
  send_findNoteCounts op arg_authenticationToken arg_filter arg_withTrash
  recv_findNoteCounts ip
send_findNoteCounts op arg_authenticationToken arg_filter arg_withTrash = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("findNoteCounts", M_CALL, seqn)
  write_FindNoteCounts_args op (FindNoteCounts_args{f_FindNoteCounts_args_authenticationToken=Just arg_authenticationToken,f_FindNoteCounts_args_filter=Just arg_filter,f_FindNoteCounts_args_withTrash=Just arg_withTrash})
  writeMessageEnd op
  tFlush (getTransport op)
recv_findNoteCounts ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_FindNoteCounts_result ip
  readMessageEnd ip
  case f_FindNoteCounts_result_success res of
    Just v -> return v
    Nothing -> do
      case f_FindNoteCounts_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNoteCounts_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_FindNoteCounts_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "findNoteCounts failed: unknown result")
getNote (ip,op) arg_authenticationToken arg_guid arg_withContent arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData = do
  send_getNote op arg_authenticationToken arg_guid arg_withContent arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData
  recv_getNote ip
send_getNote op arg_authenticationToken arg_guid arg_withContent arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNote", M_CALL, seqn)
  write_GetNote_args op (GetNote_args{f_GetNote_args_authenticationToken=Just arg_authenticationToken,f_GetNote_args_guid=Just arg_guid,f_GetNote_args_withContent=Just arg_withContent,f_GetNote_args_withResourcesData=Just arg_withResourcesData,f_GetNote_args_withResourcesRecognition=Just arg_withResourcesRecognition,f_GetNote_args_withResourcesAlternateData=Just arg_withResourcesAlternateData})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNote_result ip
  readMessageEnd ip
  case f_GetNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNote failed: unknown result")
getNoteContent (ip,op) arg_authenticationToken arg_guid = do
  send_getNoteContent op arg_authenticationToken arg_guid
  recv_getNoteContent ip
send_getNoteContent op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNoteContent", M_CALL, seqn)
  write_GetNoteContent_args op (GetNoteContent_args{f_GetNoteContent_args_authenticationToken=Just arg_authenticationToken,f_GetNoteContent_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNoteContent ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNoteContent_result ip
  readMessageEnd ip
  case f_GetNoteContent_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNoteContent_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteContent_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteContent_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNoteContent failed: unknown result")
getNoteSearchText (ip,op) arg_authenticationToken arg_guid arg_noteOnly arg_tokenizeForIndexing = do
  send_getNoteSearchText op arg_authenticationToken arg_guid arg_noteOnly arg_tokenizeForIndexing
  recv_getNoteSearchText ip
send_getNoteSearchText op arg_authenticationToken arg_guid arg_noteOnly arg_tokenizeForIndexing = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNoteSearchText", M_CALL, seqn)
  write_GetNoteSearchText_args op (GetNoteSearchText_args{f_GetNoteSearchText_args_authenticationToken=Just arg_authenticationToken,f_GetNoteSearchText_args_guid=Just arg_guid,f_GetNoteSearchText_args_noteOnly=Just arg_noteOnly,f_GetNoteSearchText_args_tokenizeForIndexing=Just arg_tokenizeForIndexing})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNoteSearchText ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNoteSearchText_result ip
  readMessageEnd ip
  case f_GetNoteSearchText_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNoteSearchText_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteSearchText_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteSearchText_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNoteSearchText failed: unknown result")
getResourceSearchText (ip,op) arg_authenticationToken arg_guid = do
  send_getResourceSearchText op arg_authenticationToken arg_guid
  recv_getResourceSearchText ip
send_getResourceSearchText op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceSearchText", M_CALL, seqn)
  write_GetResourceSearchText_args op (GetResourceSearchText_args{f_GetResourceSearchText_args_authenticationToken=Just arg_authenticationToken,f_GetResourceSearchText_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceSearchText ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceSearchText_result ip
  readMessageEnd ip
  case f_GetResourceSearchText_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceSearchText_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceSearchText_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceSearchText_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceSearchText failed: unknown result")
getNoteTagNames (ip,op) arg_authenticationToken arg_guid = do
  send_getNoteTagNames op arg_authenticationToken arg_guid
  recv_getNoteTagNames ip
send_getNoteTagNames op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNoteTagNames", M_CALL, seqn)
  write_GetNoteTagNames_args op (GetNoteTagNames_args{f_GetNoteTagNames_args_authenticationToken=Just arg_authenticationToken,f_GetNoteTagNames_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNoteTagNames ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNoteTagNames_result ip
  readMessageEnd ip
  case f_GetNoteTagNames_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNoteTagNames_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteTagNames_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteTagNames_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNoteTagNames failed: unknown result")
createNote (ip,op) arg_authenticationToken arg_note = do
  send_createNote op arg_authenticationToken arg_note
  recv_createNote ip
send_createNote op arg_authenticationToken arg_note = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createNote", M_CALL, seqn)
  write_CreateNote_args op (CreateNote_args{f_CreateNote_args_authenticationToken=Just arg_authenticationToken,f_CreateNote_args_note=Just arg_note})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateNote_result ip
  readMessageEnd ip
  case f_CreateNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createNote failed: unknown result")
updateNote (ip,op) arg_authenticationToken arg_note = do
  send_updateNote op arg_authenticationToken arg_note
  recv_updateNote ip
send_updateNote op arg_authenticationToken arg_note = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateNote", M_CALL, seqn)
  write_UpdateNote_args op (UpdateNote_args{f_UpdateNote_args_authenticationToken=Just arg_authenticationToken,f_UpdateNote_args_note=Just arg_note})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateNote_result ip
  readMessageEnd ip
  case f_UpdateNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateNote failed: unknown result")
deleteNote (ip,op) arg_authenticationToken arg_guid = do
  send_deleteNote op arg_authenticationToken arg_guid
  recv_deleteNote ip
send_deleteNote op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("deleteNote", M_CALL, seqn)
  write_DeleteNote_args op (DeleteNote_args{f_DeleteNote_args_authenticationToken=Just arg_authenticationToken,f_DeleteNote_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_deleteNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_DeleteNote_result ip
  readMessageEnd ip
  case f_DeleteNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_DeleteNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_DeleteNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_DeleteNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "deleteNote failed: unknown result")
expungeNote (ip,op) arg_authenticationToken arg_guid = do
  send_expungeNote op arg_authenticationToken arg_guid
  recv_expungeNote ip
send_expungeNote op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeNote", M_CALL, seqn)
  write_ExpungeNote_args op (ExpungeNote_args{f_ExpungeNote_args_authenticationToken=Just arg_authenticationToken,f_ExpungeNote_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeNote_result ip
  readMessageEnd ip
  case f_ExpungeNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeNote failed: unknown result")
expungeNotes (ip,op) arg_authenticationToken arg_noteGuids = do
  send_expungeNotes op arg_authenticationToken arg_noteGuids
  recv_expungeNotes ip
send_expungeNotes op arg_authenticationToken arg_noteGuids = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeNotes", M_CALL, seqn)
  write_ExpungeNotes_args op (ExpungeNotes_args{f_ExpungeNotes_args_authenticationToken=Just arg_authenticationToken,f_ExpungeNotes_args_noteGuids=Just arg_noteGuids})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeNotes ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeNotes_result ip
  readMessageEnd ip
  case f_ExpungeNotes_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeNotes_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNotes_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeNotes_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeNotes failed: unknown result")
expungeInactiveNotes (ip,op) arg_authenticationToken = do
  send_expungeInactiveNotes op arg_authenticationToken
  recv_expungeInactiveNotes ip
send_expungeInactiveNotes op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeInactiveNotes", M_CALL, seqn)
  write_ExpungeInactiveNotes_args op (ExpungeInactiveNotes_args{f_ExpungeInactiveNotes_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeInactiveNotes ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeInactiveNotes_result ip
  readMessageEnd ip
  case f_ExpungeInactiveNotes_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeInactiveNotes_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeInactiveNotes_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeInactiveNotes failed: unknown result")
copyNote (ip,op) arg_authenticationToken arg_noteGuid arg_toNotebookGuid = do
  send_copyNote op arg_authenticationToken arg_noteGuid arg_toNotebookGuid
  recv_copyNote ip
send_copyNote op arg_authenticationToken arg_noteGuid arg_toNotebookGuid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("copyNote", M_CALL, seqn)
  write_CopyNote_args op (CopyNote_args{f_CopyNote_args_authenticationToken=Just arg_authenticationToken,f_CopyNote_args_noteGuid=Just arg_noteGuid,f_CopyNote_args_toNotebookGuid=Just arg_toNotebookGuid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_copyNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CopyNote_result ip
  readMessageEnd ip
  case f_CopyNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CopyNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CopyNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CopyNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "copyNote failed: unknown result")
listNoteVersions (ip,op) arg_authenticationToken arg_noteGuid = do
  send_listNoteVersions op arg_authenticationToken arg_noteGuid
  recv_listNoteVersions ip
send_listNoteVersions op arg_authenticationToken arg_noteGuid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listNoteVersions", M_CALL, seqn)
  write_ListNoteVersions_args op (ListNoteVersions_args{f_ListNoteVersions_args_authenticationToken=Just arg_authenticationToken,f_ListNoteVersions_args_noteGuid=Just arg_noteGuid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listNoteVersions ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListNoteVersions_result ip
  readMessageEnd ip
  case f_ListNoteVersions_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListNoteVersions_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListNoteVersions_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListNoteVersions_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listNoteVersions failed: unknown result")
getNoteVersion (ip,op) arg_authenticationToken arg_noteGuid arg_updateSequenceNum arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData = do
  send_getNoteVersion op arg_authenticationToken arg_noteGuid arg_updateSequenceNum arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData
  recv_getNoteVersion ip
send_getNoteVersion op arg_authenticationToken arg_noteGuid arg_updateSequenceNum arg_withResourcesData arg_withResourcesRecognition arg_withResourcesAlternateData = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getNoteVersion", M_CALL, seqn)
  write_GetNoteVersion_args op (GetNoteVersion_args{f_GetNoteVersion_args_authenticationToken=Just arg_authenticationToken,f_GetNoteVersion_args_noteGuid=Just arg_noteGuid,f_GetNoteVersion_args_updateSequenceNum=Just arg_updateSequenceNum,f_GetNoteVersion_args_withResourcesData=Just arg_withResourcesData,f_GetNoteVersion_args_withResourcesRecognition=Just arg_withResourcesRecognition,f_GetNoteVersion_args_withResourcesAlternateData=Just arg_withResourcesAlternateData})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getNoteVersion ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetNoteVersion_result ip
  readMessageEnd ip
  case f_GetNoteVersion_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetNoteVersion_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteVersion_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetNoteVersion_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getNoteVersion failed: unknown result")
getResource (ip,op) arg_authenticationToken arg_guid arg_withData arg_withRecognition arg_withAttributes arg_withAlternateData = do
  send_getResource op arg_authenticationToken arg_guid arg_withData arg_withRecognition arg_withAttributes arg_withAlternateData
  recv_getResource ip
send_getResource op arg_authenticationToken arg_guid arg_withData arg_withRecognition arg_withAttributes arg_withAlternateData = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResource", M_CALL, seqn)
  write_GetResource_args op (GetResource_args{f_GetResource_args_authenticationToken=Just arg_authenticationToken,f_GetResource_args_guid=Just arg_guid,f_GetResource_args_withData=Just arg_withData,f_GetResource_args_withRecognition=Just arg_withRecognition,f_GetResource_args_withAttributes=Just arg_withAttributes,f_GetResource_args_withAlternateData=Just arg_withAlternateData})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResource ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResource_result ip
  readMessageEnd ip
  case f_GetResource_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResource_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResource_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResource_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResource failed: unknown result")
updateResource (ip,op) arg_authenticationToken arg_resource = do
  send_updateResource op arg_authenticationToken arg_resource
  recv_updateResource ip
send_updateResource op arg_authenticationToken arg_resource = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateResource", M_CALL, seqn)
  write_UpdateResource_args op (UpdateResource_args{f_UpdateResource_args_authenticationToken=Just arg_authenticationToken,f_UpdateResource_args_resource=Just arg_resource})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateResource ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateResource_result ip
  readMessageEnd ip
  case f_UpdateResource_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateResource_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateResource_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateResource_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateResource failed: unknown result")
getResourceData (ip,op) arg_authenticationToken arg_guid = do
  send_getResourceData op arg_authenticationToken arg_guid
  recv_getResourceData ip
send_getResourceData op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceData", M_CALL, seqn)
  write_GetResourceData_args op (GetResourceData_args{f_GetResourceData_args_authenticationToken=Just arg_authenticationToken,f_GetResourceData_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceData ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceData_result ip
  readMessageEnd ip
  case f_GetResourceData_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceData_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceData_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceData_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceData failed: unknown result")
getResourceByHash (ip,op) arg_authenticationToken arg_noteGuid arg_contentHash arg_withData arg_withRecognition arg_withAlternateData = do
  send_getResourceByHash op arg_authenticationToken arg_noteGuid arg_contentHash arg_withData arg_withRecognition arg_withAlternateData
  recv_getResourceByHash ip
send_getResourceByHash op arg_authenticationToken arg_noteGuid arg_contentHash arg_withData arg_withRecognition arg_withAlternateData = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceByHash", M_CALL, seqn)
  write_GetResourceByHash_args op (GetResourceByHash_args{f_GetResourceByHash_args_authenticationToken=Just arg_authenticationToken,f_GetResourceByHash_args_noteGuid=Just arg_noteGuid,f_GetResourceByHash_args_contentHash=Just arg_contentHash,f_GetResourceByHash_args_withData=Just arg_withData,f_GetResourceByHash_args_withRecognition=Just arg_withRecognition,f_GetResourceByHash_args_withAlternateData=Just arg_withAlternateData})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceByHash ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceByHash_result ip
  readMessageEnd ip
  case f_GetResourceByHash_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceByHash_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceByHash_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceByHash_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceByHash failed: unknown result")
getResourceRecognition (ip,op) arg_authenticationToken arg_guid = do
  send_getResourceRecognition op arg_authenticationToken arg_guid
  recv_getResourceRecognition ip
send_getResourceRecognition op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceRecognition", M_CALL, seqn)
  write_GetResourceRecognition_args op (GetResourceRecognition_args{f_GetResourceRecognition_args_authenticationToken=Just arg_authenticationToken,f_GetResourceRecognition_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceRecognition ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceRecognition_result ip
  readMessageEnd ip
  case f_GetResourceRecognition_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceRecognition_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceRecognition_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceRecognition_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceRecognition failed: unknown result")
getResourceAlternateData (ip,op) arg_authenticationToken arg_guid = do
  send_getResourceAlternateData op arg_authenticationToken arg_guid
  recv_getResourceAlternateData ip
send_getResourceAlternateData op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceAlternateData", M_CALL, seqn)
  write_GetResourceAlternateData_args op (GetResourceAlternateData_args{f_GetResourceAlternateData_args_authenticationToken=Just arg_authenticationToken,f_GetResourceAlternateData_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceAlternateData ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceAlternateData_result ip
  readMessageEnd ip
  case f_GetResourceAlternateData_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceAlternateData_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceAlternateData_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceAlternateData_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceAlternateData failed: unknown result")
getResourceAttributes (ip,op) arg_authenticationToken arg_guid = do
  send_getResourceAttributes op arg_authenticationToken arg_guid
  recv_getResourceAttributes ip
send_getResourceAttributes op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getResourceAttributes", M_CALL, seqn)
  write_GetResourceAttributes_args op (GetResourceAttributes_args{f_GetResourceAttributes_args_authenticationToken=Just arg_authenticationToken,f_GetResourceAttributes_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getResourceAttributes ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetResourceAttributes_result ip
  readMessageEnd ip
  case f_GetResourceAttributes_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetResourceAttributes_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceAttributes_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetResourceAttributes_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getResourceAttributes failed: unknown result")
getAccountSize (ip,op) arg_authenticationToken = do
  send_getAccountSize op arg_authenticationToken
  recv_getAccountSize ip
send_getAccountSize op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getAccountSize", M_CALL, seqn)
  write_GetAccountSize_args op (GetAccountSize_args{f_GetAccountSize_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getAccountSize ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetAccountSize_result ip
  readMessageEnd ip
  case f_GetAccountSize_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetAccountSize_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetAccountSize_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getAccountSize failed: unknown result")
getAds (ip,op) arg_authenticationToken arg_adParameters = do
  send_getAds op arg_authenticationToken arg_adParameters
  recv_getAds ip
send_getAds op arg_authenticationToken arg_adParameters = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getAds", M_CALL, seqn)
  write_GetAds_args op (GetAds_args{f_GetAds_args_authenticationToken=Just arg_authenticationToken,f_GetAds_args_adParameters=Just arg_adParameters})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getAds ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetAds_result ip
  readMessageEnd ip
  case f_GetAds_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetAds_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetAds_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getAds failed: unknown result")
getRandomAd (ip,op) arg_authenticationToken arg_adParameters = do
  send_getRandomAd op arg_authenticationToken arg_adParameters
  recv_getRandomAd ip
send_getRandomAd op arg_authenticationToken arg_adParameters = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getRandomAd", M_CALL, seqn)
  write_GetRandomAd_args op (GetRandomAd_args{f_GetRandomAd_args_authenticationToken=Just arg_authenticationToken,f_GetRandomAd_args_adParameters=Just arg_adParameters})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getRandomAd ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetRandomAd_result ip
  readMessageEnd ip
  case f_GetRandomAd_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetRandomAd_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetRandomAd_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getRandomAd failed: unknown result")
getPublicNotebook (ip,op) arg_userId arg_publicUri = do
  send_getPublicNotebook op arg_userId arg_publicUri
  recv_getPublicNotebook ip
send_getPublicNotebook op arg_userId arg_publicUri = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getPublicNotebook", M_CALL, seqn)
  write_GetPublicNotebook_args op (GetPublicNotebook_args{f_GetPublicNotebook_args_userId=Just arg_userId,f_GetPublicNotebook_args_publicUri=Just arg_publicUri})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getPublicNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetPublicNotebook_result ip
  readMessageEnd ip
  case f_GetPublicNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetPublicNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetPublicNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getPublicNotebook failed: unknown result")
createSharedNotebook (ip,op) arg_authenticationToken arg_sharedNotebook = do
  send_createSharedNotebook op arg_authenticationToken arg_sharedNotebook
  recv_createSharedNotebook ip
send_createSharedNotebook op arg_authenticationToken arg_sharedNotebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createSharedNotebook", M_CALL, seqn)
  write_CreateSharedNotebook_args op (CreateSharedNotebook_args{f_CreateSharedNotebook_args_authenticationToken=Just arg_authenticationToken,f_CreateSharedNotebook_args_sharedNotebook=Just arg_sharedNotebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createSharedNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateSharedNotebook_result ip
  readMessageEnd ip
  case f_CreateSharedNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateSharedNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateSharedNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateSharedNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createSharedNotebook failed: unknown result")
listSharedNotebooks (ip,op) arg_authenticationToken = do
  send_listSharedNotebooks op arg_authenticationToken
  recv_listSharedNotebooks ip
send_listSharedNotebooks op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listSharedNotebooks", M_CALL, seqn)
  write_ListSharedNotebooks_args op (ListSharedNotebooks_args{f_ListSharedNotebooks_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listSharedNotebooks ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListSharedNotebooks_result ip
  readMessageEnd ip
  case f_ListSharedNotebooks_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListSharedNotebooks_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListSharedNotebooks_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListSharedNotebooks_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listSharedNotebooks failed: unknown result")
expungeSharedNotebooks (ip,op) arg_authenticationToken arg_sharedNotebookIds = do
  send_expungeSharedNotebooks op arg_authenticationToken arg_sharedNotebookIds
  recv_expungeSharedNotebooks ip
send_expungeSharedNotebooks op arg_authenticationToken arg_sharedNotebookIds = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeSharedNotebooks", M_CALL, seqn)
  write_ExpungeSharedNotebooks_args op (ExpungeSharedNotebooks_args{f_ExpungeSharedNotebooks_args_authenticationToken=Just arg_authenticationToken,f_ExpungeSharedNotebooks_args_sharedNotebookIds=Just arg_sharedNotebookIds})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeSharedNotebooks ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeSharedNotebooks_result ip
  readMessageEnd ip
  case f_ExpungeSharedNotebooks_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeSharedNotebooks_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeSharedNotebooks_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeSharedNotebooks_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeSharedNotebooks failed: unknown result")
createLinkedNotebook (ip,op) arg_authenticationToken arg_linkedNotebook = do
  send_createLinkedNotebook op arg_authenticationToken arg_linkedNotebook
  recv_createLinkedNotebook ip
send_createLinkedNotebook op arg_authenticationToken arg_linkedNotebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("createLinkedNotebook", M_CALL, seqn)
  write_CreateLinkedNotebook_args op (CreateLinkedNotebook_args{f_CreateLinkedNotebook_args_authenticationToken=Just arg_authenticationToken,f_CreateLinkedNotebook_args_linkedNotebook=Just arg_linkedNotebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_createLinkedNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_CreateLinkedNotebook_result ip
  readMessageEnd ip
  case f_CreateLinkedNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_CreateLinkedNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateLinkedNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_CreateLinkedNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "createLinkedNotebook failed: unknown result")
updateLinkedNotebook (ip,op) arg_authenticationToken arg_linkedNotebook = do
  send_updateLinkedNotebook op arg_authenticationToken arg_linkedNotebook
  recv_updateLinkedNotebook ip
send_updateLinkedNotebook op arg_authenticationToken arg_linkedNotebook = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("updateLinkedNotebook", M_CALL, seqn)
  write_UpdateLinkedNotebook_args op (UpdateLinkedNotebook_args{f_UpdateLinkedNotebook_args_authenticationToken=Just arg_authenticationToken,f_UpdateLinkedNotebook_args_linkedNotebook=Just arg_linkedNotebook})
  writeMessageEnd op
  tFlush (getTransport op)
recv_updateLinkedNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_UpdateLinkedNotebook_result ip
  readMessageEnd ip
  case f_UpdateLinkedNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_UpdateLinkedNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateLinkedNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_UpdateLinkedNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "updateLinkedNotebook failed: unknown result")
listLinkedNotebooks (ip,op) arg_authenticationToken = do
  send_listLinkedNotebooks op arg_authenticationToken
  recv_listLinkedNotebooks ip
send_listLinkedNotebooks op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("listLinkedNotebooks", M_CALL, seqn)
  write_ListLinkedNotebooks_args op (ListLinkedNotebooks_args{f_ListLinkedNotebooks_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_listLinkedNotebooks ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ListLinkedNotebooks_result ip
  readMessageEnd ip
  case f_ListLinkedNotebooks_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ListLinkedNotebooks_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListLinkedNotebooks_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ListLinkedNotebooks_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "listLinkedNotebooks failed: unknown result")
expungeLinkedNotebook (ip,op) arg_authenticationToken arg_guid = do
  send_expungeLinkedNotebook op arg_authenticationToken arg_guid
  recv_expungeLinkedNotebook ip
send_expungeLinkedNotebook op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("expungeLinkedNotebook", M_CALL, seqn)
  write_ExpungeLinkedNotebook_args op (ExpungeLinkedNotebook_args{f_ExpungeLinkedNotebook_args_authenticationToken=Just arg_authenticationToken,f_ExpungeLinkedNotebook_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_expungeLinkedNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ExpungeLinkedNotebook_result ip
  readMessageEnd ip
  case f_ExpungeLinkedNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ExpungeLinkedNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeLinkedNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ExpungeLinkedNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "expungeLinkedNotebook failed: unknown result")
authenticateToSharedNotebook (ip,op) arg_shareKey arg_authenticationToken = do
  send_authenticateToSharedNotebook op arg_shareKey arg_authenticationToken
  recv_authenticateToSharedNotebook ip
send_authenticateToSharedNotebook op arg_shareKey arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("authenticateToSharedNotebook", M_CALL, seqn)
  write_AuthenticateToSharedNotebook_args op (AuthenticateToSharedNotebook_args{f_AuthenticateToSharedNotebook_args_shareKey=Just arg_shareKey,f_AuthenticateToSharedNotebook_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_authenticateToSharedNotebook ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_AuthenticateToSharedNotebook_result ip
  readMessageEnd ip
  case f_AuthenticateToSharedNotebook_result_success res of
    Just v -> return v
    Nothing -> do
      case f_AuthenticateToSharedNotebook_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_AuthenticateToSharedNotebook_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_AuthenticateToSharedNotebook_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "authenticateToSharedNotebook failed: unknown result")
getSharedNotebookByAuth (ip,op) arg_authenticationToken = do
  send_getSharedNotebookByAuth op arg_authenticationToken
  recv_getSharedNotebookByAuth ip
send_getSharedNotebookByAuth op arg_authenticationToken = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getSharedNotebookByAuth", M_CALL, seqn)
  write_GetSharedNotebookByAuth_args op (GetSharedNotebookByAuth_args{f_GetSharedNotebookByAuth_args_authenticationToken=Just arg_authenticationToken})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getSharedNotebookByAuth ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetSharedNotebookByAuth_result ip
  readMessageEnd ip
  case f_GetSharedNotebookByAuth_result_success res of
    Just v -> return v
    Nothing -> do
      case f_GetSharedNotebookByAuth_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSharedNotebookByAuth_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_GetSharedNotebookByAuth_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "getSharedNotebookByAuth failed: unknown result")
emailNote (ip,op) arg_authenticationToken arg_parameters = do
  send_emailNote op arg_authenticationToken arg_parameters
  recv_emailNote ip
send_emailNote op arg_authenticationToken arg_parameters = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("emailNote", M_CALL, seqn)
  write_EmailNote_args op (EmailNote_args{f_EmailNote_args_authenticationToken=Just arg_authenticationToken,f_EmailNote_args_parameters=Just arg_parameters})
  writeMessageEnd op
  tFlush (getTransport op)
recv_emailNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_EmailNote_result ip
  readMessageEnd ip
  case f_EmailNote_result_userException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_EmailNote_result_notFoundException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_EmailNote_result_systemException res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
shareNote (ip,op) arg_authenticationToken arg_guid = do
  send_shareNote op arg_authenticationToken arg_guid
  recv_shareNote ip
send_shareNote op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("shareNote", M_CALL, seqn)
  write_ShareNote_args op (ShareNote_args{f_ShareNote_args_authenticationToken=Just arg_authenticationToken,f_ShareNote_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_shareNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ShareNote_result ip
  readMessageEnd ip
  case f_ShareNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_ShareNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ShareNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_ShareNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "shareNote failed: unknown result")
stopSharingNote (ip,op) arg_authenticationToken arg_guid = do
  send_stopSharingNote op arg_authenticationToken arg_guid
  recv_stopSharingNote ip
send_stopSharingNote op arg_authenticationToken arg_guid = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("stopSharingNote", M_CALL, seqn)
  write_StopSharingNote_args op (StopSharingNote_args{f_StopSharingNote_args_authenticationToken=Just arg_authenticationToken,f_StopSharingNote_args_guid=Just arg_guid})
  writeMessageEnd op
  tFlush (getTransport op)
recv_stopSharingNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_StopSharingNote_result ip
  readMessageEnd ip
  case f_StopSharingNote_result_userException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_StopSharingNote_result_notFoundException res of
    Nothing -> return ()
    Just _v -> throw _v
  case f_StopSharingNote_result_systemException res of
    Nothing -> return ()
    Just _v -> throw _v
  return ()
authenticateToSharedNote (ip,op) arg_guid arg_noteKey = do
  send_authenticateToSharedNote op arg_guid arg_noteKey
  recv_authenticateToSharedNote ip
send_authenticateToSharedNote op arg_guid arg_noteKey = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("authenticateToSharedNote", M_CALL, seqn)
  write_AuthenticateToSharedNote_args op (AuthenticateToSharedNote_args{f_AuthenticateToSharedNote_args_guid=Just arg_guid,f_AuthenticateToSharedNote_args_noteKey=Just arg_noteKey})
  writeMessageEnd op
  tFlush (getTransport op)
recv_authenticateToSharedNote ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_AuthenticateToSharedNote_result ip
  readMessageEnd ip
  case f_AuthenticateToSharedNote_result_success res of
    Just v -> return v
    Nothing -> do
      case f_AuthenticateToSharedNote_result_userException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_AuthenticateToSharedNote_result_notFoundException res of
        Nothing -> return ()
        Just _v -> throw _v
      case f_AuthenticateToSharedNote_result_systemException res of
        Nothing -> return ()
        Just _v -> throw _v
      throw (AppExn AE_MISSING_RESULT "authenticateToSharedNote failed: unknown result")
