{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NoteStore where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift

import qualified UserStore_Types
import qualified Types_Types
--import qualified Errors_Types
import Types_Types
import Errors_Types
import UserStore_Types
import qualified Limits_Types


import NoteStore_Types
import qualified NoteStore_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data GetSyncState_args = GetSyncState_args{f_GetSyncState_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetSyncState_args oprot record = do
  writeStructBegin oprot "GetSyncState_args"
  case f_GetSyncState_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSyncState_args_fields iprot record = do
  (_,_t216,_id217) <- readFieldBegin iprot
  if _t216 == T_STOP then return record else
    case _id217 of 
      1 -> if _t216 == T_STRING then do
        s <- readString iprot
        read_GetSyncState_args_fields iprot record{f_GetSyncState_args_authenticationToken=Just s}
        else do
          skip iprot _t216
          read_GetSyncState_args_fields iprot record
      _ -> do
        skip iprot _t216
        readFieldEnd iprot
        read_GetSyncState_args_fields iprot record
read_GetSyncState_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSyncState_args_fields iprot (GetSyncState_args{f_GetSyncState_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data GetSyncState_result = GetSyncState_result{f_GetSyncState_result_success :: Maybe SyncState,f_GetSyncState_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetSyncState_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetSyncState_result oprot record = do
  writeStructBegin oprot "GetSyncState_result"
  case f_GetSyncState_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_SyncState oprot _v
    writeFieldEnd oprot}
  case f_GetSyncState_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetSyncState_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSyncState_result_fields iprot record = do
  (_,_t221,_id222) <- readFieldBegin iprot
  if _t221 == T_STOP then return record else
    case _id222 of 
      0 -> if _t221 == T_STRUCT then do
        s <- (read_SyncState iprot)
        read_GetSyncState_result_fields iprot record{f_GetSyncState_result_success=Just s}
        else do
          skip iprot _t221
          read_GetSyncState_result_fields iprot record
      1 -> if _t221 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetSyncState_result_fields iprot record{f_GetSyncState_result_userException=Just s}
        else do
          skip iprot _t221
          read_GetSyncState_result_fields iprot record
      2 -> if _t221 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetSyncState_result_fields iprot record{f_GetSyncState_result_systemException=Just s}
        else do
          skip iprot _t221
          read_GetSyncState_result_fields iprot record
      _ -> do
        skip iprot _t221
        readFieldEnd iprot
        read_GetSyncState_result_fields iprot record
read_GetSyncState_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSyncState_result_fields iprot (GetSyncState_result{f_GetSyncState_result_success=Nothing,f_GetSyncState_result_userException=Nothing,f_GetSyncState_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetSyncChunk_args = GetSyncChunk_args{f_GetSyncChunk_args_authenticationToken :: Maybe String,f_GetSyncChunk_args_afterUSN :: Maybe Int32,f_GetSyncChunk_args_maxEntries :: Maybe Int32,f_GetSyncChunk_args_fullSyncOnly :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetSyncChunk_args oprot record = do
  writeStructBegin oprot "GetSyncChunk_args"
  case f_GetSyncChunk_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetSyncChunk_args_afterUSN record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("afterUSN",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetSyncChunk_args_maxEntries record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxEntries",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetSyncChunk_args_fullSyncOnly record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("fullSyncOnly",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSyncChunk_args_fields iprot record = do
  (_,_t226,_id227) <- readFieldBegin iprot
  if _t226 == T_STOP then return record else
    case _id227 of 
      1 -> if _t226 == T_STRING then do
        s <- readString iprot
        read_GetSyncChunk_args_fields iprot record{f_GetSyncChunk_args_authenticationToken=Just s}
        else do
          skip iprot _t226
          read_GetSyncChunk_args_fields iprot record
      2 -> if _t226 == T_I32 then do
        s <- readI32 iprot
        read_GetSyncChunk_args_fields iprot record{f_GetSyncChunk_args_afterUSN=Just s}
        else do
          skip iprot _t226
          read_GetSyncChunk_args_fields iprot record
      3 -> if _t226 == T_I32 then do
        s <- readI32 iprot
        read_GetSyncChunk_args_fields iprot record{f_GetSyncChunk_args_maxEntries=Just s}
        else do
          skip iprot _t226
          read_GetSyncChunk_args_fields iprot record
      4 -> if _t226 == T_BOOL then do
        s <- readBool iprot
        read_GetSyncChunk_args_fields iprot record{f_GetSyncChunk_args_fullSyncOnly=Just s}
        else do
          skip iprot _t226
          read_GetSyncChunk_args_fields iprot record
      _ -> do
        skip iprot _t226
        readFieldEnd iprot
        read_GetSyncChunk_args_fields iprot record
read_GetSyncChunk_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSyncChunk_args_fields iprot (GetSyncChunk_args{f_GetSyncChunk_args_authenticationToken=Nothing,f_GetSyncChunk_args_afterUSN=Nothing,f_GetSyncChunk_args_maxEntries=Nothing,f_GetSyncChunk_args_fullSyncOnly=Nothing})
  readStructEnd iprot
  return record
data GetSyncChunk_result = GetSyncChunk_result{f_GetSyncChunk_result_success :: Maybe SyncChunk,f_GetSyncChunk_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetSyncChunk_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetSyncChunk_result oprot record = do
  writeStructBegin oprot "GetSyncChunk_result"
  case f_GetSyncChunk_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_SyncChunk oprot _v
    writeFieldEnd oprot}
  case f_GetSyncChunk_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetSyncChunk_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSyncChunk_result_fields iprot record = do
  (_,_t231,_id232) <- readFieldBegin iprot
  if _t231 == T_STOP then return record else
    case _id232 of 
      0 -> if _t231 == T_STRUCT then do
        s <- (read_SyncChunk iprot)
        read_GetSyncChunk_result_fields iprot record{f_GetSyncChunk_result_success=Just s}
        else do
          skip iprot _t231
          read_GetSyncChunk_result_fields iprot record
      1 -> if _t231 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetSyncChunk_result_fields iprot record{f_GetSyncChunk_result_userException=Just s}
        else do
          skip iprot _t231
          read_GetSyncChunk_result_fields iprot record
      2 -> if _t231 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetSyncChunk_result_fields iprot record{f_GetSyncChunk_result_systemException=Just s}
        else do
          skip iprot _t231
          read_GetSyncChunk_result_fields iprot record
      _ -> do
        skip iprot _t231
        readFieldEnd iprot
        read_GetSyncChunk_result_fields iprot record
read_GetSyncChunk_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSyncChunk_result_fields iprot (GetSyncChunk_result{f_GetSyncChunk_result_success=Nothing,f_GetSyncChunk_result_userException=Nothing,f_GetSyncChunk_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetLinkedNotebookSyncState_args = GetLinkedNotebookSyncState_args{f_GetLinkedNotebookSyncState_args_authenticationToken :: Maybe String,f_GetLinkedNotebookSyncState_args_linkedNotebook :: Maybe Types_Types.LinkedNotebook} deriving (Show,Eq,Ord,Typeable)
write_GetLinkedNotebookSyncState_args oprot record = do
  writeStructBegin oprot "GetLinkedNotebookSyncState_args"
  case f_GetLinkedNotebookSyncState_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncState_args_linkedNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("linkedNotebook",T_STRUCT,2)
    Types_Types.write_LinkedNotebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLinkedNotebookSyncState_args_fields iprot record = do
  (_,_t236,_id237) <- readFieldBegin iprot
  if _t236 == T_STOP then return record else
    case _id237 of 
      1 -> if _t236 == T_STRING then do
        s <- readString iprot
        read_GetLinkedNotebookSyncState_args_fields iprot record{f_GetLinkedNotebookSyncState_args_authenticationToken=Just s}
        else do
          skip iprot _t236
          read_GetLinkedNotebookSyncState_args_fields iprot record
      2 -> if _t236 == T_STRUCT then do
        s <- (read_LinkedNotebook iprot)
        read_GetLinkedNotebookSyncState_args_fields iprot record{f_GetLinkedNotebookSyncState_args_linkedNotebook=Just s}
        else do
          skip iprot _t236
          read_GetLinkedNotebookSyncState_args_fields iprot record
      _ -> do
        skip iprot _t236
        readFieldEnd iprot
        read_GetLinkedNotebookSyncState_args_fields iprot record
read_GetLinkedNotebookSyncState_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLinkedNotebookSyncState_args_fields iprot (GetLinkedNotebookSyncState_args{f_GetLinkedNotebookSyncState_args_authenticationToken=Nothing,f_GetLinkedNotebookSyncState_args_linkedNotebook=Nothing})
  readStructEnd iprot
  return record
data GetLinkedNotebookSyncState_result = GetLinkedNotebookSyncState_result{f_GetLinkedNotebookSyncState_result_success :: Maybe SyncState,f_GetLinkedNotebookSyncState_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetLinkedNotebookSyncState_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetLinkedNotebookSyncState_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetLinkedNotebookSyncState_result oprot record = do
  writeStructBegin oprot "GetLinkedNotebookSyncState_result"
  case f_GetLinkedNotebookSyncState_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_SyncState oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncState_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncState_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncState_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLinkedNotebookSyncState_result_fields iprot record = do
  (_,_t241,_id242) <- readFieldBegin iprot
  if _t241 == T_STOP then return record else
    case _id242 of 
      0 -> if _t241 == T_STRUCT then do
        s <- (read_SyncState iprot)
        read_GetLinkedNotebookSyncState_result_fields iprot record{f_GetLinkedNotebookSyncState_result_success=Just s}
        else do
          skip iprot _t241
          read_GetLinkedNotebookSyncState_result_fields iprot record
      1 -> if _t241 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetLinkedNotebookSyncState_result_fields iprot record{f_GetLinkedNotebookSyncState_result_userException=Just s}
        else do
          skip iprot _t241
          read_GetLinkedNotebookSyncState_result_fields iprot record
      2 -> if _t241 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetLinkedNotebookSyncState_result_fields iprot record{f_GetLinkedNotebookSyncState_result_systemException=Just s}
        else do
          skip iprot _t241
          read_GetLinkedNotebookSyncState_result_fields iprot record
      3 -> if _t241 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetLinkedNotebookSyncState_result_fields iprot record{f_GetLinkedNotebookSyncState_result_notFoundException=Just s}
        else do
          skip iprot _t241
          read_GetLinkedNotebookSyncState_result_fields iprot record
      _ -> do
        skip iprot _t241
        readFieldEnd iprot
        read_GetLinkedNotebookSyncState_result_fields iprot record
read_GetLinkedNotebookSyncState_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLinkedNotebookSyncState_result_fields iprot (GetLinkedNotebookSyncState_result{f_GetLinkedNotebookSyncState_result_success=Nothing,f_GetLinkedNotebookSyncState_result_userException=Nothing,f_GetLinkedNotebookSyncState_result_systemException=Nothing,f_GetLinkedNotebookSyncState_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetLinkedNotebookSyncChunk_args = GetLinkedNotebookSyncChunk_args{f_GetLinkedNotebookSyncChunk_args_authenticationToken :: Maybe String,f_GetLinkedNotebookSyncChunk_args_linkedNotebook :: Maybe Types_Types.LinkedNotebook,f_GetLinkedNotebookSyncChunk_args_afterUSN :: Maybe Int32,f_GetLinkedNotebookSyncChunk_args_maxEntries :: Maybe Int32,f_GetLinkedNotebookSyncChunk_args_fullSyncOnly :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetLinkedNotebookSyncChunk_args oprot record = do
  writeStructBegin oprot "GetLinkedNotebookSyncChunk_args"
  case f_GetLinkedNotebookSyncChunk_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_args_linkedNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("linkedNotebook",T_STRUCT,2)
    Types_Types.write_LinkedNotebook oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_args_afterUSN record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("afterUSN",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_args_maxEntries record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxEntries",T_I32,4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_args_fullSyncOnly record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("fullSyncOnly",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLinkedNotebookSyncChunk_args_fields iprot record = do
  (_,_t246,_id247) <- readFieldBegin iprot
  if _t246 == T_STOP then return record else
    case _id247 of 
      1 -> if _t246 == T_STRING then do
        s <- readString iprot
        read_GetLinkedNotebookSyncChunk_args_fields iprot record{f_GetLinkedNotebookSyncChunk_args_authenticationToken=Just s}
        else do
          skip iprot _t246
          read_GetLinkedNotebookSyncChunk_args_fields iprot record
      2 -> if _t246 == T_STRUCT then do
        s <- (read_LinkedNotebook iprot)
        read_GetLinkedNotebookSyncChunk_args_fields iprot record{f_GetLinkedNotebookSyncChunk_args_linkedNotebook=Just s}
        else do
          skip iprot _t246
          read_GetLinkedNotebookSyncChunk_args_fields iprot record
      3 -> if _t246 == T_I32 then do
        s <- readI32 iprot
        read_GetLinkedNotebookSyncChunk_args_fields iprot record{f_GetLinkedNotebookSyncChunk_args_afterUSN=Just s}
        else do
          skip iprot _t246
          read_GetLinkedNotebookSyncChunk_args_fields iprot record
      4 -> if _t246 == T_I32 then do
        s <- readI32 iprot
        read_GetLinkedNotebookSyncChunk_args_fields iprot record{f_GetLinkedNotebookSyncChunk_args_maxEntries=Just s}
        else do
          skip iprot _t246
          read_GetLinkedNotebookSyncChunk_args_fields iprot record
      5 -> if _t246 == T_BOOL then do
        s <- readBool iprot
        read_GetLinkedNotebookSyncChunk_args_fields iprot record{f_GetLinkedNotebookSyncChunk_args_fullSyncOnly=Just s}
        else do
          skip iprot _t246
          read_GetLinkedNotebookSyncChunk_args_fields iprot record
      _ -> do
        skip iprot _t246
        readFieldEnd iprot
        read_GetLinkedNotebookSyncChunk_args_fields iprot record
read_GetLinkedNotebookSyncChunk_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLinkedNotebookSyncChunk_args_fields iprot (GetLinkedNotebookSyncChunk_args{f_GetLinkedNotebookSyncChunk_args_authenticationToken=Nothing,f_GetLinkedNotebookSyncChunk_args_linkedNotebook=Nothing,f_GetLinkedNotebookSyncChunk_args_afterUSN=Nothing,f_GetLinkedNotebookSyncChunk_args_maxEntries=Nothing,f_GetLinkedNotebookSyncChunk_args_fullSyncOnly=Nothing})
  readStructEnd iprot
  return record
data GetLinkedNotebookSyncChunk_result = GetLinkedNotebookSyncChunk_result{f_GetLinkedNotebookSyncChunk_result_success :: Maybe SyncChunk,f_GetLinkedNotebookSyncChunk_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetLinkedNotebookSyncChunk_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetLinkedNotebookSyncChunk_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetLinkedNotebookSyncChunk_result oprot record = do
  writeStructBegin oprot "GetLinkedNotebookSyncChunk_result"
  case f_GetLinkedNotebookSyncChunk_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_SyncChunk oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetLinkedNotebookSyncChunk_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLinkedNotebookSyncChunk_result_fields iprot record = do
  (_,_t251,_id252) <- readFieldBegin iprot
  if _t251 == T_STOP then return record else
    case _id252 of 
      0 -> if _t251 == T_STRUCT then do
        s <- (read_SyncChunk iprot)
        read_GetLinkedNotebookSyncChunk_result_fields iprot record{f_GetLinkedNotebookSyncChunk_result_success=Just s}
        else do
          skip iprot _t251
          read_GetLinkedNotebookSyncChunk_result_fields iprot record
      1 -> if _t251 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetLinkedNotebookSyncChunk_result_fields iprot record{f_GetLinkedNotebookSyncChunk_result_userException=Just s}
        else do
          skip iprot _t251
          read_GetLinkedNotebookSyncChunk_result_fields iprot record
      2 -> if _t251 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetLinkedNotebookSyncChunk_result_fields iprot record{f_GetLinkedNotebookSyncChunk_result_systemException=Just s}
        else do
          skip iprot _t251
          read_GetLinkedNotebookSyncChunk_result_fields iprot record
      3 -> if _t251 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetLinkedNotebookSyncChunk_result_fields iprot record{f_GetLinkedNotebookSyncChunk_result_notFoundException=Just s}
        else do
          skip iprot _t251
          read_GetLinkedNotebookSyncChunk_result_fields iprot record
      _ -> do
        skip iprot _t251
        readFieldEnd iprot
        read_GetLinkedNotebookSyncChunk_result_fields iprot record
read_GetLinkedNotebookSyncChunk_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLinkedNotebookSyncChunk_result_fields iprot (GetLinkedNotebookSyncChunk_result{f_GetLinkedNotebookSyncChunk_result_success=Nothing,f_GetLinkedNotebookSyncChunk_result_userException=Nothing,f_GetLinkedNotebookSyncChunk_result_systemException=Nothing,f_GetLinkedNotebookSyncChunk_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ListNotebooks_args = ListNotebooks_args{f_ListNotebooks_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListNotebooks_args oprot record = do
  writeStructBegin oprot "ListNotebooks_args"
  case f_ListNotebooks_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListNotebooks_args_fields iprot record = do
  (_,_t256,_id257) <- readFieldBegin iprot
  if _t256 == T_STOP then return record else
    case _id257 of 
      1 -> if _t256 == T_STRING then do
        s <- readString iprot
        read_ListNotebooks_args_fields iprot record{f_ListNotebooks_args_authenticationToken=Just s}
        else do
          skip iprot _t256
          read_ListNotebooks_args_fields iprot record
      _ -> do
        skip iprot _t256
        readFieldEnd iprot
        read_ListNotebooks_args_fields iprot record
read_ListNotebooks_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListNotebooks_args_fields iprot (ListNotebooks_args{f_ListNotebooks_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ListNotebooks_result = ListNotebooks_result{f_ListNotebooks_result_success :: Maybe [Types_Types.Notebook],f_ListNotebooks_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListNotebooks_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ListNotebooks_result oprot record = do
  writeStructBegin oprot "ListNotebooks_result"
  case f_ListNotebooks_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter260:t) = do {Types_Types.write_Notebook oprot _viter260;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListNotebooks_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListNotebooks_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListNotebooks_result_fields iprot record = do
  (_,_t262,_id263) <- readFieldBegin iprot
  if _t262 == T_STOP then return record else
    case _id263 of 
      0 -> if _t262 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Notebook iprot);r <- f (n-1); return $ v:r}} in do {(_etype267,_size264) <- readListBegin iprot; f _size264})
        read_ListNotebooks_result_fields iprot record{f_ListNotebooks_result_success=Just s}
        else do
          skip iprot _t262
          read_ListNotebooks_result_fields iprot record
      1 -> if _t262 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListNotebooks_result_fields iprot record{f_ListNotebooks_result_userException=Just s}
        else do
          skip iprot _t262
          read_ListNotebooks_result_fields iprot record
      2 -> if _t262 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListNotebooks_result_fields iprot record{f_ListNotebooks_result_systemException=Just s}
        else do
          skip iprot _t262
          read_ListNotebooks_result_fields iprot record
      _ -> do
        skip iprot _t262
        readFieldEnd iprot
        read_ListNotebooks_result_fields iprot record
read_ListNotebooks_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListNotebooks_result_fields iprot (ListNotebooks_result{f_ListNotebooks_result_success=Nothing,f_ListNotebooks_result_userException=Nothing,f_ListNotebooks_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetNotebook_args = GetNotebook_args{f_GetNotebook_args_authenticationToken :: Maybe String,f_GetNotebook_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetNotebook_args oprot record = do
  writeStructBegin oprot "GetNotebook_args"
  case f_GetNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNotebook_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNotebook_args_fields iprot record = do
  (_,_t272,_id273) <- readFieldBegin iprot
  if _t272 == T_STOP then return record else
    case _id273 of 
      1 -> if _t272 == T_STRING then do
        s <- readString iprot
        read_GetNotebook_args_fields iprot record{f_GetNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t272
          read_GetNotebook_args_fields iprot record
      2 -> if _t272 == T_STRING then do
        s <- readString iprot
        read_GetNotebook_args_fields iprot record{f_GetNotebook_args_guid=Just s}
        else do
          skip iprot _t272
          read_GetNotebook_args_fields iprot record
      _ -> do
        skip iprot _t272
        readFieldEnd iprot
        read_GetNotebook_args_fields iprot record
read_GetNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNotebook_args_fields iprot (GetNotebook_args{f_GetNotebook_args_authenticationToken=Nothing,f_GetNotebook_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetNotebook_result = GetNotebook_result{f_GetNotebook_result_success :: Maybe Types_Types.Notebook,f_GetNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNotebook_result oprot record = do
  writeStructBegin oprot "GetNotebook_result"
  case f_GetNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  case f_GetNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNotebook_result_fields iprot record = do
  (_,_t277,_id278) <- readFieldBegin iprot
  if _t277 == T_STOP then return record else
    case _id278 of 
      0 -> if _t277 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_GetNotebook_result_fields iprot record{f_GetNotebook_result_success=Just s}
        else do
          skip iprot _t277
          read_GetNotebook_result_fields iprot record
      1 -> if _t277 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNotebook_result_fields iprot record{f_GetNotebook_result_userException=Just s}
        else do
          skip iprot _t277
          read_GetNotebook_result_fields iprot record
      2 -> if _t277 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNotebook_result_fields iprot record{f_GetNotebook_result_systemException=Just s}
        else do
          skip iprot _t277
          read_GetNotebook_result_fields iprot record
      3 -> if _t277 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNotebook_result_fields iprot record{f_GetNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t277
          read_GetNotebook_result_fields iprot record
      _ -> do
        skip iprot _t277
        readFieldEnd iprot
        read_GetNotebook_result_fields iprot record
read_GetNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNotebook_result_fields iprot (GetNotebook_result{f_GetNotebook_result_success=Nothing,f_GetNotebook_result_userException=Nothing,f_GetNotebook_result_systemException=Nothing,f_GetNotebook_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetDefaultNotebook_args = GetDefaultNotebook_args{f_GetDefaultNotebook_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetDefaultNotebook_args oprot record = do
  writeStructBegin oprot "GetDefaultNotebook_args"
  case f_GetDefaultNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetDefaultNotebook_args_fields iprot record = do
  (_,_t282,_id283) <- readFieldBegin iprot
  if _t282 == T_STOP then return record else
    case _id283 of 
      1 -> if _t282 == T_STRING then do
        s <- readString iprot
        read_GetDefaultNotebook_args_fields iprot record{f_GetDefaultNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t282
          read_GetDefaultNotebook_args_fields iprot record
      _ -> do
        skip iprot _t282
        readFieldEnd iprot
        read_GetDefaultNotebook_args_fields iprot record
read_GetDefaultNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetDefaultNotebook_args_fields iprot (GetDefaultNotebook_args{f_GetDefaultNotebook_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data GetDefaultNotebook_result = GetDefaultNotebook_result{f_GetDefaultNotebook_result_success :: Maybe Types_Types.Notebook,f_GetDefaultNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetDefaultNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetDefaultNotebook_result oprot record = do
  writeStructBegin oprot "GetDefaultNotebook_result"
  case f_GetDefaultNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  case f_GetDefaultNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetDefaultNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetDefaultNotebook_result_fields iprot record = do
  (_,_t287,_id288) <- readFieldBegin iprot
  if _t287 == T_STOP then return record else
    case _id288 of 
      0 -> if _t287 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_GetDefaultNotebook_result_fields iprot record{f_GetDefaultNotebook_result_success=Just s}
        else do
          skip iprot _t287
          read_GetDefaultNotebook_result_fields iprot record
      1 -> if _t287 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetDefaultNotebook_result_fields iprot record{f_GetDefaultNotebook_result_userException=Just s}
        else do
          skip iprot _t287
          read_GetDefaultNotebook_result_fields iprot record
      2 -> if _t287 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetDefaultNotebook_result_fields iprot record{f_GetDefaultNotebook_result_systemException=Just s}
        else do
          skip iprot _t287
          read_GetDefaultNotebook_result_fields iprot record
      _ -> do
        skip iprot _t287
        readFieldEnd iprot
        read_GetDefaultNotebook_result_fields iprot record
read_GetDefaultNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetDefaultNotebook_result_fields iprot (GetDefaultNotebook_result{f_GetDefaultNotebook_result_success=Nothing,f_GetDefaultNotebook_result_userException=Nothing,f_GetDefaultNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data CreateNotebook_args = CreateNotebook_args{f_CreateNotebook_args_authenticationToken :: Maybe String,f_CreateNotebook_args_notebook :: Maybe Types_Types.Notebook} deriving (Show,Eq,Ord,Typeable)
write_CreateNotebook_args oprot record = do
  writeStructBegin oprot "CreateNotebook_args"
  case f_CreateNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateNotebook_args_notebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebook",T_STRUCT,2)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateNotebook_args_fields iprot record = do
  (_,_t292,_id293) <- readFieldBegin iprot
  if _t292 == T_STOP then return record else
    case _id293 of 
      1 -> if _t292 == T_STRING then do
        s <- readString iprot
        read_CreateNotebook_args_fields iprot record{f_CreateNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t292
          read_CreateNotebook_args_fields iprot record
      2 -> if _t292 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_CreateNotebook_args_fields iprot record{f_CreateNotebook_args_notebook=Just s}
        else do
          skip iprot _t292
          read_CreateNotebook_args_fields iprot record
      _ -> do
        skip iprot _t292
        readFieldEnd iprot
        read_CreateNotebook_args_fields iprot record
read_CreateNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateNotebook_args_fields iprot (CreateNotebook_args{f_CreateNotebook_args_authenticationToken=Nothing,f_CreateNotebook_args_notebook=Nothing})
  readStructEnd iprot
  return record
data CreateNotebook_result = CreateNotebook_result{f_CreateNotebook_result_success :: Maybe Types_Types.Notebook,f_CreateNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_CreateNotebook_result oprot record = do
  writeStructBegin oprot "CreateNotebook_result"
  case f_CreateNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  case f_CreateNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateNotebook_result_fields iprot record = do
  (_,_t297,_id298) <- readFieldBegin iprot
  if _t297 == T_STOP then return record else
    case _id298 of 
      0 -> if _t297 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_CreateNotebook_result_fields iprot record{f_CreateNotebook_result_success=Just s}
        else do
          skip iprot _t297
          read_CreateNotebook_result_fields iprot record
      1 -> if _t297 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateNotebook_result_fields iprot record{f_CreateNotebook_result_userException=Just s}
        else do
          skip iprot _t297
          read_CreateNotebook_result_fields iprot record
      2 -> if _t297 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateNotebook_result_fields iprot record{f_CreateNotebook_result_systemException=Just s}
        else do
          skip iprot _t297
          read_CreateNotebook_result_fields iprot record
      _ -> do
        skip iprot _t297
        readFieldEnd iprot
        read_CreateNotebook_result_fields iprot record
read_CreateNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateNotebook_result_fields iprot (CreateNotebook_result{f_CreateNotebook_result_success=Nothing,f_CreateNotebook_result_userException=Nothing,f_CreateNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data UpdateNotebook_args = UpdateNotebook_args{f_UpdateNotebook_args_authenticationToken :: Maybe String,f_UpdateNotebook_args_notebook :: Maybe Types_Types.Notebook} deriving (Show,Eq,Ord,Typeable)
write_UpdateNotebook_args oprot record = do
  writeStructBegin oprot "UpdateNotebook_args"
  case f_UpdateNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateNotebook_args_notebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebook",T_STRUCT,2)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateNotebook_args_fields iprot record = do
  (_,_t302,_id303) <- readFieldBegin iprot
  if _t302 == T_STOP then return record else
    case _id303 of 
      1 -> if _t302 == T_STRING then do
        s <- readString iprot
        read_UpdateNotebook_args_fields iprot record{f_UpdateNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t302
          read_UpdateNotebook_args_fields iprot record
      2 -> if _t302 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_UpdateNotebook_args_fields iprot record{f_UpdateNotebook_args_notebook=Just s}
        else do
          skip iprot _t302
          read_UpdateNotebook_args_fields iprot record
      _ -> do
        skip iprot _t302
        readFieldEnd iprot
        read_UpdateNotebook_args_fields iprot record
read_UpdateNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateNotebook_args_fields iprot (UpdateNotebook_args{f_UpdateNotebook_args_authenticationToken=Nothing,f_UpdateNotebook_args_notebook=Nothing})
  readStructEnd iprot
  return record
data UpdateNotebook_result = UpdateNotebook_result{f_UpdateNotebook_result_success :: Maybe Int32,f_UpdateNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UpdateNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UpdateNotebook_result oprot record = do
  writeStructBegin oprot "UpdateNotebook_result"
  case f_UpdateNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UpdateNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UpdateNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateNotebook_result_fields iprot record = do
  (_,_t307,_id308) <- readFieldBegin iprot
  if _t307 == T_STOP then return record else
    case _id308 of 
      0 -> if _t307 == T_I32 then do
        s <- readI32 iprot
        read_UpdateNotebook_result_fields iprot record{f_UpdateNotebook_result_success=Just s}
        else do
          skip iprot _t307
          read_UpdateNotebook_result_fields iprot record
      1 -> if _t307 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateNotebook_result_fields iprot record{f_UpdateNotebook_result_userException=Just s}
        else do
          skip iprot _t307
          read_UpdateNotebook_result_fields iprot record
      2 -> if _t307 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateNotebook_result_fields iprot record{f_UpdateNotebook_result_systemException=Just s}
        else do
          skip iprot _t307
          read_UpdateNotebook_result_fields iprot record
      3 -> if _t307 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateNotebook_result_fields iprot record{f_UpdateNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t307
          read_UpdateNotebook_result_fields iprot record
      _ -> do
        skip iprot _t307
        readFieldEnd iprot
        read_UpdateNotebook_result_fields iprot record
read_UpdateNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateNotebook_result_fields iprot (UpdateNotebook_result{f_UpdateNotebook_result_success=Nothing,f_UpdateNotebook_result_userException=Nothing,f_UpdateNotebook_result_systemException=Nothing,f_UpdateNotebook_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeNotebook_args = ExpungeNotebook_args{f_ExpungeNotebook_args_authenticationToken :: Maybe String,f_ExpungeNotebook_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNotebook_args oprot record = do
  writeStructBegin oprot "ExpungeNotebook_args"
  case f_ExpungeNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotebook_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNotebook_args_fields iprot record = do
  (_,_t312,_id313) <- readFieldBegin iprot
  if _t312 == T_STOP then return record else
    case _id313 of 
      1 -> if _t312 == T_STRING then do
        s <- readString iprot
        read_ExpungeNotebook_args_fields iprot record{f_ExpungeNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t312
          read_ExpungeNotebook_args_fields iprot record
      2 -> if _t312 == T_STRING then do
        s <- readString iprot
        read_ExpungeNotebook_args_fields iprot record{f_ExpungeNotebook_args_guid=Just s}
        else do
          skip iprot _t312
          read_ExpungeNotebook_args_fields iprot record
      _ -> do
        skip iprot _t312
        readFieldEnd iprot
        read_ExpungeNotebook_args_fields iprot record
read_ExpungeNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNotebook_args_fields iprot (ExpungeNotebook_args{f_ExpungeNotebook_args_authenticationToken=Nothing,f_ExpungeNotebook_args_guid=Nothing})
  readStructEnd iprot
  return record
data ExpungeNotebook_result = ExpungeNotebook_result{f_ExpungeNotebook_result_success :: Maybe Int32,f_ExpungeNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ExpungeNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNotebook_result oprot record = do
  writeStructBegin oprot "ExpungeNotebook_result"
  case f_ExpungeNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNotebook_result_fields iprot record = do
  (_,_t317,_id318) <- readFieldBegin iprot
  if _t317 == T_STOP then return record else
    case _id318 of 
      0 -> if _t317 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeNotebook_result_fields iprot record{f_ExpungeNotebook_result_success=Just s}
        else do
          skip iprot _t317
          read_ExpungeNotebook_result_fields iprot record
      1 -> if _t317 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeNotebook_result_fields iprot record{f_ExpungeNotebook_result_userException=Just s}
        else do
          skip iprot _t317
          read_ExpungeNotebook_result_fields iprot record
      2 -> if _t317 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeNotebook_result_fields iprot record{f_ExpungeNotebook_result_systemException=Just s}
        else do
          skip iprot _t317
          read_ExpungeNotebook_result_fields iprot record
      3 -> if _t317 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeNotebook_result_fields iprot record{f_ExpungeNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t317
          read_ExpungeNotebook_result_fields iprot record
      _ -> do
        skip iprot _t317
        readFieldEnd iprot
        read_ExpungeNotebook_result_fields iprot record
read_ExpungeNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNotebook_result_fields iprot (ExpungeNotebook_result{f_ExpungeNotebook_result_success=Nothing,f_ExpungeNotebook_result_userException=Nothing,f_ExpungeNotebook_result_systemException=Nothing,f_ExpungeNotebook_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ListTags_args = ListTags_args{f_ListTags_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListTags_args oprot record = do
  writeStructBegin oprot "ListTags_args"
  case f_ListTags_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListTags_args_fields iprot record = do
  (_,_t322,_id323) <- readFieldBegin iprot
  if _t322 == T_STOP then return record else
    case _id323 of 
      1 -> if _t322 == T_STRING then do
        s <- readString iprot
        read_ListTags_args_fields iprot record{f_ListTags_args_authenticationToken=Just s}
        else do
          skip iprot _t322
          read_ListTags_args_fields iprot record
      _ -> do
        skip iprot _t322
        readFieldEnd iprot
        read_ListTags_args_fields iprot record
read_ListTags_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListTags_args_fields iprot (ListTags_args{f_ListTags_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ListTags_result = ListTags_result{f_ListTags_result_success :: Maybe [Types_Types.Tag],f_ListTags_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListTags_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ListTags_result oprot record = do
  writeStructBegin oprot "ListTags_result"
  case f_ListTags_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter326:t) = do {Types_Types.write_Tag oprot _viter326;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListTags_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListTags_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListTags_result_fields iprot record = do
  (_,_t328,_id329) <- readFieldBegin iprot
  if _t328 == T_STOP then return record else
    case _id329 of 
      0 -> if _t328 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Tag iprot);r <- f (n-1); return $ v:r}} in do {(_etype333,_size330) <- readListBegin iprot; f _size330})
        read_ListTags_result_fields iprot record{f_ListTags_result_success=Just s}
        else do
          skip iprot _t328
          read_ListTags_result_fields iprot record
      1 -> if _t328 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListTags_result_fields iprot record{f_ListTags_result_userException=Just s}
        else do
          skip iprot _t328
          read_ListTags_result_fields iprot record
      2 -> if _t328 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListTags_result_fields iprot record{f_ListTags_result_systemException=Just s}
        else do
          skip iprot _t328
          read_ListTags_result_fields iprot record
      _ -> do
        skip iprot _t328
        readFieldEnd iprot
        read_ListTags_result_fields iprot record
read_ListTags_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListTags_result_fields iprot (ListTags_result{f_ListTags_result_success=Nothing,f_ListTags_result_userException=Nothing,f_ListTags_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ListTagsByNotebook_args = ListTagsByNotebook_args{f_ListTagsByNotebook_args_authenticationToken :: Maybe String,f_ListTagsByNotebook_args_notebookGuid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListTagsByNotebook_args oprot record = do
  writeStructBegin oprot "ListTagsByNotebook_args"
  case f_ListTagsByNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ListTagsByNotebook_args_notebookGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebookGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListTagsByNotebook_args_fields iprot record = do
  (_,_t338,_id339) <- readFieldBegin iprot
  if _t338 == T_STOP then return record else
    case _id339 of 
      1 -> if _t338 == T_STRING then do
        s <- readString iprot
        read_ListTagsByNotebook_args_fields iprot record{f_ListTagsByNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t338
          read_ListTagsByNotebook_args_fields iprot record
      2 -> if _t338 == T_STRING then do
        s <- readString iprot
        read_ListTagsByNotebook_args_fields iprot record{f_ListTagsByNotebook_args_notebookGuid=Just s}
        else do
          skip iprot _t338
          read_ListTagsByNotebook_args_fields iprot record
      _ -> do
        skip iprot _t338
        readFieldEnd iprot
        read_ListTagsByNotebook_args_fields iprot record
read_ListTagsByNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListTagsByNotebook_args_fields iprot (ListTagsByNotebook_args{f_ListTagsByNotebook_args_authenticationToken=Nothing,f_ListTagsByNotebook_args_notebookGuid=Nothing})
  readStructEnd iprot
  return record
data ListTagsByNotebook_result = ListTagsByNotebook_result{f_ListTagsByNotebook_result_success :: Maybe [Types_Types.Tag],f_ListTagsByNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListTagsByNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ListTagsByNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ListTagsByNotebook_result oprot record = do
  writeStructBegin oprot "ListTagsByNotebook_result"
  case f_ListTagsByNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter342:t) = do {Types_Types.write_Tag oprot _viter342;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListTagsByNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListTagsByNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ListTagsByNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListTagsByNotebook_result_fields iprot record = do
  (_,_t344,_id345) <- readFieldBegin iprot
  if _t344 == T_STOP then return record else
    case _id345 of 
      0 -> if _t344 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Tag iprot);r <- f (n-1); return $ v:r}} in do {(_etype349,_size346) <- readListBegin iprot; f _size346})
        read_ListTagsByNotebook_result_fields iprot record{f_ListTagsByNotebook_result_success=Just s}
        else do
          skip iprot _t344
          read_ListTagsByNotebook_result_fields iprot record
      1 -> if _t344 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListTagsByNotebook_result_fields iprot record{f_ListTagsByNotebook_result_userException=Just s}
        else do
          skip iprot _t344
          read_ListTagsByNotebook_result_fields iprot record
      2 -> if _t344 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListTagsByNotebook_result_fields iprot record{f_ListTagsByNotebook_result_systemException=Just s}
        else do
          skip iprot _t344
          read_ListTagsByNotebook_result_fields iprot record
      3 -> if _t344 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ListTagsByNotebook_result_fields iprot record{f_ListTagsByNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t344
          read_ListTagsByNotebook_result_fields iprot record
      _ -> do
        skip iprot _t344
        readFieldEnd iprot
        read_ListTagsByNotebook_result_fields iprot record
read_ListTagsByNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListTagsByNotebook_result_fields iprot (ListTagsByNotebook_result{f_ListTagsByNotebook_result_success=Nothing,f_ListTagsByNotebook_result_userException=Nothing,f_ListTagsByNotebook_result_systemException=Nothing,f_ListTagsByNotebook_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetTag_args = GetTag_args{f_GetTag_args_authenticationToken :: Maybe String,f_GetTag_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetTag_args oprot record = do
  writeStructBegin oprot "GetTag_args"
  case f_GetTag_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetTag_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetTag_args_fields iprot record = do
  (_,_t354,_id355) <- readFieldBegin iprot
  if _t354 == T_STOP then return record else
    case _id355 of 
      1 -> if _t354 == T_STRING then do
        s <- readString iprot
        read_GetTag_args_fields iprot record{f_GetTag_args_authenticationToken=Just s}
        else do
          skip iprot _t354
          read_GetTag_args_fields iprot record
      2 -> if _t354 == T_STRING then do
        s <- readString iprot
        read_GetTag_args_fields iprot record{f_GetTag_args_guid=Just s}
        else do
          skip iprot _t354
          read_GetTag_args_fields iprot record
      _ -> do
        skip iprot _t354
        readFieldEnd iprot
        read_GetTag_args_fields iprot record
read_GetTag_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetTag_args_fields iprot (GetTag_args{f_GetTag_args_authenticationToken=Nothing,f_GetTag_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetTag_result = GetTag_result{f_GetTag_result_success :: Maybe Types_Types.Tag,f_GetTag_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetTag_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetTag_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetTag_result oprot record = do
  writeStructBegin oprot "GetTag_result"
  case f_GetTag_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Tag oprot _v
    writeFieldEnd oprot}
  case f_GetTag_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetTag_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetTag_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetTag_result_fields iprot record = do
  (_,_t359,_id360) <- readFieldBegin iprot
  if _t359 == T_STOP then return record else
    case _id360 of 
      0 -> if _t359 == T_STRUCT then do
        s <- (read_Tag iprot)
        read_GetTag_result_fields iprot record{f_GetTag_result_success=Just s}
        else do
          skip iprot _t359
          read_GetTag_result_fields iprot record
      1 -> if _t359 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetTag_result_fields iprot record{f_GetTag_result_userException=Just s}
        else do
          skip iprot _t359
          read_GetTag_result_fields iprot record
      2 -> if _t359 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetTag_result_fields iprot record{f_GetTag_result_systemException=Just s}
        else do
          skip iprot _t359
          read_GetTag_result_fields iprot record
      3 -> if _t359 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetTag_result_fields iprot record{f_GetTag_result_notFoundException=Just s}
        else do
          skip iprot _t359
          read_GetTag_result_fields iprot record
      _ -> do
        skip iprot _t359
        readFieldEnd iprot
        read_GetTag_result_fields iprot record
read_GetTag_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetTag_result_fields iprot (GetTag_result{f_GetTag_result_success=Nothing,f_GetTag_result_userException=Nothing,f_GetTag_result_systemException=Nothing,f_GetTag_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data CreateTag_args = CreateTag_args{f_CreateTag_args_authenticationToken :: Maybe String,f_CreateTag_args_tag :: Maybe Types_Types.Tag} deriving (Show,Eq,Ord,Typeable)
write_CreateTag_args oprot record = do
  writeStructBegin oprot "CreateTag_args"
  case f_CreateTag_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateTag_args_tag record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tag",T_STRUCT,2)
    Types_Types.write_Tag oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateTag_args_fields iprot record = do
  (_,_t364,_id365) <- readFieldBegin iprot
  if _t364 == T_STOP then return record else
    case _id365 of 
      1 -> if _t364 == T_STRING then do
        s <- readString iprot
        read_CreateTag_args_fields iprot record{f_CreateTag_args_authenticationToken=Just s}
        else do
          skip iprot _t364
          read_CreateTag_args_fields iprot record
      2 -> if _t364 == T_STRUCT then do
        s <- (read_Tag iprot)
        read_CreateTag_args_fields iprot record{f_CreateTag_args_tag=Just s}
        else do
          skip iprot _t364
          read_CreateTag_args_fields iprot record
      _ -> do
        skip iprot _t364
        readFieldEnd iprot
        read_CreateTag_args_fields iprot record
read_CreateTag_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateTag_args_fields iprot (CreateTag_args{f_CreateTag_args_authenticationToken=Nothing,f_CreateTag_args_tag=Nothing})
  readStructEnd iprot
  return record
data CreateTag_result = CreateTag_result{f_CreateTag_result_success :: Maybe Types_Types.Tag,f_CreateTag_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateTag_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_CreateTag_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_CreateTag_result oprot record = do
  writeStructBegin oprot "CreateTag_result"
  case f_CreateTag_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Tag oprot _v
    writeFieldEnd oprot}
  case f_CreateTag_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateTag_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_CreateTag_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateTag_result_fields iprot record = do
  (_,_t369,_id370) <- readFieldBegin iprot
  if _t369 == T_STOP then return record else
    case _id370 of 
      0 -> if _t369 == T_STRUCT then do
        s <- (read_Tag iprot)
        read_CreateTag_result_fields iprot record{f_CreateTag_result_success=Just s}
        else do
          skip iprot _t369
          read_CreateTag_result_fields iprot record
      1 -> if _t369 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateTag_result_fields iprot record{f_CreateTag_result_userException=Just s}
        else do
          skip iprot _t369
          read_CreateTag_result_fields iprot record
      2 -> if _t369 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateTag_result_fields iprot record{f_CreateTag_result_systemException=Just s}
        else do
          skip iprot _t369
          read_CreateTag_result_fields iprot record
      3 -> if _t369 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_CreateTag_result_fields iprot record{f_CreateTag_result_notFoundException=Just s}
        else do
          skip iprot _t369
          read_CreateTag_result_fields iprot record
      _ -> do
        skip iprot _t369
        readFieldEnd iprot
        read_CreateTag_result_fields iprot record
read_CreateTag_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateTag_result_fields iprot (CreateTag_result{f_CreateTag_result_success=Nothing,f_CreateTag_result_userException=Nothing,f_CreateTag_result_systemException=Nothing,f_CreateTag_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data UpdateTag_args = UpdateTag_args{f_UpdateTag_args_authenticationToken :: Maybe String,f_UpdateTag_args_tag :: Maybe Types_Types.Tag} deriving (Show,Eq,Ord,Typeable)
write_UpdateTag_args oprot record = do
  writeStructBegin oprot "UpdateTag_args"
  case f_UpdateTag_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateTag_args_tag record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tag",T_STRUCT,2)
    Types_Types.write_Tag oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateTag_args_fields iprot record = do
  (_,_t374,_id375) <- readFieldBegin iprot
  if _t374 == T_STOP then return record else
    case _id375 of 
      1 -> if _t374 == T_STRING then do
        s <- readString iprot
        read_UpdateTag_args_fields iprot record{f_UpdateTag_args_authenticationToken=Just s}
        else do
          skip iprot _t374
          read_UpdateTag_args_fields iprot record
      2 -> if _t374 == T_STRUCT then do
        s <- (read_Tag iprot)
        read_UpdateTag_args_fields iprot record{f_UpdateTag_args_tag=Just s}
        else do
          skip iprot _t374
          read_UpdateTag_args_fields iprot record
      _ -> do
        skip iprot _t374
        readFieldEnd iprot
        read_UpdateTag_args_fields iprot record
read_UpdateTag_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateTag_args_fields iprot (UpdateTag_args{f_UpdateTag_args_authenticationToken=Nothing,f_UpdateTag_args_tag=Nothing})
  readStructEnd iprot
  return record
data UpdateTag_result = UpdateTag_result{f_UpdateTag_result_success :: Maybe Int32,f_UpdateTag_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateTag_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UpdateTag_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UpdateTag_result oprot record = do
  writeStructBegin oprot "UpdateTag_result"
  case f_UpdateTag_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UpdateTag_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateTag_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UpdateTag_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateTag_result_fields iprot record = do
  (_,_t379,_id380) <- readFieldBegin iprot
  if _t379 == T_STOP then return record else
    case _id380 of 
      0 -> if _t379 == T_I32 then do
        s <- readI32 iprot
        read_UpdateTag_result_fields iprot record{f_UpdateTag_result_success=Just s}
        else do
          skip iprot _t379
          read_UpdateTag_result_fields iprot record
      1 -> if _t379 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateTag_result_fields iprot record{f_UpdateTag_result_userException=Just s}
        else do
          skip iprot _t379
          read_UpdateTag_result_fields iprot record
      2 -> if _t379 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateTag_result_fields iprot record{f_UpdateTag_result_systemException=Just s}
        else do
          skip iprot _t379
          read_UpdateTag_result_fields iprot record
      3 -> if _t379 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateTag_result_fields iprot record{f_UpdateTag_result_notFoundException=Just s}
        else do
          skip iprot _t379
          read_UpdateTag_result_fields iprot record
      _ -> do
        skip iprot _t379
        readFieldEnd iprot
        read_UpdateTag_result_fields iprot record
read_UpdateTag_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateTag_result_fields iprot (UpdateTag_result{f_UpdateTag_result_success=Nothing,f_UpdateTag_result_userException=Nothing,f_UpdateTag_result_systemException=Nothing,f_UpdateTag_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data UntagAll_args = UntagAll_args{f_UntagAll_args_authenticationToken :: Maybe String,f_UntagAll_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_UntagAll_args oprot record = do
  writeStructBegin oprot "UntagAll_args"
  case f_UntagAll_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UntagAll_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UntagAll_args_fields iprot record = do
  (_,_t384,_id385) <- readFieldBegin iprot
  if _t384 == T_STOP then return record else
    case _id385 of 
      1 -> if _t384 == T_STRING then do
        s <- readString iprot
        read_UntagAll_args_fields iprot record{f_UntagAll_args_authenticationToken=Just s}
        else do
          skip iprot _t384
          read_UntagAll_args_fields iprot record
      2 -> if _t384 == T_STRING then do
        s <- readString iprot
        read_UntagAll_args_fields iprot record{f_UntagAll_args_guid=Just s}
        else do
          skip iprot _t384
          read_UntagAll_args_fields iprot record
      _ -> do
        skip iprot _t384
        readFieldEnd iprot
        read_UntagAll_args_fields iprot record
read_UntagAll_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UntagAll_args_fields iprot (UntagAll_args{f_UntagAll_args_authenticationToken=Nothing,f_UntagAll_args_guid=Nothing})
  readStructEnd iprot
  return record
data UntagAll_result = UntagAll_result{f_UntagAll_result_userException :: Maybe Errors_Types.EDAMUserException,f_UntagAll_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UntagAll_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UntagAll_result oprot record = do
  writeStructBegin oprot "UntagAll_result"
  case f_UntagAll_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UntagAll_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UntagAll_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UntagAll_result_fields iprot record = do
  (_,_t389,_id390) <- readFieldBegin iprot
  if _t389 == T_STOP then return record else
    case _id390 of 
      1 -> if _t389 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UntagAll_result_fields iprot record{f_UntagAll_result_userException=Just s}
        else do
          skip iprot _t389
          read_UntagAll_result_fields iprot record
      2 -> if _t389 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UntagAll_result_fields iprot record{f_UntagAll_result_systemException=Just s}
        else do
          skip iprot _t389
          read_UntagAll_result_fields iprot record
      3 -> if _t389 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UntagAll_result_fields iprot record{f_UntagAll_result_notFoundException=Just s}
        else do
          skip iprot _t389
          read_UntagAll_result_fields iprot record
      _ -> do
        skip iprot _t389
        readFieldEnd iprot
        read_UntagAll_result_fields iprot record
read_UntagAll_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UntagAll_result_fields iprot (UntagAll_result{f_UntagAll_result_userException=Nothing,f_UntagAll_result_systemException=Nothing,f_UntagAll_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeTag_args = ExpungeTag_args{f_ExpungeTag_args_authenticationToken :: Maybe String,f_ExpungeTag_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeTag_args oprot record = do
  writeStructBegin oprot "ExpungeTag_args"
  case f_ExpungeTag_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeTag_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeTag_args_fields iprot record = do
  (_,_t394,_id395) <- readFieldBegin iprot
  if _t394 == T_STOP then return record else
    case _id395 of 
      1 -> if _t394 == T_STRING then do
        s <- readString iprot
        read_ExpungeTag_args_fields iprot record{f_ExpungeTag_args_authenticationToken=Just s}
        else do
          skip iprot _t394
          read_ExpungeTag_args_fields iprot record
      2 -> if _t394 == T_STRING then do
        s <- readString iprot
        read_ExpungeTag_args_fields iprot record{f_ExpungeTag_args_guid=Just s}
        else do
          skip iprot _t394
          read_ExpungeTag_args_fields iprot record
      _ -> do
        skip iprot _t394
        readFieldEnd iprot
        read_ExpungeTag_args_fields iprot record
read_ExpungeTag_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeTag_args_fields iprot (ExpungeTag_args{f_ExpungeTag_args_authenticationToken=Nothing,f_ExpungeTag_args_guid=Nothing})
  readStructEnd iprot
  return record
data ExpungeTag_result = ExpungeTag_result{f_ExpungeTag_result_success :: Maybe Int32,f_ExpungeTag_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeTag_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ExpungeTag_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeTag_result oprot record = do
  writeStructBegin oprot "ExpungeTag_result"
  case f_ExpungeTag_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeTag_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeTag_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeTag_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeTag_result_fields iprot record = do
  (_,_t399,_id400) <- readFieldBegin iprot
  if _t399 == T_STOP then return record else
    case _id400 of 
      0 -> if _t399 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeTag_result_fields iprot record{f_ExpungeTag_result_success=Just s}
        else do
          skip iprot _t399
          read_ExpungeTag_result_fields iprot record
      1 -> if _t399 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeTag_result_fields iprot record{f_ExpungeTag_result_userException=Just s}
        else do
          skip iprot _t399
          read_ExpungeTag_result_fields iprot record
      2 -> if _t399 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeTag_result_fields iprot record{f_ExpungeTag_result_systemException=Just s}
        else do
          skip iprot _t399
          read_ExpungeTag_result_fields iprot record
      3 -> if _t399 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeTag_result_fields iprot record{f_ExpungeTag_result_notFoundException=Just s}
        else do
          skip iprot _t399
          read_ExpungeTag_result_fields iprot record
      _ -> do
        skip iprot _t399
        readFieldEnd iprot
        read_ExpungeTag_result_fields iprot record
read_ExpungeTag_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeTag_result_fields iprot (ExpungeTag_result{f_ExpungeTag_result_success=Nothing,f_ExpungeTag_result_userException=Nothing,f_ExpungeTag_result_systemException=Nothing,f_ExpungeTag_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ListSearches_args = ListSearches_args{f_ListSearches_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListSearches_args oprot record = do
  writeStructBegin oprot "ListSearches_args"
  case f_ListSearches_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListSearches_args_fields iprot record = do
  (_,_t404,_id405) <- readFieldBegin iprot
  if _t404 == T_STOP then return record else
    case _id405 of 
      1 -> if _t404 == T_STRING then do
        s <- readString iprot
        read_ListSearches_args_fields iprot record{f_ListSearches_args_authenticationToken=Just s}
        else do
          skip iprot _t404
          read_ListSearches_args_fields iprot record
      _ -> do
        skip iprot _t404
        readFieldEnd iprot
        read_ListSearches_args_fields iprot record
read_ListSearches_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListSearches_args_fields iprot (ListSearches_args{f_ListSearches_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ListSearches_result = ListSearches_result{f_ListSearches_result_success :: Maybe [Types_Types.SavedSearch],f_ListSearches_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListSearches_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ListSearches_result oprot record = do
  writeStructBegin oprot "ListSearches_result"
  case f_ListSearches_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter408:t) = do {Types_Types.write_SavedSearch oprot _viter408;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListSearches_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListSearches_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListSearches_result_fields iprot record = do
  (_,_t410,_id411) <- readFieldBegin iprot
  if _t410 == T_STOP then return record else
    case _id411 of 
      0 -> if _t410 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_SavedSearch iprot);r <- f (n-1); return $ v:r}} in do {(_etype415,_size412) <- readListBegin iprot; f _size412})
        read_ListSearches_result_fields iprot record{f_ListSearches_result_success=Just s}
        else do
          skip iprot _t410
          read_ListSearches_result_fields iprot record
      1 -> if _t410 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListSearches_result_fields iprot record{f_ListSearches_result_userException=Just s}
        else do
          skip iprot _t410
          read_ListSearches_result_fields iprot record
      2 -> if _t410 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListSearches_result_fields iprot record{f_ListSearches_result_systemException=Just s}
        else do
          skip iprot _t410
          read_ListSearches_result_fields iprot record
      _ -> do
        skip iprot _t410
        readFieldEnd iprot
        read_ListSearches_result_fields iprot record
read_ListSearches_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListSearches_result_fields iprot (ListSearches_result{f_ListSearches_result_success=Nothing,f_ListSearches_result_userException=Nothing,f_ListSearches_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetSearch_args = GetSearch_args{f_GetSearch_args_authenticationToken :: Maybe String,f_GetSearch_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetSearch_args oprot record = do
  writeStructBegin oprot "GetSearch_args"
  case f_GetSearch_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetSearch_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSearch_args_fields iprot record = do
  (_,_t420,_id421) <- readFieldBegin iprot
  if _t420 == T_STOP then return record else
    case _id421 of 
      1 -> if _t420 == T_STRING then do
        s <- readString iprot
        read_GetSearch_args_fields iprot record{f_GetSearch_args_authenticationToken=Just s}
        else do
          skip iprot _t420
          read_GetSearch_args_fields iprot record
      2 -> if _t420 == T_STRING then do
        s <- readString iprot
        read_GetSearch_args_fields iprot record{f_GetSearch_args_guid=Just s}
        else do
          skip iprot _t420
          read_GetSearch_args_fields iprot record
      _ -> do
        skip iprot _t420
        readFieldEnd iprot
        read_GetSearch_args_fields iprot record
read_GetSearch_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSearch_args_fields iprot (GetSearch_args{f_GetSearch_args_authenticationToken=Nothing,f_GetSearch_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetSearch_result = GetSearch_result{f_GetSearch_result_success :: Maybe Types_Types.SavedSearch,f_GetSearch_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetSearch_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetSearch_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetSearch_result oprot record = do
  writeStructBegin oprot "GetSearch_result"
  case f_GetSearch_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_SavedSearch oprot _v
    writeFieldEnd oprot}
  case f_GetSearch_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetSearch_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetSearch_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSearch_result_fields iprot record = do
  (_,_t425,_id426) <- readFieldBegin iprot
  if _t425 == T_STOP then return record else
    case _id426 of 
      0 -> if _t425 == T_STRUCT then do
        s <- (read_SavedSearch iprot)
        read_GetSearch_result_fields iprot record{f_GetSearch_result_success=Just s}
        else do
          skip iprot _t425
          read_GetSearch_result_fields iprot record
      1 -> if _t425 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetSearch_result_fields iprot record{f_GetSearch_result_userException=Just s}
        else do
          skip iprot _t425
          read_GetSearch_result_fields iprot record
      2 -> if _t425 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetSearch_result_fields iprot record{f_GetSearch_result_systemException=Just s}
        else do
          skip iprot _t425
          read_GetSearch_result_fields iprot record
      3 -> if _t425 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetSearch_result_fields iprot record{f_GetSearch_result_notFoundException=Just s}
        else do
          skip iprot _t425
          read_GetSearch_result_fields iprot record
      _ -> do
        skip iprot _t425
        readFieldEnd iprot
        read_GetSearch_result_fields iprot record
read_GetSearch_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSearch_result_fields iprot (GetSearch_result{f_GetSearch_result_success=Nothing,f_GetSearch_result_userException=Nothing,f_GetSearch_result_systemException=Nothing,f_GetSearch_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data CreateSearch_args = CreateSearch_args{f_CreateSearch_args_authenticationToken :: Maybe String,f_CreateSearch_args_search :: Maybe Types_Types.SavedSearch} deriving (Show,Eq,Ord,Typeable)
write_CreateSearch_args oprot record = do
  writeStructBegin oprot "CreateSearch_args"
  case f_CreateSearch_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateSearch_args_search record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("search",T_STRUCT,2)
    Types_Types.write_SavedSearch oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateSearch_args_fields iprot record = do
  (_,_t430,_id431) <- readFieldBegin iprot
  if _t430 == T_STOP then return record else
    case _id431 of 
      1 -> if _t430 == T_STRING then do
        s <- readString iprot
        read_CreateSearch_args_fields iprot record{f_CreateSearch_args_authenticationToken=Just s}
        else do
          skip iprot _t430
          read_CreateSearch_args_fields iprot record
      2 -> if _t430 == T_STRUCT then do
        s <- (read_SavedSearch iprot)
        read_CreateSearch_args_fields iprot record{f_CreateSearch_args_search=Just s}
        else do
          skip iprot _t430
          read_CreateSearch_args_fields iprot record
      _ -> do
        skip iprot _t430
        readFieldEnd iprot
        read_CreateSearch_args_fields iprot record
read_CreateSearch_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateSearch_args_fields iprot (CreateSearch_args{f_CreateSearch_args_authenticationToken=Nothing,f_CreateSearch_args_search=Nothing})
  readStructEnd iprot
  return record
data CreateSearch_result = CreateSearch_result{f_CreateSearch_result_success :: Maybe Types_Types.SavedSearch,f_CreateSearch_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateSearch_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_CreateSearch_result oprot record = do
  writeStructBegin oprot "CreateSearch_result"
  case f_CreateSearch_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_SavedSearch oprot _v
    writeFieldEnd oprot}
  case f_CreateSearch_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateSearch_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateSearch_result_fields iprot record = do
  (_,_t435,_id436) <- readFieldBegin iprot
  if _t435 == T_STOP then return record else
    case _id436 of 
      0 -> if _t435 == T_STRUCT then do
        s <- (read_SavedSearch iprot)
        read_CreateSearch_result_fields iprot record{f_CreateSearch_result_success=Just s}
        else do
          skip iprot _t435
          read_CreateSearch_result_fields iprot record
      1 -> if _t435 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateSearch_result_fields iprot record{f_CreateSearch_result_userException=Just s}
        else do
          skip iprot _t435
          read_CreateSearch_result_fields iprot record
      2 -> if _t435 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateSearch_result_fields iprot record{f_CreateSearch_result_systemException=Just s}
        else do
          skip iprot _t435
          read_CreateSearch_result_fields iprot record
      _ -> do
        skip iprot _t435
        readFieldEnd iprot
        read_CreateSearch_result_fields iprot record
read_CreateSearch_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateSearch_result_fields iprot (CreateSearch_result{f_CreateSearch_result_success=Nothing,f_CreateSearch_result_userException=Nothing,f_CreateSearch_result_systemException=Nothing})
  readStructEnd iprot
  return record
data UpdateSearch_args = UpdateSearch_args{f_UpdateSearch_args_authenticationToken :: Maybe String,f_UpdateSearch_args_search :: Maybe Types_Types.SavedSearch} deriving (Show,Eq,Ord,Typeable)
write_UpdateSearch_args oprot record = do
  writeStructBegin oprot "UpdateSearch_args"
  case f_UpdateSearch_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateSearch_args_search record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("search",T_STRUCT,2)
    Types_Types.write_SavedSearch oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateSearch_args_fields iprot record = do
  (_,_t440,_id441) <- readFieldBegin iprot
  if _t440 == T_STOP then return record else
    case _id441 of 
      1 -> if _t440 == T_STRING then do
        s <- readString iprot
        read_UpdateSearch_args_fields iprot record{f_UpdateSearch_args_authenticationToken=Just s}
        else do
          skip iprot _t440
          read_UpdateSearch_args_fields iprot record
      2 -> if _t440 == T_STRUCT then do
        s <- (read_SavedSearch iprot)
        read_UpdateSearch_args_fields iprot record{f_UpdateSearch_args_search=Just s}
        else do
          skip iprot _t440
          read_UpdateSearch_args_fields iprot record
      _ -> do
        skip iprot _t440
        readFieldEnd iprot
        read_UpdateSearch_args_fields iprot record
read_UpdateSearch_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateSearch_args_fields iprot (UpdateSearch_args{f_UpdateSearch_args_authenticationToken=Nothing,f_UpdateSearch_args_search=Nothing})
  readStructEnd iprot
  return record
data UpdateSearch_result = UpdateSearch_result{f_UpdateSearch_result_success :: Maybe Int32,f_UpdateSearch_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateSearch_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UpdateSearch_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UpdateSearch_result oprot record = do
  writeStructBegin oprot "UpdateSearch_result"
  case f_UpdateSearch_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UpdateSearch_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateSearch_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UpdateSearch_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateSearch_result_fields iprot record = do
  (_,_t445,_id446) <- readFieldBegin iprot
  if _t445 == T_STOP then return record else
    case _id446 of 
      0 -> if _t445 == T_I32 then do
        s <- readI32 iprot
        read_UpdateSearch_result_fields iprot record{f_UpdateSearch_result_success=Just s}
        else do
          skip iprot _t445
          read_UpdateSearch_result_fields iprot record
      1 -> if _t445 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateSearch_result_fields iprot record{f_UpdateSearch_result_userException=Just s}
        else do
          skip iprot _t445
          read_UpdateSearch_result_fields iprot record
      2 -> if _t445 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateSearch_result_fields iprot record{f_UpdateSearch_result_systemException=Just s}
        else do
          skip iprot _t445
          read_UpdateSearch_result_fields iprot record
      3 -> if _t445 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateSearch_result_fields iprot record{f_UpdateSearch_result_notFoundException=Just s}
        else do
          skip iprot _t445
          read_UpdateSearch_result_fields iprot record
      _ -> do
        skip iprot _t445
        readFieldEnd iprot
        read_UpdateSearch_result_fields iprot record
read_UpdateSearch_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateSearch_result_fields iprot (UpdateSearch_result{f_UpdateSearch_result_success=Nothing,f_UpdateSearch_result_userException=Nothing,f_UpdateSearch_result_systemException=Nothing,f_UpdateSearch_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeSearch_args = ExpungeSearch_args{f_ExpungeSearch_args_authenticationToken :: Maybe String,f_ExpungeSearch_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeSearch_args oprot record = do
  writeStructBegin oprot "ExpungeSearch_args"
  case f_ExpungeSearch_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSearch_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeSearch_args_fields iprot record = do
  (_,_t450,_id451) <- readFieldBegin iprot
  if _t450 == T_STOP then return record else
    case _id451 of 
      1 -> if _t450 == T_STRING then do
        s <- readString iprot
        read_ExpungeSearch_args_fields iprot record{f_ExpungeSearch_args_authenticationToken=Just s}
        else do
          skip iprot _t450
          read_ExpungeSearch_args_fields iprot record
      2 -> if _t450 == T_STRING then do
        s <- readString iprot
        read_ExpungeSearch_args_fields iprot record{f_ExpungeSearch_args_guid=Just s}
        else do
          skip iprot _t450
          read_ExpungeSearch_args_fields iprot record
      _ -> do
        skip iprot _t450
        readFieldEnd iprot
        read_ExpungeSearch_args_fields iprot record
read_ExpungeSearch_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeSearch_args_fields iprot (ExpungeSearch_args{f_ExpungeSearch_args_authenticationToken=Nothing,f_ExpungeSearch_args_guid=Nothing})
  readStructEnd iprot
  return record
data ExpungeSearch_result = ExpungeSearch_result{f_ExpungeSearch_result_success :: Maybe Int32,f_ExpungeSearch_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeSearch_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ExpungeSearch_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeSearch_result oprot record = do
  writeStructBegin oprot "ExpungeSearch_result"
  case f_ExpungeSearch_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSearch_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSearch_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSearch_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeSearch_result_fields iprot record = do
  (_,_t455,_id456) <- readFieldBegin iprot
  if _t455 == T_STOP then return record else
    case _id456 of 
      0 -> if _t455 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeSearch_result_fields iprot record{f_ExpungeSearch_result_success=Just s}
        else do
          skip iprot _t455
          read_ExpungeSearch_result_fields iprot record
      1 -> if _t455 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeSearch_result_fields iprot record{f_ExpungeSearch_result_userException=Just s}
        else do
          skip iprot _t455
          read_ExpungeSearch_result_fields iprot record
      2 -> if _t455 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeSearch_result_fields iprot record{f_ExpungeSearch_result_systemException=Just s}
        else do
          skip iprot _t455
          read_ExpungeSearch_result_fields iprot record
      3 -> if _t455 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeSearch_result_fields iprot record{f_ExpungeSearch_result_notFoundException=Just s}
        else do
          skip iprot _t455
          read_ExpungeSearch_result_fields iprot record
      _ -> do
        skip iprot _t455
        readFieldEnd iprot
        read_ExpungeSearch_result_fields iprot record
read_ExpungeSearch_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeSearch_result_fields iprot (ExpungeSearch_result{f_ExpungeSearch_result_success=Nothing,f_ExpungeSearch_result_userException=Nothing,f_ExpungeSearch_result_systemException=Nothing,f_ExpungeSearch_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data FindNotes_args = FindNotes_args{f_FindNotes_args_authenticationToken :: Maybe String,f_FindNotes_args_filter :: Maybe NoteFilter,f_FindNotes_args_offset :: Maybe Int32,f_FindNotes_args_maxNotes :: Maybe Int32} deriving (Show,Eq,Ord,Typeable)
write_FindNotes_args oprot record = do
  writeStructBegin oprot "FindNotes_args"
  case f_FindNotes_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_args_filter record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("filter",T_STRUCT,2)
    write_NoteFilter oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_args_offset record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("offset",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_args_maxNotes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxNotes",T_I32,4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNotes_args_fields iprot record = do
  (_,_t460,_id461) <- readFieldBegin iprot
  if _t460 == T_STOP then return record else
    case _id461 of 
      1 -> if _t460 == T_STRING then do
        s <- readString iprot
        read_FindNotes_args_fields iprot record{f_FindNotes_args_authenticationToken=Just s}
        else do
          skip iprot _t460
          read_FindNotes_args_fields iprot record
      2 -> if _t460 == T_STRUCT then do
        s <- (read_NoteFilter iprot)
        read_FindNotes_args_fields iprot record{f_FindNotes_args_filter=Just s}
        else do
          skip iprot _t460
          read_FindNotes_args_fields iprot record
      3 -> if _t460 == T_I32 then do
        s <- readI32 iprot
        read_FindNotes_args_fields iprot record{f_FindNotes_args_offset=Just s}
        else do
          skip iprot _t460
          read_FindNotes_args_fields iprot record
      4 -> if _t460 == T_I32 then do
        s <- readI32 iprot
        read_FindNotes_args_fields iprot record{f_FindNotes_args_maxNotes=Just s}
        else do
          skip iprot _t460
          read_FindNotes_args_fields iprot record
      _ -> do
        skip iprot _t460
        readFieldEnd iprot
        read_FindNotes_args_fields iprot record
read_FindNotes_args iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNotes_args_fields iprot (FindNotes_args{f_FindNotes_args_authenticationToken=Nothing,f_FindNotes_args_filter=Nothing,f_FindNotes_args_offset=Nothing,f_FindNotes_args_maxNotes=Nothing})
  readStructEnd iprot
  return record
data FindNotes_result = FindNotes_result{f_FindNotes_result_success :: Maybe NoteList,f_FindNotes_result_userException :: Maybe Errors_Types.EDAMUserException,f_FindNotes_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_FindNotes_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_FindNotes_result oprot record = do
  writeStructBegin oprot "FindNotes_result"
  case f_FindNotes_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_NoteList oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_FindNotes_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNotes_result_fields iprot record = do
  (_,_t465,_id466) <- readFieldBegin iprot
  if _t465 == T_STOP then return record else
    case _id466 of 
      0 -> if _t465 == T_STRUCT then do
        s <- (read_NoteList iprot)
        read_FindNotes_result_fields iprot record{f_FindNotes_result_success=Just s}
        else do
          skip iprot _t465
          read_FindNotes_result_fields iprot record
      1 -> if _t465 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_FindNotes_result_fields iprot record{f_FindNotes_result_userException=Just s}
        else do
          skip iprot _t465
          read_FindNotes_result_fields iprot record
      2 -> if _t465 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_FindNotes_result_fields iprot record{f_FindNotes_result_systemException=Just s}
        else do
          skip iprot _t465
          read_FindNotes_result_fields iprot record
      3 -> if _t465 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_FindNotes_result_fields iprot record{f_FindNotes_result_notFoundException=Just s}
        else do
          skip iprot _t465
          read_FindNotes_result_fields iprot record
      _ -> do
        skip iprot _t465
        readFieldEnd iprot
        read_FindNotes_result_fields iprot record
read_FindNotes_result iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNotes_result_fields iprot (FindNotes_result{f_FindNotes_result_success=Nothing,f_FindNotes_result_userException=Nothing,f_FindNotes_result_systemException=Nothing,f_FindNotes_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data FindNoteOffset_args = FindNoteOffset_args{f_FindNoteOffset_args_authenticationToken :: Maybe String,f_FindNoteOffset_args_filter :: Maybe NoteFilter,f_FindNoteOffset_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_FindNoteOffset_args oprot record = do
  writeStructBegin oprot "FindNoteOffset_args"
  case f_FindNoteOffset_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_FindNoteOffset_args_filter record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("filter",T_STRUCT,2)
    write_NoteFilter oprot _v
    writeFieldEnd oprot}
  case f_FindNoteOffset_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNoteOffset_args_fields iprot record = do
  (_,_t470,_id471) <- readFieldBegin iprot
  if _t470 == T_STOP then return record else
    case _id471 of 
      1 -> if _t470 == T_STRING then do
        s <- readString iprot
        read_FindNoteOffset_args_fields iprot record{f_FindNoteOffset_args_authenticationToken=Just s}
        else do
          skip iprot _t470
          read_FindNoteOffset_args_fields iprot record
      2 -> if _t470 == T_STRUCT then do
        s <- (read_NoteFilter iprot)
        read_FindNoteOffset_args_fields iprot record{f_FindNoteOffset_args_filter=Just s}
        else do
          skip iprot _t470
          read_FindNoteOffset_args_fields iprot record
      3 -> if _t470 == T_STRING then do
        s <- readString iprot
        read_FindNoteOffset_args_fields iprot record{f_FindNoteOffset_args_guid=Just s}
        else do
          skip iprot _t470
          read_FindNoteOffset_args_fields iprot record
      _ -> do
        skip iprot _t470
        readFieldEnd iprot
        read_FindNoteOffset_args_fields iprot record
read_FindNoteOffset_args iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNoteOffset_args_fields iprot (FindNoteOffset_args{f_FindNoteOffset_args_authenticationToken=Nothing,f_FindNoteOffset_args_filter=Nothing,f_FindNoteOffset_args_guid=Nothing})
  readStructEnd iprot
  return record
data FindNoteOffset_result = FindNoteOffset_result{f_FindNoteOffset_result_success :: Maybe Int32,f_FindNoteOffset_result_userException :: Maybe Errors_Types.EDAMUserException,f_FindNoteOffset_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_FindNoteOffset_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_FindNoteOffset_result oprot record = do
  writeStructBegin oprot "FindNoteOffset_result"
  case f_FindNoteOffset_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_FindNoteOffset_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_FindNoteOffset_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_FindNoteOffset_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNoteOffset_result_fields iprot record = do
  (_,_t475,_id476) <- readFieldBegin iprot
  if _t475 == T_STOP then return record else
    case _id476 of 
      0 -> if _t475 == T_I32 then do
        s <- readI32 iprot
        read_FindNoteOffset_result_fields iprot record{f_FindNoteOffset_result_success=Just s}
        else do
          skip iprot _t475
          read_FindNoteOffset_result_fields iprot record
      1 -> if _t475 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_FindNoteOffset_result_fields iprot record{f_FindNoteOffset_result_userException=Just s}
        else do
          skip iprot _t475
          read_FindNoteOffset_result_fields iprot record
      2 -> if _t475 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_FindNoteOffset_result_fields iprot record{f_FindNoteOffset_result_systemException=Just s}
        else do
          skip iprot _t475
          read_FindNoteOffset_result_fields iprot record
      3 -> if _t475 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_FindNoteOffset_result_fields iprot record{f_FindNoteOffset_result_notFoundException=Just s}
        else do
          skip iprot _t475
          read_FindNoteOffset_result_fields iprot record
      _ -> do
        skip iprot _t475
        readFieldEnd iprot
        read_FindNoteOffset_result_fields iprot record
read_FindNoteOffset_result iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNoteOffset_result_fields iprot (FindNoteOffset_result{f_FindNoteOffset_result_success=Nothing,f_FindNoteOffset_result_userException=Nothing,f_FindNoteOffset_result_systemException=Nothing,f_FindNoteOffset_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data FindNotesMetadata_args = FindNotesMetadata_args{f_FindNotesMetadata_args_authenticationToken :: Maybe String,f_FindNotesMetadata_args_filter :: Maybe NoteFilter,f_FindNotesMetadata_args_offset :: Maybe Int32,f_FindNotesMetadata_args_maxNotes :: Maybe Int32,f_FindNotesMetadata_args_resultSpec :: Maybe NotesMetadataResultSpec} deriving (Show,Eq,Ord,Typeable)
write_FindNotesMetadata_args oprot record = do
  writeStructBegin oprot "FindNotesMetadata_args"
  case f_FindNotesMetadata_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_args_filter record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("filter",T_STRUCT,2)
    write_NoteFilter oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_args_offset record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("offset",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_args_maxNotes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxNotes",T_I32,4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_args_resultSpec record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("resultSpec",T_STRUCT,5)
    write_NotesMetadataResultSpec oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNotesMetadata_args_fields iprot record = do
  (_,_t480,_id481) <- readFieldBegin iprot
  if _t480 == T_STOP then return record else
    case _id481 of 
      1 -> if _t480 == T_STRING then do
        s <- readString iprot
        read_FindNotesMetadata_args_fields iprot record{f_FindNotesMetadata_args_authenticationToken=Just s}
        else do
          skip iprot _t480
          read_FindNotesMetadata_args_fields iprot record
      2 -> if _t480 == T_STRUCT then do
        s <- (read_NoteFilter iprot)
        read_FindNotesMetadata_args_fields iprot record{f_FindNotesMetadata_args_filter=Just s}
        else do
          skip iprot _t480
          read_FindNotesMetadata_args_fields iprot record
      3 -> if _t480 == T_I32 then do
        s <- readI32 iprot
        read_FindNotesMetadata_args_fields iprot record{f_FindNotesMetadata_args_offset=Just s}
        else do
          skip iprot _t480
          read_FindNotesMetadata_args_fields iprot record
      4 -> if _t480 == T_I32 then do
        s <- readI32 iprot
        read_FindNotesMetadata_args_fields iprot record{f_FindNotesMetadata_args_maxNotes=Just s}
        else do
          skip iprot _t480
          read_FindNotesMetadata_args_fields iprot record
      5 -> if _t480 == T_STRUCT then do
        s <- (read_NotesMetadataResultSpec iprot)
        read_FindNotesMetadata_args_fields iprot record{f_FindNotesMetadata_args_resultSpec=Just s}
        else do
          skip iprot _t480
          read_FindNotesMetadata_args_fields iprot record
      _ -> do
        skip iprot _t480
        readFieldEnd iprot
        read_FindNotesMetadata_args_fields iprot record
read_FindNotesMetadata_args iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNotesMetadata_args_fields iprot (FindNotesMetadata_args{f_FindNotesMetadata_args_authenticationToken=Nothing,f_FindNotesMetadata_args_filter=Nothing,f_FindNotesMetadata_args_offset=Nothing,f_FindNotesMetadata_args_maxNotes=Nothing,f_FindNotesMetadata_args_resultSpec=Nothing})
  readStructEnd iprot
  return record
data FindNotesMetadata_result = FindNotesMetadata_result{f_FindNotesMetadata_result_success :: Maybe NotesMetadataList,f_FindNotesMetadata_result_userException :: Maybe Errors_Types.EDAMUserException,f_FindNotesMetadata_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_FindNotesMetadata_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_FindNotesMetadata_result oprot record = do
  writeStructBegin oprot "FindNotesMetadata_result"
  case f_FindNotesMetadata_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_NotesMetadataList oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_FindNotesMetadata_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNotesMetadata_result_fields iprot record = do
  (_,_t485,_id486) <- readFieldBegin iprot
  if _t485 == T_STOP then return record else
    case _id486 of 
      0 -> if _t485 == T_STRUCT then do
        s <- (read_NotesMetadataList iprot)
        read_FindNotesMetadata_result_fields iprot record{f_FindNotesMetadata_result_success=Just s}
        else do
          skip iprot _t485
          read_FindNotesMetadata_result_fields iprot record
      1 -> if _t485 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_FindNotesMetadata_result_fields iprot record{f_FindNotesMetadata_result_userException=Just s}
        else do
          skip iprot _t485
          read_FindNotesMetadata_result_fields iprot record
      2 -> if _t485 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_FindNotesMetadata_result_fields iprot record{f_FindNotesMetadata_result_systemException=Just s}
        else do
          skip iprot _t485
          read_FindNotesMetadata_result_fields iprot record
      3 -> if _t485 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_FindNotesMetadata_result_fields iprot record{f_FindNotesMetadata_result_notFoundException=Just s}
        else do
          skip iprot _t485
          read_FindNotesMetadata_result_fields iprot record
      _ -> do
        skip iprot _t485
        readFieldEnd iprot
        read_FindNotesMetadata_result_fields iprot record
read_FindNotesMetadata_result iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNotesMetadata_result_fields iprot (FindNotesMetadata_result{f_FindNotesMetadata_result_success=Nothing,f_FindNotesMetadata_result_userException=Nothing,f_FindNotesMetadata_result_systemException=Nothing,f_FindNotesMetadata_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data FindNoteCounts_args = FindNoteCounts_args{f_FindNoteCounts_args_authenticationToken :: Maybe String,f_FindNoteCounts_args_filter :: Maybe NoteFilter,f_FindNoteCounts_args_withTrash :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_FindNoteCounts_args oprot record = do
  writeStructBegin oprot "FindNoteCounts_args"
  case f_FindNoteCounts_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_FindNoteCounts_args_filter record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("filter",T_STRUCT,2)
    write_NoteFilter oprot _v
    writeFieldEnd oprot}
  case f_FindNoteCounts_args_withTrash record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withTrash",T_BOOL,3)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNoteCounts_args_fields iprot record = do
  (_,_t490,_id491) <- readFieldBegin iprot
  if _t490 == T_STOP then return record else
    case _id491 of 
      1 -> if _t490 == T_STRING then do
        s <- readString iprot
        read_FindNoteCounts_args_fields iprot record{f_FindNoteCounts_args_authenticationToken=Just s}
        else do
          skip iprot _t490
          read_FindNoteCounts_args_fields iprot record
      2 -> if _t490 == T_STRUCT then do
        s <- (read_NoteFilter iprot)
        read_FindNoteCounts_args_fields iprot record{f_FindNoteCounts_args_filter=Just s}
        else do
          skip iprot _t490
          read_FindNoteCounts_args_fields iprot record
      3 -> if _t490 == T_BOOL then do
        s <- readBool iprot
        read_FindNoteCounts_args_fields iprot record{f_FindNoteCounts_args_withTrash=Just s}
        else do
          skip iprot _t490
          read_FindNoteCounts_args_fields iprot record
      _ -> do
        skip iprot _t490
        readFieldEnd iprot
        read_FindNoteCounts_args_fields iprot record
read_FindNoteCounts_args iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNoteCounts_args_fields iprot (FindNoteCounts_args{f_FindNoteCounts_args_authenticationToken=Nothing,f_FindNoteCounts_args_filter=Nothing,f_FindNoteCounts_args_withTrash=Nothing})
  readStructEnd iprot
  return record
data FindNoteCounts_result = FindNoteCounts_result{f_FindNoteCounts_result_success :: Maybe NoteCollectionCounts,f_FindNoteCounts_result_userException :: Maybe Errors_Types.EDAMUserException,f_FindNoteCounts_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_FindNoteCounts_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_FindNoteCounts_result oprot record = do
  writeStructBegin oprot "FindNoteCounts_result"
  case f_FindNoteCounts_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_NoteCollectionCounts oprot _v
    writeFieldEnd oprot}
  case f_FindNoteCounts_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_FindNoteCounts_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_FindNoteCounts_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_FindNoteCounts_result_fields iprot record = do
  (_,_t495,_id496) <- readFieldBegin iprot
  if _t495 == T_STOP then return record else
    case _id496 of 
      0 -> if _t495 == T_STRUCT then do
        s <- (read_NoteCollectionCounts iprot)
        read_FindNoteCounts_result_fields iprot record{f_FindNoteCounts_result_success=Just s}
        else do
          skip iprot _t495
          read_FindNoteCounts_result_fields iprot record
      1 -> if _t495 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_FindNoteCounts_result_fields iprot record{f_FindNoteCounts_result_userException=Just s}
        else do
          skip iprot _t495
          read_FindNoteCounts_result_fields iprot record
      2 -> if _t495 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_FindNoteCounts_result_fields iprot record{f_FindNoteCounts_result_systemException=Just s}
        else do
          skip iprot _t495
          read_FindNoteCounts_result_fields iprot record
      3 -> if _t495 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_FindNoteCounts_result_fields iprot record{f_FindNoteCounts_result_notFoundException=Just s}
        else do
          skip iprot _t495
          read_FindNoteCounts_result_fields iprot record
      _ -> do
        skip iprot _t495
        readFieldEnd iprot
        read_FindNoteCounts_result_fields iprot record
read_FindNoteCounts_result iprot = do
  _ <- readStructBegin iprot
  record <- read_FindNoteCounts_result_fields iprot (FindNoteCounts_result{f_FindNoteCounts_result_success=Nothing,f_FindNoteCounts_result_userException=Nothing,f_FindNoteCounts_result_systemException=Nothing,f_FindNoteCounts_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetNote_args = GetNote_args{f_GetNote_args_authenticationToken :: Maybe String,f_GetNote_args_guid :: Maybe String,f_GetNote_args_withContent :: Maybe Bool,f_GetNote_args_withResourcesData :: Maybe Bool,f_GetNote_args_withResourcesRecognition :: Maybe Bool,f_GetNote_args_withResourcesAlternateData :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetNote_args oprot record = do
  writeStructBegin oprot "GetNote_args"
  case f_GetNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNote_args_withContent record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withContent",T_BOOL,3)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNote_args_withResourcesData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesData",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNote_args_withResourcesRecognition record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesRecognition",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNote_args_withResourcesAlternateData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesAlternateData",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNote_args_fields iprot record = do
  (_,_t500,_id501) <- readFieldBegin iprot
  if _t500 == T_STOP then return record else
    case _id501 of 
      1 -> if _t500 == T_STRING then do
        s <- readString iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_authenticationToken=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      2 -> if _t500 == T_STRING then do
        s <- readString iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_guid=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      3 -> if _t500 == T_BOOL then do
        s <- readBool iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_withContent=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      4 -> if _t500 == T_BOOL then do
        s <- readBool iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_withResourcesData=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      5 -> if _t500 == T_BOOL then do
        s <- readBool iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_withResourcesRecognition=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      6 -> if _t500 == T_BOOL then do
        s <- readBool iprot
        read_GetNote_args_fields iprot record{f_GetNote_args_withResourcesAlternateData=Just s}
        else do
          skip iprot _t500
          read_GetNote_args_fields iprot record
      _ -> do
        skip iprot _t500
        readFieldEnd iprot
        read_GetNote_args_fields iprot record
read_GetNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNote_args_fields iprot (GetNote_args{f_GetNote_args_authenticationToken=Nothing,f_GetNote_args_guid=Nothing,f_GetNote_args_withContent=Nothing,f_GetNote_args_withResourcesData=Nothing,f_GetNote_args_withResourcesRecognition=Nothing,f_GetNote_args_withResourcesAlternateData=Nothing})
  readStructEnd iprot
  return record
data GetNote_result = GetNote_result{f_GetNote_result_success :: Maybe Types_Types.Note,f_GetNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNote_result oprot record = do
  writeStructBegin oprot "GetNote_result"
  case f_GetNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  case f_GetNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNote_result_fields iprot record = do
  (_,_t505,_id506) <- readFieldBegin iprot
  if _t505 == T_STOP then return record else
    case _id506 of 
      0 -> if _t505 == T_STRUCT then do
        s <- (read_Note iprot)
        read_GetNote_result_fields iprot record{f_GetNote_result_success=Just s}
        else do
          skip iprot _t505
          read_GetNote_result_fields iprot record
      1 -> if _t505 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNote_result_fields iprot record{f_GetNote_result_userException=Just s}
        else do
          skip iprot _t505
          read_GetNote_result_fields iprot record
      2 -> if _t505 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNote_result_fields iprot record{f_GetNote_result_systemException=Just s}
        else do
          skip iprot _t505
          read_GetNote_result_fields iprot record
      3 -> if _t505 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNote_result_fields iprot record{f_GetNote_result_notFoundException=Just s}
        else do
          skip iprot _t505
          read_GetNote_result_fields iprot record
      _ -> do
        skip iprot _t505
        readFieldEnd iprot
        read_GetNote_result_fields iprot record
read_GetNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNote_result_fields iprot (GetNote_result{f_GetNote_result_success=Nothing,f_GetNote_result_userException=Nothing,f_GetNote_result_systemException=Nothing,f_GetNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetNoteContent_args = GetNoteContent_args{f_GetNoteContent_args_authenticationToken :: Maybe String,f_GetNoteContent_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetNoteContent_args oprot record = do
  writeStructBegin oprot "GetNoteContent_args"
  case f_GetNoteContent_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteContent_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteContent_args_fields iprot record = do
  (_,_t510,_id511) <- readFieldBegin iprot
  if _t510 == T_STOP then return record else
    case _id511 of 
      1 -> if _t510 == T_STRING then do
        s <- readString iprot
        read_GetNoteContent_args_fields iprot record{f_GetNoteContent_args_authenticationToken=Just s}
        else do
          skip iprot _t510
          read_GetNoteContent_args_fields iprot record
      2 -> if _t510 == T_STRING then do
        s <- readString iprot
        read_GetNoteContent_args_fields iprot record{f_GetNoteContent_args_guid=Just s}
        else do
          skip iprot _t510
          read_GetNoteContent_args_fields iprot record
      _ -> do
        skip iprot _t510
        readFieldEnd iprot
        read_GetNoteContent_args_fields iprot record
read_GetNoteContent_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteContent_args_fields iprot (GetNoteContent_args{f_GetNoteContent_args_authenticationToken=Nothing,f_GetNoteContent_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetNoteContent_result = GetNoteContent_result{f_GetNoteContent_result_success :: Maybe String,f_GetNoteContent_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNoteContent_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNoteContent_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNoteContent_result oprot record = do
  writeStructBegin oprot "GetNoteContent_result"
  case f_GetNoteContent_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteContent_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteContent_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteContent_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteContent_result_fields iprot record = do
  (_,_t515,_id516) <- readFieldBegin iprot
  if _t515 == T_STOP then return record else
    case _id516 of 
      0 -> if _t515 == T_STRING then do
        s <- readString iprot
        read_GetNoteContent_result_fields iprot record{f_GetNoteContent_result_success=Just s}
        else do
          skip iprot _t515
          read_GetNoteContent_result_fields iprot record
      1 -> if _t515 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNoteContent_result_fields iprot record{f_GetNoteContent_result_userException=Just s}
        else do
          skip iprot _t515
          read_GetNoteContent_result_fields iprot record
      2 -> if _t515 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNoteContent_result_fields iprot record{f_GetNoteContent_result_systemException=Just s}
        else do
          skip iprot _t515
          read_GetNoteContent_result_fields iprot record
      3 -> if _t515 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNoteContent_result_fields iprot record{f_GetNoteContent_result_notFoundException=Just s}
        else do
          skip iprot _t515
          read_GetNoteContent_result_fields iprot record
      _ -> do
        skip iprot _t515
        readFieldEnd iprot
        read_GetNoteContent_result_fields iprot record
read_GetNoteContent_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteContent_result_fields iprot (GetNoteContent_result{f_GetNoteContent_result_success=Nothing,f_GetNoteContent_result_userException=Nothing,f_GetNoteContent_result_systemException=Nothing,f_GetNoteContent_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetNoteSearchText_args = GetNoteSearchText_args{f_GetNoteSearchText_args_authenticationToken :: Maybe String,f_GetNoteSearchText_args_guid :: Maybe String,f_GetNoteSearchText_args_noteOnly :: Maybe Bool,f_GetNoteSearchText_args_tokenizeForIndexing :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetNoteSearchText_args oprot record = do
  writeStructBegin oprot "GetNoteSearchText_args"
  case f_GetNoteSearchText_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_args_noteOnly record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteOnly",T_BOOL,3)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_args_tokenizeForIndexing record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tokenizeForIndexing",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteSearchText_args_fields iprot record = do
  (_,_t520,_id521) <- readFieldBegin iprot
  if _t520 == T_STOP then return record else
    case _id521 of 
      1 -> if _t520 == T_STRING then do
        s <- readString iprot
        read_GetNoteSearchText_args_fields iprot record{f_GetNoteSearchText_args_authenticationToken=Just s}
        else do
          skip iprot _t520
          read_GetNoteSearchText_args_fields iprot record
      2 -> if _t520 == T_STRING then do
        s <- readString iprot
        read_GetNoteSearchText_args_fields iprot record{f_GetNoteSearchText_args_guid=Just s}
        else do
          skip iprot _t520
          read_GetNoteSearchText_args_fields iprot record
      3 -> if _t520 == T_BOOL then do
        s <- readBool iprot
        read_GetNoteSearchText_args_fields iprot record{f_GetNoteSearchText_args_noteOnly=Just s}
        else do
          skip iprot _t520
          read_GetNoteSearchText_args_fields iprot record
      4 -> if _t520 == T_BOOL then do
        s <- readBool iprot
        read_GetNoteSearchText_args_fields iprot record{f_GetNoteSearchText_args_tokenizeForIndexing=Just s}
        else do
          skip iprot _t520
          read_GetNoteSearchText_args_fields iprot record
      _ -> do
        skip iprot _t520
        readFieldEnd iprot
        read_GetNoteSearchText_args_fields iprot record
read_GetNoteSearchText_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteSearchText_args_fields iprot (GetNoteSearchText_args{f_GetNoteSearchText_args_authenticationToken=Nothing,f_GetNoteSearchText_args_guid=Nothing,f_GetNoteSearchText_args_noteOnly=Nothing,f_GetNoteSearchText_args_tokenizeForIndexing=Nothing})
  readStructEnd iprot
  return record
data GetNoteSearchText_result = GetNoteSearchText_result{f_GetNoteSearchText_result_success :: Maybe String,f_GetNoteSearchText_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNoteSearchText_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNoteSearchText_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNoteSearchText_result oprot record = do
  writeStructBegin oprot "GetNoteSearchText_result"
  case f_GetNoteSearchText_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteSearchText_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteSearchText_result_fields iprot record = do
  (_,_t525,_id526) <- readFieldBegin iprot
  if _t525 == T_STOP then return record else
    case _id526 of 
      0 -> if _t525 == T_STRING then do
        s <- readString iprot
        read_GetNoteSearchText_result_fields iprot record{f_GetNoteSearchText_result_success=Just s}
        else do
          skip iprot _t525
          read_GetNoteSearchText_result_fields iprot record
      1 -> if _t525 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNoteSearchText_result_fields iprot record{f_GetNoteSearchText_result_userException=Just s}
        else do
          skip iprot _t525
          read_GetNoteSearchText_result_fields iprot record
      2 -> if _t525 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNoteSearchText_result_fields iprot record{f_GetNoteSearchText_result_systemException=Just s}
        else do
          skip iprot _t525
          read_GetNoteSearchText_result_fields iprot record
      3 -> if _t525 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNoteSearchText_result_fields iprot record{f_GetNoteSearchText_result_notFoundException=Just s}
        else do
          skip iprot _t525
          read_GetNoteSearchText_result_fields iprot record
      _ -> do
        skip iprot _t525
        readFieldEnd iprot
        read_GetNoteSearchText_result_fields iprot record
read_GetNoteSearchText_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteSearchText_result_fields iprot (GetNoteSearchText_result{f_GetNoteSearchText_result_success=Nothing,f_GetNoteSearchText_result_userException=Nothing,f_GetNoteSearchText_result_systemException=Nothing,f_GetNoteSearchText_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceSearchText_args = GetResourceSearchText_args{f_GetResourceSearchText_args_authenticationToken :: Maybe String,f_GetResourceSearchText_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetResourceSearchText_args oprot record = do
  writeStructBegin oprot "GetResourceSearchText_args"
  case f_GetResourceSearchText_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceSearchText_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceSearchText_args_fields iprot record = do
  (_,_t530,_id531) <- readFieldBegin iprot
  if _t530 == T_STOP then return record else
    case _id531 of 
      1 -> if _t530 == T_STRING then do
        s <- readString iprot
        read_GetResourceSearchText_args_fields iprot record{f_GetResourceSearchText_args_authenticationToken=Just s}
        else do
          skip iprot _t530
          read_GetResourceSearchText_args_fields iprot record
      2 -> if _t530 == T_STRING then do
        s <- readString iprot
        read_GetResourceSearchText_args_fields iprot record{f_GetResourceSearchText_args_guid=Just s}
        else do
          skip iprot _t530
          read_GetResourceSearchText_args_fields iprot record
      _ -> do
        skip iprot _t530
        readFieldEnd iprot
        read_GetResourceSearchText_args_fields iprot record
read_GetResourceSearchText_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceSearchText_args_fields iprot (GetResourceSearchText_args{f_GetResourceSearchText_args_authenticationToken=Nothing,f_GetResourceSearchText_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetResourceSearchText_result = GetResourceSearchText_result{f_GetResourceSearchText_result_success :: Maybe String,f_GetResourceSearchText_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceSearchText_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceSearchText_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceSearchText_result oprot record = do
  writeStructBegin oprot "GetResourceSearchText_result"
  case f_GetResourceSearchText_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceSearchText_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceSearchText_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceSearchText_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceSearchText_result_fields iprot record = do
  (_,_t535,_id536) <- readFieldBegin iprot
  if _t535 == T_STOP then return record else
    case _id536 of 
      0 -> if _t535 == T_STRING then do
        s <- readString iprot
        read_GetResourceSearchText_result_fields iprot record{f_GetResourceSearchText_result_success=Just s}
        else do
          skip iprot _t535
          read_GetResourceSearchText_result_fields iprot record
      1 -> if _t535 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceSearchText_result_fields iprot record{f_GetResourceSearchText_result_userException=Just s}
        else do
          skip iprot _t535
          read_GetResourceSearchText_result_fields iprot record
      2 -> if _t535 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceSearchText_result_fields iprot record{f_GetResourceSearchText_result_systemException=Just s}
        else do
          skip iprot _t535
          read_GetResourceSearchText_result_fields iprot record
      3 -> if _t535 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceSearchText_result_fields iprot record{f_GetResourceSearchText_result_notFoundException=Just s}
        else do
          skip iprot _t535
          read_GetResourceSearchText_result_fields iprot record
      _ -> do
        skip iprot _t535
        readFieldEnd iprot
        read_GetResourceSearchText_result_fields iprot record
read_GetResourceSearchText_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceSearchText_result_fields iprot (GetResourceSearchText_result{f_GetResourceSearchText_result_success=Nothing,f_GetResourceSearchText_result_userException=Nothing,f_GetResourceSearchText_result_systemException=Nothing,f_GetResourceSearchText_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetNoteTagNames_args = GetNoteTagNames_args{f_GetNoteTagNames_args_authenticationToken :: Maybe String,f_GetNoteTagNames_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetNoteTagNames_args oprot record = do
  writeStructBegin oprot "GetNoteTagNames_args"
  case f_GetNoteTagNames_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteTagNames_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteTagNames_args_fields iprot record = do
  (_,_t540,_id541) <- readFieldBegin iprot
  if _t540 == T_STOP then return record else
    case _id541 of 
      1 -> if _t540 == T_STRING then do
        s <- readString iprot
        read_GetNoteTagNames_args_fields iprot record{f_GetNoteTagNames_args_authenticationToken=Just s}
        else do
          skip iprot _t540
          read_GetNoteTagNames_args_fields iprot record
      2 -> if _t540 == T_STRING then do
        s <- readString iprot
        read_GetNoteTagNames_args_fields iprot record{f_GetNoteTagNames_args_guid=Just s}
        else do
          skip iprot _t540
          read_GetNoteTagNames_args_fields iprot record
      _ -> do
        skip iprot _t540
        readFieldEnd iprot
        read_GetNoteTagNames_args_fields iprot record
read_GetNoteTagNames_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteTagNames_args_fields iprot (GetNoteTagNames_args{f_GetNoteTagNames_args_authenticationToken=Nothing,f_GetNoteTagNames_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetNoteTagNames_result = GetNoteTagNames_result{f_GetNoteTagNames_result_success :: Maybe [String],f_GetNoteTagNames_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNoteTagNames_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNoteTagNames_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNoteTagNames_result oprot record = do
  writeStructBegin oprot "GetNoteTagNames_result"
  case f_GetNoteTagNames_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter544:t) = do {writeString oprot _viter544;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_GetNoteTagNames_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteTagNames_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteTagNames_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteTagNames_result_fields iprot record = do
  (_,_t546,_id547) <- readFieldBegin iprot
  if _t546 == T_STOP then return record else
    case _id547 of 
      0 -> if _t546 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype551,_size548) <- readListBegin iprot; f _size548})
        read_GetNoteTagNames_result_fields iprot record{f_GetNoteTagNames_result_success=Just s}
        else do
          skip iprot _t546
          read_GetNoteTagNames_result_fields iprot record
      1 -> if _t546 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNoteTagNames_result_fields iprot record{f_GetNoteTagNames_result_userException=Just s}
        else do
          skip iprot _t546
          read_GetNoteTagNames_result_fields iprot record
      2 -> if _t546 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNoteTagNames_result_fields iprot record{f_GetNoteTagNames_result_systemException=Just s}
        else do
          skip iprot _t546
          read_GetNoteTagNames_result_fields iprot record
      3 -> if _t546 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNoteTagNames_result_fields iprot record{f_GetNoteTagNames_result_notFoundException=Just s}
        else do
          skip iprot _t546
          read_GetNoteTagNames_result_fields iprot record
      _ -> do
        skip iprot _t546
        readFieldEnd iprot
        read_GetNoteTagNames_result_fields iprot record
read_GetNoteTagNames_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteTagNames_result_fields iprot (GetNoteTagNames_result{f_GetNoteTagNames_result_success=Nothing,f_GetNoteTagNames_result_userException=Nothing,f_GetNoteTagNames_result_systemException=Nothing,f_GetNoteTagNames_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data CreateNote_args = CreateNote_args{f_CreateNote_args_authenticationToken :: Maybe String,f_CreateNote_args_note :: Maybe Types_Types.Note} deriving (Show,Eq,Ord,Typeable)
write_CreateNote_args oprot record = do
  writeStructBegin oprot "CreateNote_args"
  case f_CreateNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateNote_args_note record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("note",T_STRUCT,2)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateNote_args_fields iprot record = do
  (_,_t556,_id557) <- readFieldBegin iprot
  if _t556 == T_STOP then return record else
    case _id557 of 
      1 -> if _t556 == T_STRING then do
        s <- readString iprot
        read_CreateNote_args_fields iprot record{f_CreateNote_args_authenticationToken=Just s}
        else do
          skip iprot _t556
          read_CreateNote_args_fields iprot record
      2 -> if _t556 == T_STRUCT then do
        s <- (read_Note iprot)
        read_CreateNote_args_fields iprot record{f_CreateNote_args_note=Just s}
        else do
          skip iprot _t556
          read_CreateNote_args_fields iprot record
      _ -> do
        skip iprot _t556
        readFieldEnd iprot
        read_CreateNote_args_fields iprot record
read_CreateNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateNote_args_fields iprot (CreateNote_args{f_CreateNote_args_authenticationToken=Nothing,f_CreateNote_args_note=Nothing})
  readStructEnd iprot
  return record
data CreateNote_result = CreateNote_result{f_CreateNote_result_success :: Maybe Types_Types.Note,f_CreateNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_CreateNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_CreateNote_result oprot record = do
  writeStructBegin oprot "CreateNote_result"
  case f_CreateNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  case f_CreateNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_CreateNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateNote_result_fields iprot record = do
  (_,_t561,_id562) <- readFieldBegin iprot
  if _t561 == T_STOP then return record else
    case _id562 of 
      0 -> if _t561 == T_STRUCT then do
        s <- (read_Note iprot)
        read_CreateNote_result_fields iprot record{f_CreateNote_result_success=Just s}
        else do
          skip iprot _t561
          read_CreateNote_result_fields iprot record
      1 -> if _t561 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateNote_result_fields iprot record{f_CreateNote_result_userException=Just s}
        else do
          skip iprot _t561
          read_CreateNote_result_fields iprot record
      2 -> if _t561 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateNote_result_fields iprot record{f_CreateNote_result_systemException=Just s}
        else do
          skip iprot _t561
          read_CreateNote_result_fields iprot record
      3 -> if _t561 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_CreateNote_result_fields iprot record{f_CreateNote_result_notFoundException=Just s}
        else do
          skip iprot _t561
          read_CreateNote_result_fields iprot record
      _ -> do
        skip iprot _t561
        readFieldEnd iprot
        read_CreateNote_result_fields iprot record
read_CreateNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateNote_result_fields iprot (CreateNote_result{f_CreateNote_result_success=Nothing,f_CreateNote_result_userException=Nothing,f_CreateNote_result_systemException=Nothing,f_CreateNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data UpdateNote_args = UpdateNote_args{f_UpdateNote_args_authenticationToken :: Maybe String,f_UpdateNote_args_note :: Maybe Types_Types.Note} deriving (Show,Eq,Ord,Typeable)
write_UpdateNote_args oprot record = do
  writeStructBegin oprot "UpdateNote_args"
  case f_UpdateNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateNote_args_note record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("note",T_STRUCT,2)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateNote_args_fields iprot record = do
  (_,_t566,_id567) <- readFieldBegin iprot
  if _t566 == T_STOP then return record else
    case _id567 of 
      1 -> if _t566 == T_STRING then do
        s <- readString iprot
        read_UpdateNote_args_fields iprot record{f_UpdateNote_args_authenticationToken=Just s}
        else do
          skip iprot _t566
          read_UpdateNote_args_fields iprot record
      2 -> if _t566 == T_STRUCT then do
        s <- (read_Note iprot)
        read_UpdateNote_args_fields iprot record{f_UpdateNote_args_note=Just s}
        else do
          skip iprot _t566
          read_UpdateNote_args_fields iprot record
      _ -> do
        skip iprot _t566
        readFieldEnd iprot
        read_UpdateNote_args_fields iprot record
read_UpdateNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateNote_args_fields iprot (UpdateNote_args{f_UpdateNote_args_authenticationToken=Nothing,f_UpdateNote_args_note=Nothing})
  readStructEnd iprot
  return record
data UpdateNote_result = UpdateNote_result{f_UpdateNote_result_success :: Maybe Types_Types.Note,f_UpdateNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UpdateNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UpdateNote_result oprot record = do
  writeStructBegin oprot "UpdateNote_result"
  case f_UpdateNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  case f_UpdateNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UpdateNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateNote_result_fields iprot record = do
  (_,_t571,_id572) <- readFieldBegin iprot
  if _t571 == T_STOP then return record else
    case _id572 of 
      0 -> if _t571 == T_STRUCT then do
        s <- (read_Note iprot)
        read_UpdateNote_result_fields iprot record{f_UpdateNote_result_success=Just s}
        else do
          skip iprot _t571
          read_UpdateNote_result_fields iprot record
      1 -> if _t571 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateNote_result_fields iprot record{f_UpdateNote_result_userException=Just s}
        else do
          skip iprot _t571
          read_UpdateNote_result_fields iprot record
      2 -> if _t571 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateNote_result_fields iprot record{f_UpdateNote_result_systemException=Just s}
        else do
          skip iprot _t571
          read_UpdateNote_result_fields iprot record
      3 -> if _t571 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateNote_result_fields iprot record{f_UpdateNote_result_notFoundException=Just s}
        else do
          skip iprot _t571
          read_UpdateNote_result_fields iprot record
      _ -> do
        skip iprot _t571
        readFieldEnd iprot
        read_UpdateNote_result_fields iprot record
read_UpdateNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateNote_result_fields iprot (UpdateNote_result{f_UpdateNote_result_success=Nothing,f_UpdateNote_result_userException=Nothing,f_UpdateNote_result_systemException=Nothing,f_UpdateNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data DeleteNote_args = DeleteNote_args{f_DeleteNote_args_authenticationToken :: Maybe String,f_DeleteNote_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_DeleteNote_args oprot record = do
  writeStructBegin oprot "DeleteNote_args"
  case f_DeleteNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_DeleteNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_DeleteNote_args_fields iprot record = do
  (_,_t576,_id577) <- readFieldBegin iprot
  if _t576 == T_STOP then return record else
    case _id577 of 
      1 -> if _t576 == T_STRING then do
        s <- readString iprot
        read_DeleteNote_args_fields iprot record{f_DeleteNote_args_authenticationToken=Just s}
        else do
          skip iprot _t576
          read_DeleteNote_args_fields iprot record
      2 -> if _t576 == T_STRING then do
        s <- readString iprot
        read_DeleteNote_args_fields iprot record{f_DeleteNote_args_guid=Just s}
        else do
          skip iprot _t576
          read_DeleteNote_args_fields iprot record
      _ -> do
        skip iprot _t576
        readFieldEnd iprot
        read_DeleteNote_args_fields iprot record
read_DeleteNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_DeleteNote_args_fields iprot (DeleteNote_args{f_DeleteNote_args_authenticationToken=Nothing,f_DeleteNote_args_guid=Nothing})
  readStructEnd iprot
  return record
data DeleteNote_result = DeleteNote_result{f_DeleteNote_result_success :: Maybe Int32,f_DeleteNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_DeleteNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_DeleteNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_DeleteNote_result oprot record = do
  writeStructBegin oprot "DeleteNote_result"
  case f_DeleteNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_DeleteNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_DeleteNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_DeleteNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_DeleteNote_result_fields iprot record = do
  (_,_t581,_id582) <- readFieldBegin iprot
  if _t581 == T_STOP then return record else
    case _id582 of 
      0 -> if _t581 == T_I32 then do
        s <- readI32 iprot
        read_DeleteNote_result_fields iprot record{f_DeleteNote_result_success=Just s}
        else do
          skip iprot _t581
          read_DeleteNote_result_fields iprot record
      1 -> if _t581 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_DeleteNote_result_fields iprot record{f_DeleteNote_result_userException=Just s}
        else do
          skip iprot _t581
          read_DeleteNote_result_fields iprot record
      2 -> if _t581 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_DeleteNote_result_fields iprot record{f_DeleteNote_result_systemException=Just s}
        else do
          skip iprot _t581
          read_DeleteNote_result_fields iprot record
      3 -> if _t581 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_DeleteNote_result_fields iprot record{f_DeleteNote_result_notFoundException=Just s}
        else do
          skip iprot _t581
          read_DeleteNote_result_fields iprot record
      _ -> do
        skip iprot _t581
        readFieldEnd iprot
        read_DeleteNote_result_fields iprot record
read_DeleteNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_DeleteNote_result_fields iprot (DeleteNote_result{f_DeleteNote_result_success=Nothing,f_DeleteNote_result_userException=Nothing,f_DeleteNote_result_systemException=Nothing,f_DeleteNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeNote_args = ExpungeNote_args{f_ExpungeNote_args_authenticationToken :: Maybe String,f_ExpungeNote_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNote_args oprot record = do
  writeStructBegin oprot "ExpungeNote_args"
  case f_ExpungeNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNote_args_fields iprot record = do
  (_,_t586,_id587) <- readFieldBegin iprot
  if _t586 == T_STOP then return record else
    case _id587 of 
      1 -> if _t586 == T_STRING then do
        s <- readString iprot
        read_ExpungeNote_args_fields iprot record{f_ExpungeNote_args_authenticationToken=Just s}
        else do
          skip iprot _t586
          read_ExpungeNote_args_fields iprot record
      2 -> if _t586 == T_STRING then do
        s <- readString iprot
        read_ExpungeNote_args_fields iprot record{f_ExpungeNote_args_guid=Just s}
        else do
          skip iprot _t586
          read_ExpungeNote_args_fields iprot record
      _ -> do
        skip iprot _t586
        readFieldEnd iprot
        read_ExpungeNote_args_fields iprot record
read_ExpungeNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNote_args_fields iprot (ExpungeNote_args{f_ExpungeNote_args_authenticationToken=Nothing,f_ExpungeNote_args_guid=Nothing})
  readStructEnd iprot
  return record
data ExpungeNote_result = ExpungeNote_result{f_ExpungeNote_result_success :: Maybe Int32,f_ExpungeNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ExpungeNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNote_result oprot record = do
  writeStructBegin oprot "ExpungeNote_result"
  case f_ExpungeNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNote_result_fields iprot record = do
  (_,_t591,_id592) <- readFieldBegin iprot
  if _t591 == T_STOP then return record else
    case _id592 of 
      0 -> if _t591 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeNote_result_fields iprot record{f_ExpungeNote_result_success=Just s}
        else do
          skip iprot _t591
          read_ExpungeNote_result_fields iprot record
      1 -> if _t591 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeNote_result_fields iprot record{f_ExpungeNote_result_userException=Just s}
        else do
          skip iprot _t591
          read_ExpungeNote_result_fields iprot record
      2 -> if _t591 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeNote_result_fields iprot record{f_ExpungeNote_result_systemException=Just s}
        else do
          skip iprot _t591
          read_ExpungeNote_result_fields iprot record
      3 -> if _t591 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeNote_result_fields iprot record{f_ExpungeNote_result_notFoundException=Just s}
        else do
          skip iprot _t591
          read_ExpungeNote_result_fields iprot record
      _ -> do
        skip iprot _t591
        readFieldEnd iprot
        read_ExpungeNote_result_fields iprot record
read_ExpungeNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNote_result_fields iprot (ExpungeNote_result{f_ExpungeNote_result_success=Nothing,f_ExpungeNote_result_userException=Nothing,f_ExpungeNote_result_systemException=Nothing,f_ExpungeNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeNotes_args = ExpungeNotes_args{f_ExpungeNotes_args_authenticationToken :: Maybe String,f_ExpungeNotes_args_noteGuids :: Maybe [String]} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNotes_args oprot record = do
  writeStructBegin oprot "ExpungeNotes_args"
  case f_ExpungeNotes_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotes_args_noteGuids record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuids",T_LIST,2)
    (let {f [] = return (); f (_viter595:t) = do {writeString oprot _viter595;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNotes_args_fields iprot record = do
  (_,_t597,_id598) <- readFieldBegin iprot
  if _t597 == T_STOP then return record else
    case _id598 of 
      1 -> if _t597 == T_STRING then do
        s <- readString iprot
        read_ExpungeNotes_args_fields iprot record{f_ExpungeNotes_args_authenticationToken=Just s}
        else do
          skip iprot _t597
          read_ExpungeNotes_args_fields iprot record
      2 -> if _t597 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype602,_size599) <- readListBegin iprot; f _size599})
        read_ExpungeNotes_args_fields iprot record{f_ExpungeNotes_args_noteGuids=Just s}
        else do
          skip iprot _t597
          read_ExpungeNotes_args_fields iprot record
      _ -> do
        skip iprot _t597
        readFieldEnd iprot
        read_ExpungeNotes_args_fields iprot record
read_ExpungeNotes_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNotes_args_fields iprot (ExpungeNotes_args{f_ExpungeNotes_args_authenticationToken=Nothing,f_ExpungeNotes_args_noteGuids=Nothing})
  readStructEnd iprot
  return record
data ExpungeNotes_result = ExpungeNotes_result{f_ExpungeNotes_result_success :: Maybe Int32,f_ExpungeNotes_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeNotes_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ExpungeNotes_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeNotes_result oprot record = do
  writeStructBegin oprot "ExpungeNotes_result"
  case f_ExpungeNotes_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotes_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotes_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeNotes_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeNotes_result_fields iprot record = do
  (_,_t607,_id608) <- readFieldBegin iprot
  if _t607 == T_STOP then return record else
    case _id608 of 
      0 -> if _t607 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeNotes_result_fields iprot record{f_ExpungeNotes_result_success=Just s}
        else do
          skip iprot _t607
          read_ExpungeNotes_result_fields iprot record
      1 -> if _t607 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeNotes_result_fields iprot record{f_ExpungeNotes_result_userException=Just s}
        else do
          skip iprot _t607
          read_ExpungeNotes_result_fields iprot record
      2 -> if _t607 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeNotes_result_fields iprot record{f_ExpungeNotes_result_systemException=Just s}
        else do
          skip iprot _t607
          read_ExpungeNotes_result_fields iprot record
      3 -> if _t607 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeNotes_result_fields iprot record{f_ExpungeNotes_result_notFoundException=Just s}
        else do
          skip iprot _t607
          read_ExpungeNotes_result_fields iprot record
      _ -> do
        skip iprot _t607
        readFieldEnd iprot
        read_ExpungeNotes_result_fields iprot record
read_ExpungeNotes_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeNotes_result_fields iprot (ExpungeNotes_result{f_ExpungeNotes_result_success=Nothing,f_ExpungeNotes_result_userException=Nothing,f_ExpungeNotes_result_systemException=Nothing,f_ExpungeNotes_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ExpungeInactiveNotes_args = ExpungeInactiveNotes_args{f_ExpungeInactiveNotes_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeInactiveNotes_args oprot record = do
  writeStructBegin oprot "ExpungeInactiveNotes_args"
  case f_ExpungeInactiveNotes_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeInactiveNotes_args_fields iprot record = do
  (_,_t612,_id613) <- readFieldBegin iprot
  if _t612 == T_STOP then return record else
    case _id613 of 
      1 -> if _t612 == T_STRING then do
        s <- readString iprot
        read_ExpungeInactiveNotes_args_fields iprot record{f_ExpungeInactiveNotes_args_authenticationToken=Just s}
        else do
          skip iprot _t612
          read_ExpungeInactiveNotes_args_fields iprot record
      _ -> do
        skip iprot _t612
        readFieldEnd iprot
        read_ExpungeInactiveNotes_args_fields iprot record
read_ExpungeInactiveNotes_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeInactiveNotes_args_fields iprot (ExpungeInactiveNotes_args{f_ExpungeInactiveNotes_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ExpungeInactiveNotes_result = ExpungeInactiveNotes_result{f_ExpungeInactiveNotes_result_success :: Maybe Int32,f_ExpungeInactiveNotes_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeInactiveNotes_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeInactiveNotes_result oprot record = do
  writeStructBegin oprot "ExpungeInactiveNotes_result"
  case f_ExpungeInactiveNotes_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeInactiveNotes_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeInactiveNotes_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeInactiveNotes_result_fields iprot record = do
  (_,_t617,_id618) <- readFieldBegin iprot
  if _t617 == T_STOP then return record else
    case _id618 of 
      0 -> if _t617 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeInactiveNotes_result_fields iprot record{f_ExpungeInactiveNotes_result_success=Just s}
        else do
          skip iprot _t617
          read_ExpungeInactiveNotes_result_fields iprot record
      1 -> if _t617 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeInactiveNotes_result_fields iprot record{f_ExpungeInactiveNotes_result_userException=Just s}
        else do
          skip iprot _t617
          read_ExpungeInactiveNotes_result_fields iprot record
      2 -> if _t617 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeInactiveNotes_result_fields iprot record{f_ExpungeInactiveNotes_result_systemException=Just s}
        else do
          skip iprot _t617
          read_ExpungeInactiveNotes_result_fields iprot record
      _ -> do
        skip iprot _t617
        readFieldEnd iprot
        read_ExpungeInactiveNotes_result_fields iprot record
read_ExpungeInactiveNotes_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeInactiveNotes_result_fields iprot (ExpungeInactiveNotes_result{f_ExpungeInactiveNotes_result_success=Nothing,f_ExpungeInactiveNotes_result_userException=Nothing,f_ExpungeInactiveNotes_result_systemException=Nothing})
  readStructEnd iprot
  return record
data CopyNote_args = CopyNote_args{f_CopyNote_args_authenticationToken :: Maybe String,f_CopyNote_args_noteGuid :: Maybe String,f_CopyNote_args_toNotebookGuid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_CopyNote_args oprot record = do
  writeStructBegin oprot "CopyNote_args"
  case f_CopyNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CopyNote_args_noteGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CopyNote_args_toNotebookGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("toNotebookGuid",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CopyNote_args_fields iprot record = do
  (_,_t622,_id623) <- readFieldBegin iprot
  if _t622 == T_STOP then return record else
    case _id623 of 
      1 -> if _t622 == T_STRING then do
        s <- readString iprot
        read_CopyNote_args_fields iprot record{f_CopyNote_args_authenticationToken=Just s}
        else do
          skip iprot _t622
          read_CopyNote_args_fields iprot record
      2 -> if _t622 == T_STRING then do
        s <- readString iprot
        read_CopyNote_args_fields iprot record{f_CopyNote_args_noteGuid=Just s}
        else do
          skip iprot _t622
          read_CopyNote_args_fields iprot record
      3 -> if _t622 == T_STRING then do
        s <- readString iprot
        read_CopyNote_args_fields iprot record{f_CopyNote_args_toNotebookGuid=Just s}
        else do
          skip iprot _t622
          read_CopyNote_args_fields iprot record
      _ -> do
        skip iprot _t622
        readFieldEnd iprot
        read_CopyNote_args_fields iprot record
read_CopyNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CopyNote_args_fields iprot (CopyNote_args{f_CopyNote_args_authenticationToken=Nothing,f_CopyNote_args_noteGuid=Nothing,f_CopyNote_args_toNotebookGuid=Nothing})
  readStructEnd iprot
  return record
data CopyNote_result = CopyNote_result{f_CopyNote_result_success :: Maybe Types_Types.Note,f_CopyNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_CopyNote_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_CopyNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_CopyNote_result oprot record = do
  writeStructBegin oprot "CopyNote_result"
  case f_CopyNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  case f_CopyNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CopyNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_CopyNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CopyNote_result_fields iprot record = do
  (_,_t627,_id628) <- readFieldBegin iprot
  if _t627 == T_STOP then return record else
    case _id628 of 
      0 -> if _t627 == T_STRUCT then do
        s <- (read_Note iprot)
        read_CopyNote_result_fields iprot record{f_CopyNote_result_success=Just s}
        else do
          skip iprot _t627
          read_CopyNote_result_fields iprot record
      1 -> if _t627 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CopyNote_result_fields iprot record{f_CopyNote_result_userException=Just s}
        else do
          skip iprot _t627
          read_CopyNote_result_fields iprot record
      2 -> if _t627 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CopyNote_result_fields iprot record{f_CopyNote_result_systemException=Just s}
        else do
          skip iprot _t627
          read_CopyNote_result_fields iprot record
      3 -> if _t627 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_CopyNote_result_fields iprot record{f_CopyNote_result_notFoundException=Just s}
        else do
          skip iprot _t627
          read_CopyNote_result_fields iprot record
      _ -> do
        skip iprot _t627
        readFieldEnd iprot
        read_CopyNote_result_fields iprot record
read_CopyNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CopyNote_result_fields iprot (CopyNote_result{f_CopyNote_result_success=Nothing,f_CopyNote_result_userException=Nothing,f_CopyNote_result_systemException=Nothing,f_CopyNote_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data ListNoteVersions_args = ListNoteVersions_args{f_ListNoteVersions_args_authenticationToken :: Maybe String,f_ListNoteVersions_args_noteGuid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListNoteVersions_args oprot record = do
  writeStructBegin oprot "ListNoteVersions_args"
  case f_ListNoteVersions_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ListNoteVersions_args_noteGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListNoteVersions_args_fields iprot record = do
  (_,_t632,_id633) <- readFieldBegin iprot
  if _t632 == T_STOP then return record else
    case _id633 of 
      1 -> if _t632 == T_STRING then do
        s <- readString iprot
        read_ListNoteVersions_args_fields iprot record{f_ListNoteVersions_args_authenticationToken=Just s}
        else do
          skip iprot _t632
          read_ListNoteVersions_args_fields iprot record
      2 -> if _t632 == T_STRING then do
        s <- readString iprot
        read_ListNoteVersions_args_fields iprot record{f_ListNoteVersions_args_noteGuid=Just s}
        else do
          skip iprot _t632
          read_ListNoteVersions_args_fields iprot record
      _ -> do
        skip iprot _t632
        readFieldEnd iprot
        read_ListNoteVersions_args_fields iprot record
read_ListNoteVersions_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListNoteVersions_args_fields iprot (ListNoteVersions_args{f_ListNoteVersions_args_authenticationToken=Nothing,f_ListNoteVersions_args_noteGuid=Nothing})
  readStructEnd iprot
  return record
data ListNoteVersions_result = ListNoteVersions_result{f_ListNoteVersions_result_success :: Maybe [NoteVersionId],f_ListNoteVersions_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListNoteVersions_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_ListNoteVersions_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_ListNoteVersions_result oprot record = do
  writeStructBegin oprot "ListNoteVersions_result"
  case f_ListNoteVersions_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter636:t) = do {write_NoteVersionId oprot _viter636;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListNoteVersions_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListNoteVersions_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_ListNoteVersions_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListNoteVersions_result_fields iprot record = do
  (_,_t638,_id639) <- readFieldBegin iprot
  if _t638 == T_STOP then return record else
    case _id639 of 
      0 -> if _t638 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_NoteVersionId iprot);r <- f (n-1); return $ v:r}} in do {(_etype643,_size640) <- readListBegin iprot; f _size640})
        read_ListNoteVersions_result_fields iprot record{f_ListNoteVersions_result_success=Just s}
        else do
          skip iprot _t638
          read_ListNoteVersions_result_fields iprot record
      1 -> if _t638 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListNoteVersions_result_fields iprot record{f_ListNoteVersions_result_userException=Just s}
        else do
          skip iprot _t638
          read_ListNoteVersions_result_fields iprot record
      2 -> if _t638 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListNoteVersions_result_fields iprot record{f_ListNoteVersions_result_systemException=Just s}
        else do
          skip iprot _t638
          read_ListNoteVersions_result_fields iprot record
      3 -> if _t638 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ListNoteVersions_result_fields iprot record{f_ListNoteVersions_result_notFoundException=Just s}
        else do
          skip iprot _t638
          read_ListNoteVersions_result_fields iprot record
      _ -> do
        skip iprot _t638
        readFieldEnd iprot
        read_ListNoteVersions_result_fields iprot record
read_ListNoteVersions_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListNoteVersions_result_fields iprot (ListNoteVersions_result{f_ListNoteVersions_result_success=Nothing,f_ListNoteVersions_result_userException=Nothing,f_ListNoteVersions_result_systemException=Nothing,f_ListNoteVersions_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetNoteVersion_args = GetNoteVersion_args{f_GetNoteVersion_args_authenticationToken :: Maybe String,f_GetNoteVersion_args_noteGuid :: Maybe String,f_GetNoteVersion_args_updateSequenceNum :: Maybe Int32,f_GetNoteVersion_args_withResourcesData :: Maybe Bool,f_GetNoteVersion_args_withResourcesRecognition :: Maybe Bool,f_GetNoteVersion_args_withResourcesAlternateData :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetNoteVersion_args oprot record = do
  writeStructBegin oprot "GetNoteVersion_args"
  case f_GetNoteVersion_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_args_noteGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_args_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_args_withResourcesData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesData",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_args_withResourcesRecognition record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesRecognition",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_args_withResourcesAlternateData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withResourcesAlternateData",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteVersion_args_fields iprot record = do
  (_,_t648,_id649) <- readFieldBegin iprot
  if _t648 == T_STOP then return record else
    case _id649 of 
      1 -> if _t648 == T_STRING then do
        s <- readString iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_authenticationToken=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      2 -> if _t648 == T_STRING then do
        s <- readString iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_noteGuid=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      3 -> if _t648 == T_I32 then do
        s <- readI32 iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_updateSequenceNum=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      4 -> if _t648 == T_BOOL then do
        s <- readBool iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_withResourcesData=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      5 -> if _t648 == T_BOOL then do
        s <- readBool iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_withResourcesRecognition=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      6 -> if _t648 == T_BOOL then do
        s <- readBool iprot
        read_GetNoteVersion_args_fields iprot record{f_GetNoteVersion_args_withResourcesAlternateData=Just s}
        else do
          skip iprot _t648
          read_GetNoteVersion_args_fields iprot record
      _ -> do
        skip iprot _t648
        readFieldEnd iprot
        read_GetNoteVersion_args_fields iprot record
read_GetNoteVersion_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteVersion_args_fields iprot (GetNoteVersion_args{f_GetNoteVersion_args_authenticationToken=Nothing,f_GetNoteVersion_args_noteGuid=Nothing,f_GetNoteVersion_args_updateSequenceNum=Nothing,f_GetNoteVersion_args_withResourcesData=Nothing,f_GetNoteVersion_args_withResourcesRecognition=Nothing,f_GetNoteVersion_args_withResourcesAlternateData=Nothing})
  readStructEnd iprot
  return record
data GetNoteVersion_result = GetNoteVersion_result{f_GetNoteVersion_result_success :: Maybe Types_Types.Note,f_GetNoteVersion_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetNoteVersion_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetNoteVersion_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetNoteVersion_result oprot record = do
  writeStructBegin oprot "GetNoteVersion_result"
  case f_GetNoteVersion_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Note oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetNoteVersion_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetNoteVersion_result_fields iprot record = do
  (_,_t653,_id654) <- readFieldBegin iprot
  if _t653 == T_STOP then return record else
    case _id654 of 
      0 -> if _t653 == T_STRUCT then do
        s <- (read_Note iprot)
        read_GetNoteVersion_result_fields iprot record{f_GetNoteVersion_result_success=Just s}
        else do
          skip iprot _t653
          read_GetNoteVersion_result_fields iprot record
      1 -> if _t653 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetNoteVersion_result_fields iprot record{f_GetNoteVersion_result_userException=Just s}
        else do
          skip iprot _t653
          read_GetNoteVersion_result_fields iprot record
      2 -> if _t653 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetNoteVersion_result_fields iprot record{f_GetNoteVersion_result_systemException=Just s}
        else do
          skip iprot _t653
          read_GetNoteVersion_result_fields iprot record
      3 -> if _t653 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetNoteVersion_result_fields iprot record{f_GetNoteVersion_result_notFoundException=Just s}
        else do
          skip iprot _t653
          read_GetNoteVersion_result_fields iprot record
      _ -> do
        skip iprot _t653
        readFieldEnd iprot
        read_GetNoteVersion_result_fields iprot record
read_GetNoteVersion_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetNoteVersion_result_fields iprot (GetNoteVersion_result{f_GetNoteVersion_result_success=Nothing,f_GetNoteVersion_result_userException=Nothing,f_GetNoteVersion_result_systemException=Nothing,f_GetNoteVersion_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResource_args = GetResource_args{f_GetResource_args_authenticationToken :: Maybe String,f_GetResource_args_guid :: Maybe String,f_GetResource_args_withData :: Maybe Bool,f_GetResource_args_withRecognition :: Maybe Bool,f_GetResource_args_withAttributes :: Maybe Bool,f_GetResource_args_withAlternateData :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetResource_args oprot record = do
  writeStructBegin oprot "GetResource_args"
  case f_GetResource_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResource_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResource_args_withData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withData",T_BOOL,3)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetResource_args_withRecognition record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withRecognition",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetResource_args_withAttributes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withAttributes",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetResource_args_withAlternateData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withAlternateData",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResource_args_fields iprot record = do
  (_,_t658,_id659) <- readFieldBegin iprot
  if _t658 == T_STOP then return record else
    case _id659 of 
      1 -> if _t658 == T_STRING then do
        s <- readString iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_authenticationToken=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      2 -> if _t658 == T_STRING then do
        s <- readString iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_guid=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      3 -> if _t658 == T_BOOL then do
        s <- readBool iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_withData=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      4 -> if _t658 == T_BOOL then do
        s <- readBool iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_withRecognition=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      5 -> if _t658 == T_BOOL then do
        s <- readBool iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_withAttributes=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      6 -> if _t658 == T_BOOL then do
        s <- readBool iprot
        read_GetResource_args_fields iprot record{f_GetResource_args_withAlternateData=Just s}
        else do
          skip iprot _t658
          read_GetResource_args_fields iprot record
      _ -> do
        skip iprot _t658
        readFieldEnd iprot
        read_GetResource_args_fields iprot record
read_GetResource_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResource_args_fields iprot (GetResource_args{f_GetResource_args_authenticationToken=Nothing,f_GetResource_args_guid=Nothing,f_GetResource_args_withData=Nothing,f_GetResource_args_withRecognition=Nothing,f_GetResource_args_withAttributes=Nothing,f_GetResource_args_withAlternateData=Nothing})
  readStructEnd iprot
  return record
data GetResource_result = GetResource_result{f_GetResource_result_success :: Maybe Types_Types.Resource,f_GetResource_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResource_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResource_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResource_result oprot record = do
  writeStructBegin oprot "GetResource_result"
  case f_GetResource_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Resource oprot _v
    writeFieldEnd oprot}
  case f_GetResource_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResource_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResource_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResource_result_fields iprot record = do
  (_,_t663,_id664) <- readFieldBegin iprot
  if _t663 == T_STOP then return record else
    case _id664 of 
      0 -> if _t663 == T_STRUCT then do
        s <- (read_Resource iprot)
        read_GetResource_result_fields iprot record{f_GetResource_result_success=Just s}
        else do
          skip iprot _t663
          read_GetResource_result_fields iprot record
      1 -> if _t663 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResource_result_fields iprot record{f_GetResource_result_userException=Just s}
        else do
          skip iprot _t663
          read_GetResource_result_fields iprot record
      2 -> if _t663 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResource_result_fields iprot record{f_GetResource_result_systemException=Just s}
        else do
          skip iprot _t663
          read_GetResource_result_fields iprot record
      3 -> if _t663 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResource_result_fields iprot record{f_GetResource_result_notFoundException=Just s}
        else do
          skip iprot _t663
          read_GetResource_result_fields iprot record
      _ -> do
        skip iprot _t663
        readFieldEnd iprot
        read_GetResource_result_fields iprot record
read_GetResource_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResource_result_fields iprot (GetResource_result{f_GetResource_result_success=Nothing,f_GetResource_result_userException=Nothing,f_GetResource_result_systemException=Nothing,f_GetResource_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data UpdateResource_args = UpdateResource_args{f_UpdateResource_args_authenticationToken :: Maybe String,f_UpdateResource_args_resource :: Maybe Types_Types.Resource} deriving (Show,Eq,Ord,Typeable)
write_UpdateResource_args oprot record = do
  writeStructBegin oprot "UpdateResource_args"
  case f_UpdateResource_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateResource_args_resource record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("resource",T_STRUCT,2)
    Types_Types.write_Resource oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateResource_args_fields iprot record = do
  (_,_t668,_id669) <- readFieldBegin iprot
  if _t668 == T_STOP then return record else
    case _id669 of 
      1 -> if _t668 == T_STRING then do
        s <- readString iprot
        read_UpdateResource_args_fields iprot record{f_UpdateResource_args_authenticationToken=Just s}
        else do
          skip iprot _t668
          read_UpdateResource_args_fields iprot record
      2 -> if _t668 == T_STRUCT then do
        s <- (read_Resource iprot)
        read_UpdateResource_args_fields iprot record{f_UpdateResource_args_resource=Just s}
        else do
          skip iprot _t668
          read_UpdateResource_args_fields iprot record
      _ -> do
        skip iprot _t668
        readFieldEnd iprot
        read_UpdateResource_args_fields iprot record
read_UpdateResource_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateResource_args_fields iprot (UpdateResource_args{f_UpdateResource_args_authenticationToken=Nothing,f_UpdateResource_args_resource=Nothing})
  readStructEnd iprot
  return record
data UpdateResource_result = UpdateResource_result{f_UpdateResource_result_success :: Maybe Int32,f_UpdateResource_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateResource_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_UpdateResource_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_UpdateResource_result oprot record = do
  writeStructBegin oprot "UpdateResource_result"
  case f_UpdateResource_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UpdateResource_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateResource_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_UpdateResource_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateResource_result_fields iprot record = do
  (_,_t673,_id674) <- readFieldBegin iprot
  if _t673 == T_STOP then return record else
    case _id674 of 
      0 -> if _t673 == T_I32 then do
        s <- readI32 iprot
        read_UpdateResource_result_fields iprot record{f_UpdateResource_result_success=Just s}
        else do
          skip iprot _t673
          read_UpdateResource_result_fields iprot record
      1 -> if _t673 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateResource_result_fields iprot record{f_UpdateResource_result_userException=Just s}
        else do
          skip iprot _t673
          read_UpdateResource_result_fields iprot record
      2 -> if _t673 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateResource_result_fields iprot record{f_UpdateResource_result_systemException=Just s}
        else do
          skip iprot _t673
          read_UpdateResource_result_fields iprot record
      3 -> if _t673 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateResource_result_fields iprot record{f_UpdateResource_result_notFoundException=Just s}
        else do
          skip iprot _t673
          read_UpdateResource_result_fields iprot record
      _ -> do
        skip iprot _t673
        readFieldEnd iprot
        read_UpdateResource_result_fields iprot record
read_UpdateResource_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateResource_result_fields iprot (UpdateResource_result{f_UpdateResource_result_success=Nothing,f_UpdateResource_result_userException=Nothing,f_UpdateResource_result_systemException=Nothing,f_UpdateResource_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceData_args = GetResourceData_args{f_GetResourceData_args_authenticationToken :: Maybe String,f_GetResourceData_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetResourceData_args oprot record = do
  writeStructBegin oprot "GetResourceData_args"
  case f_GetResourceData_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceData_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceData_args_fields iprot record = do
  (_,_t678,_id679) <- readFieldBegin iprot
  if _t678 == T_STOP then return record else
    case _id679 of 
      1 -> if _t678 == T_STRING then do
        s <- readString iprot
        read_GetResourceData_args_fields iprot record{f_GetResourceData_args_authenticationToken=Just s}
        else do
          skip iprot _t678
          read_GetResourceData_args_fields iprot record
      2 -> if _t678 == T_STRING then do
        s <- readString iprot
        read_GetResourceData_args_fields iprot record{f_GetResourceData_args_guid=Just s}
        else do
          skip iprot _t678
          read_GetResourceData_args_fields iprot record
      _ -> do
        skip iprot _t678
        readFieldEnd iprot
        read_GetResourceData_args_fields iprot record
read_GetResourceData_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceData_args_fields iprot (GetResourceData_args{f_GetResourceData_args_authenticationToken=Nothing,f_GetResourceData_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetResourceData_result = GetResourceData_result{f_GetResourceData_result_success :: Maybe ByteString,f_GetResourceData_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceData_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceData_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceData_result oprot record = do
  writeStructBegin oprot "GetResourceData_result"
  case f_GetResourceData_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_GetResourceData_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceData_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceData_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceData_result_fields iprot record = do
  (_,_t683,_id684) <- readFieldBegin iprot
  if _t683 == T_STOP then return record else
    case _id684 of 
      0 -> if _t683 == T_STRING then do
        s <- readBinary iprot
        read_GetResourceData_result_fields iprot record{f_GetResourceData_result_success=Just s}
        else do
          skip iprot _t683
          read_GetResourceData_result_fields iprot record
      1 -> if _t683 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceData_result_fields iprot record{f_GetResourceData_result_userException=Just s}
        else do
          skip iprot _t683
          read_GetResourceData_result_fields iprot record
      2 -> if _t683 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceData_result_fields iprot record{f_GetResourceData_result_systemException=Just s}
        else do
          skip iprot _t683
          read_GetResourceData_result_fields iprot record
      3 -> if _t683 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceData_result_fields iprot record{f_GetResourceData_result_notFoundException=Just s}
        else do
          skip iprot _t683
          read_GetResourceData_result_fields iprot record
      _ -> do
        skip iprot _t683
        readFieldEnd iprot
        read_GetResourceData_result_fields iprot record
read_GetResourceData_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceData_result_fields iprot (GetResourceData_result{f_GetResourceData_result_success=Nothing,f_GetResourceData_result_userException=Nothing,f_GetResourceData_result_systemException=Nothing,f_GetResourceData_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceByHash_args = GetResourceByHash_args{f_GetResourceByHash_args_authenticationToken :: Maybe String,f_GetResourceByHash_args_noteGuid :: Maybe String,f_GetResourceByHash_args_contentHash :: Maybe ByteString,f_GetResourceByHash_args_withData :: Maybe Bool,f_GetResourceByHash_args_withRecognition :: Maybe Bool,f_GetResourceByHash_args_withAlternateData :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_GetResourceByHash_args oprot record = do
  writeStructBegin oprot "GetResourceByHash_args"
  case f_GetResourceByHash_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_args_noteGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_args_contentHash record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("contentHash",T_STRING,3)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_args_withData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withData",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_args_withRecognition record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withRecognition",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_args_withAlternateData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("withAlternateData",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceByHash_args_fields iprot record = do
  (_,_t688,_id689) <- readFieldBegin iprot
  if _t688 == T_STOP then return record else
    case _id689 of 
      1 -> if _t688 == T_STRING then do
        s <- readString iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_authenticationToken=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      2 -> if _t688 == T_STRING then do
        s <- readString iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_noteGuid=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      3 -> if _t688 == T_STRING then do
        s <- readBinary iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_contentHash=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      4 -> if _t688 == T_BOOL then do
        s <- readBool iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_withData=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      5 -> if _t688 == T_BOOL then do
        s <- readBool iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_withRecognition=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      6 -> if _t688 == T_BOOL then do
        s <- readBool iprot
        read_GetResourceByHash_args_fields iprot record{f_GetResourceByHash_args_withAlternateData=Just s}
        else do
          skip iprot _t688
          read_GetResourceByHash_args_fields iprot record
      _ -> do
        skip iprot _t688
        readFieldEnd iprot
        read_GetResourceByHash_args_fields iprot record
read_GetResourceByHash_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceByHash_args_fields iprot (GetResourceByHash_args{f_GetResourceByHash_args_authenticationToken=Nothing,f_GetResourceByHash_args_noteGuid=Nothing,f_GetResourceByHash_args_contentHash=Nothing,f_GetResourceByHash_args_withData=Nothing,f_GetResourceByHash_args_withRecognition=Nothing,f_GetResourceByHash_args_withAlternateData=Nothing})
  readStructEnd iprot
  return record
data GetResourceByHash_result = GetResourceByHash_result{f_GetResourceByHash_result_success :: Maybe Types_Types.Resource,f_GetResourceByHash_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceByHash_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceByHash_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceByHash_result oprot record = do
  writeStructBegin oprot "GetResourceByHash_result"
  case f_GetResourceByHash_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Resource oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceByHash_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceByHash_result_fields iprot record = do
  (_,_t693,_id694) <- readFieldBegin iprot
  if _t693 == T_STOP then return record else
    case _id694 of 
      0 -> if _t693 == T_STRUCT then do
        s <- (read_Resource iprot)
        read_GetResourceByHash_result_fields iprot record{f_GetResourceByHash_result_success=Just s}
        else do
          skip iprot _t693
          read_GetResourceByHash_result_fields iprot record
      1 -> if _t693 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceByHash_result_fields iprot record{f_GetResourceByHash_result_userException=Just s}
        else do
          skip iprot _t693
          read_GetResourceByHash_result_fields iprot record
      2 -> if _t693 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceByHash_result_fields iprot record{f_GetResourceByHash_result_systemException=Just s}
        else do
          skip iprot _t693
          read_GetResourceByHash_result_fields iprot record
      3 -> if _t693 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceByHash_result_fields iprot record{f_GetResourceByHash_result_notFoundException=Just s}
        else do
          skip iprot _t693
          read_GetResourceByHash_result_fields iprot record
      _ -> do
        skip iprot _t693
        readFieldEnd iprot
        read_GetResourceByHash_result_fields iprot record
read_GetResourceByHash_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceByHash_result_fields iprot (GetResourceByHash_result{f_GetResourceByHash_result_success=Nothing,f_GetResourceByHash_result_userException=Nothing,f_GetResourceByHash_result_systemException=Nothing,f_GetResourceByHash_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceRecognition_args = GetResourceRecognition_args{f_GetResourceRecognition_args_authenticationToken :: Maybe String,f_GetResourceRecognition_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetResourceRecognition_args oprot record = do
  writeStructBegin oprot "GetResourceRecognition_args"
  case f_GetResourceRecognition_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceRecognition_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceRecognition_args_fields iprot record = do
  (_,_t698,_id699) <- readFieldBegin iprot
  if _t698 == T_STOP then return record else
    case _id699 of 
      1 -> if _t698 == T_STRING then do
        s <- readString iprot
        read_GetResourceRecognition_args_fields iprot record{f_GetResourceRecognition_args_authenticationToken=Just s}
        else do
          skip iprot _t698
          read_GetResourceRecognition_args_fields iprot record
      2 -> if _t698 == T_STRING then do
        s <- readString iprot
        read_GetResourceRecognition_args_fields iprot record{f_GetResourceRecognition_args_guid=Just s}
        else do
          skip iprot _t698
          read_GetResourceRecognition_args_fields iprot record
      _ -> do
        skip iprot _t698
        readFieldEnd iprot
        read_GetResourceRecognition_args_fields iprot record
read_GetResourceRecognition_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceRecognition_args_fields iprot (GetResourceRecognition_args{f_GetResourceRecognition_args_authenticationToken=Nothing,f_GetResourceRecognition_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetResourceRecognition_result = GetResourceRecognition_result{f_GetResourceRecognition_result_success :: Maybe ByteString,f_GetResourceRecognition_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceRecognition_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceRecognition_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceRecognition_result oprot record = do
  writeStructBegin oprot "GetResourceRecognition_result"
  case f_GetResourceRecognition_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_GetResourceRecognition_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceRecognition_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceRecognition_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceRecognition_result_fields iprot record = do
  (_,_t703,_id704) <- readFieldBegin iprot
  if _t703 == T_STOP then return record else
    case _id704 of 
      0 -> if _t703 == T_STRING then do
        s <- readBinary iprot
        read_GetResourceRecognition_result_fields iprot record{f_GetResourceRecognition_result_success=Just s}
        else do
          skip iprot _t703
          read_GetResourceRecognition_result_fields iprot record
      1 -> if _t703 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceRecognition_result_fields iprot record{f_GetResourceRecognition_result_userException=Just s}
        else do
          skip iprot _t703
          read_GetResourceRecognition_result_fields iprot record
      2 -> if _t703 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceRecognition_result_fields iprot record{f_GetResourceRecognition_result_systemException=Just s}
        else do
          skip iprot _t703
          read_GetResourceRecognition_result_fields iprot record
      3 -> if _t703 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceRecognition_result_fields iprot record{f_GetResourceRecognition_result_notFoundException=Just s}
        else do
          skip iprot _t703
          read_GetResourceRecognition_result_fields iprot record
      _ -> do
        skip iprot _t703
        readFieldEnd iprot
        read_GetResourceRecognition_result_fields iprot record
read_GetResourceRecognition_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceRecognition_result_fields iprot (GetResourceRecognition_result{f_GetResourceRecognition_result_success=Nothing,f_GetResourceRecognition_result_userException=Nothing,f_GetResourceRecognition_result_systemException=Nothing,f_GetResourceRecognition_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceAlternateData_args = GetResourceAlternateData_args{f_GetResourceAlternateData_args_authenticationToken :: Maybe String,f_GetResourceAlternateData_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetResourceAlternateData_args oprot record = do
  writeStructBegin oprot "GetResourceAlternateData_args"
  case f_GetResourceAlternateData_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAlternateData_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceAlternateData_args_fields iprot record = do
  (_,_t708,_id709) <- readFieldBegin iprot
  if _t708 == T_STOP then return record else
    case _id709 of 
      1 -> if _t708 == T_STRING then do
        s <- readString iprot
        read_GetResourceAlternateData_args_fields iprot record{f_GetResourceAlternateData_args_authenticationToken=Just s}
        else do
          skip iprot _t708
          read_GetResourceAlternateData_args_fields iprot record
      2 -> if _t708 == T_STRING then do
        s <- readString iprot
        read_GetResourceAlternateData_args_fields iprot record{f_GetResourceAlternateData_args_guid=Just s}
        else do
          skip iprot _t708
          read_GetResourceAlternateData_args_fields iprot record
      _ -> do
        skip iprot _t708
        readFieldEnd iprot
        read_GetResourceAlternateData_args_fields iprot record
read_GetResourceAlternateData_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceAlternateData_args_fields iprot (GetResourceAlternateData_args{f_GetResourceAlternateData_args_authenticationToken=Nothing,f_GetResourceAlternateData_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetResourceAlternateData_result = GetResourceAlternateData_result{f_GetResourceAlternateData_result_success :: Maybe ByteString,f_GetResourceAlternateData_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceAlternateData_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceAlternateData_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceAlternateData_result oprot record = do
  writeStructBegin oprot "GetResourceAlternateData_result"
  case f_GetResourceAlternateData_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAlternateData_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAlternateData_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAlternateData_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceAlternateData_result_fields iprot record = do
  (_,_t713,_id714) <- readFieldBegin iprot
  if _t713 == T_STOP then return record else
    case _id714 of 
      0 -> if _t713 == T_STRING then do
        s <- readBinary iprot
        read_GetResourceAlternateData_result_fields iprot record{f_GetResourceAlternateData_result_success=Just s}
        else do
          skip iprot _t713
          read_GetResourceAlternateData_result_fields iprot record
      1 -> if _t713 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceAlternateData_result_fields iprot record{f_GetResourceAlternateData_result_userException=Just s}
        else do
          skip iprot _t713
          read_GetResourceAlternateData_result_fields iprot record
      2 -> if _t713 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceAlternateData_result_fields iprot record{f_GetResourceAlternateData_result_systemException=Just s}
        else do
          skip iprot _t713
          read_GetResourceAlternateData_result_fields iprot record
      3 -> if _t713 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceAlternateData_result_fields iprot record{f_GetResourceAlternateData_result_notFoundException=Just s}
        else do
          skip iprot _t713
          read_GetResourceAlternateData_result_fields iprot record
      _ -> do
        skip iprot _t713
        readFieldEnd iprot
        read_GetResourceAlternateData_result_fields iprot record
read_GetResourceAlternateData_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceAlternateData_result_fields iprot (GetResourceAlternateData_result{f_GetResourceAlternateData_result_success=Nothing,f_GetResourceAlternateData_result_userException=Nothing,f_GetResourceAlternateData_result_systemException=Nothing,f_GetResourceAlternateData_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetResourceAttributes_args = GetResourceAttributes_args{f_GetResourceAttributes_args_authenticationToken :: Maybe String,f_GetResourceAttributes_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetResourceAttributes_args oprot record = do
  writeStructBegin oprot "GetResourceAttributes_args"
  case f_GetResourceAttributes_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAttributes_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceAttributes_args_fields iprot record = do
  (_,_t718,_id719) <- readFieldBegin iprot
  if _t718 == T_STOP then return record else
    case _id719 of 
      1 -> if _t718 == T_STRING then do
        s <- readString iprot
        read_GetResourceAttributes_args_fields iprot record{f_GetResourceAttributes_args_authenticationToken=Just s}
        else do
          skip iprot _t718
          read_GetResourceAttributes_args_fields iprot record
      2 -> if _t718 == T_STRING then do
        s <- readString iprot
        read_GetResourceAttributes_args_fields iprot record{f_GetResourceAttributes_args_guid=Just s}
        else do
          skip iprot _t718
          read_GetResourceAttributes_args_fields iprot record
      _ -> do
        skip iprot _t718
        readFieldEnd iprot
        read_GetResourceAttributes_args_fields iprot record
read_GetResourceAttributes_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceAttributes_args_fields iprot (GetResourceAttributes_args{f_GetResourceAttributes_args_authenticationToken=Nothing,f_GetResourceAttributes_args_guid=Nothing})
  readStructEnd iprot
  return record
data GetResourceAttributes_result = GetResourceAttributes_result{f_GetResourceAttributes_result_success :: Maybe Types_Types.ResourceAttributes,f_GetResourceAttributes_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetResourceAttributes_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetResourceAttributes_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetResourceAttributes_result oprot record = do
  writeStructBegin oprot "GetResourceAttributes_result"
  case f_GetResourceAttributes_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_ResourceAttributes oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAttributes_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAttributes_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetResourceAttributes_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,3)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetResourceAttributes_result_fields iprot record = do
  (_,_t723,_id724) <- readFieldBegin iprot
  if _t723 == T_STOP then return record else
    case _id724 of 
      0 -> if _t723 == T_STRUCT then do
        s <- (read_ResourceAttributes iprot)
        read_GetResourceAttributes_result_fields iprot record{f_GetResourceAttributes_result_success=Just s}
        else do
          skip iprot _t723
          read_GetResourceAttributes_result_fields iprot record
      1 -> if _t723 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetResourceAttributes_result_fields iprot record{f_GetResourceAttributes_result_userException=Just s}
        else do
          skip iprot _t723
          read_GetResourceAttributes_result_fields iprot record
      2 -> if _t723 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetResourceAttributes_result_fields iprot record{f_GetResourceAttributes_result_systemException=Just s}
        else do
          skip iprot _t723
          read_GetResourceAttributes_result_fields iprot record
      3 -> if _t723 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetResourceAttributes_result_fields iprot record{f_GetResourceAttributes_result_notFoundException=Just s}
        else do
          skip iprot _t723
          read_GetResourceAttributes_result_fields iprot record
      _ -> do
        skip iprot _t723
        readFieldEnd iprot
        read_GetResourceAttributes_result_fields iprot record
read_GetResourceAttributes_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetResourceAttributes_result_fields iprot (GetResourceAttributes_result{f_GetResourceAttributes_result_success=Nothing,f_GetResourceAttributes_result_userException=Nothing,f_GetResourceAttributes_result_systemException=Nothing,f_GetResourceAttributes_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data GetAccountSize_args = GetAccountSize_args{f_GetAccountSize_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetAccountSize_args oprot record = do
  writeStructBegin oprot "GetAccountSize_args"
  case f_GetAccountSize_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetAccountSize_args_fields iprot record = do
  (_,_t728,_id729) <- readFieldBegin iprot
  if _t728 == T_STOP then return record else
    case _id729 of 
      1 -> if _t728 == T_STRING then do
        s <- readString iprot
        read_GetAccountSize_args_fields iprot record{f_GetAccountSize_args_authenticationToken=Just s}
        else do
          skip iprot _t728
          read_GetAccountSize_args_fields iprot record
      _ -> do
        skip iprot _t728
        readFieldEnd iprot
        read_GetAccountSize_args_fields iprot record
read_GetAccountSize_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetAccountSize_args_fields iprot (GetAccountSize_args{f_GetAccountSize_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data GetAccountSize_result = GetAccountSize_result{f_GetAccountSize_result_success :: Maybe Int64,f_GetAccountSize_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetAccountSize_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetAccountSize_result oprot record = do
  writeStructBegin oprot "GetAccountSize_result"
  case f_GetAccountSize_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I64,0)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_GetAccountSize_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetAccountSize_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetAccountSize_result_fields iprot record = do
  (_,_t733,_id734) <- readFieldBegin iprot
  if _t733 == T_STOP then return record else
    case _id734 of 
      0 -> if _t733 == T_I64 then do
        s <- readI64 iprot
        read_GetAccountSize_result_fields iprot record{f_GetAccountSize_result_success=Just s}
        else do
          skip iprot _t733
          read_GetAccountSize_result_fields iprot record
      1 -> if _t733 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetAccountSize_result_fields iprot record{f_GetAccountSize_result_userException=Just s}
        else do
          skip iprot _t733
          read_GetAccountSize_result_fields iprot record
      2 -> if _t733 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetAccountSize_result_fields iprot record{f_GetAccountSize_result_systemException=Just s}
        else do
          skip iprot _t733
          read_GetAccountSize_result_fields iprot record
      _ -> do
        skip iprot _t733
        readFieldEnd iprot
        read_GetAccountSize_result_fields iprot record
read_GetAccountSize_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetAccountSize_result_fields iprot (GetAccountSize_result{f_GetAccountSize_result_success=Nothing,f_GetAccountSize_result_userException=Nothing,f_GetAccountSize_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetAds_args = GetAds_args{f_GetAds_args_authenticationToken :: Maybe String,f_GetAds_args_adParameters :: Maybe AdParameters} deriving (Show,Eq,Ord,Typeable)
write_GetAds_args oprot record = do
  writeStructBegin oprot "GetAds_args"
  case f_GetAds_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetAds_args_adParameters record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("adParameters",T_STRUCT,2)
    write_AdParameters oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetAds_args_fields iprot record = do
  (_,_t738,_id739) <- readFieldBegin iprot
  if _t738 == T_STOP then return record else
    case _id739 of 
      1 -> if _t738 == T_STRING then do
        s <- readString iprot
        read_GetAds_args_fields iprot record{f_GetAds_args_authenticationToken=Just s}
        else do
          skip iprot _t738
          read_GetAds_args_fields iprot record
      2 -> if _t738 == T_STRUCT then do
        s <- (read_AdParameters iprot)
        read_GetAds_args_fields iprot record{f_GetAds_args_adParameters=Just s}
        else do
          skip iprot _t738
          read_GetAds_args_fields iprot record
      _ -> do
        skip iprot _t738
        readFieldEnd iprot
        read_GetAds_args_fields iprot record
read_GetAds_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetAds_args_fields iprot (GetAds_args{f_GetAds_args_authenticationToken=Nothing,f_GetAds_args_adParameters=Nothing})
  readStructEnd iprot
  return record
data GetAds_result = GetAds_result{f_GetAds_result_success :: Maybe [Types_Types.Ad],f_GetAds_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetAds_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetAds_result oprot record = do
  writeStructBegin oprot "GetAds_result"
  case f_GetAds_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter742:t) = do {Types_Types.write_Ad oprot _viter742;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_GetAds_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetAds_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetAds_result_fields iprot record = do
  (_,_t744,_id745) <- readFieldBegin iprot
  if _t744 == T_STOP then return record else
    case _id745 of 
      0 -> if _t744 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Ad iprot);r <- f (n-1); return $ v:r}} in do {(_etype749,_size746) <- readListBegin iprot; f _size746})
        read_GetAds_result_fields iprot record{f_GetAds_result_success=Just s}
        else do
          skip iprot _t744
          read_GetAds_result_fields iprot record
      1 -> if _t744 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetAds_result_fields iprot record{f_GetAds_result_userException=Just s}
        else do
          skip iprot _t744
          read_GetAds_result_fields iprot record
      2 -> if _t744 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetAds_result_fields iprot record{f_GetAds_result_systemException=Just s}
        else do
          skip iprot _t744
          read_GetAds_result_fields iprot record
      _ -> do
        skip iprot _t744
        readFieldEnd iprot
        read_GetAds_result_fields iprot record
read_GetAds_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetAds_result_fields iprot (GetAds_result{f_GetAds_result_success=Nothing,f_GetAds_result_userException=Nothing,f_GetAds_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetRandomAd_args = GetRandomAd_args{f_GetRandomAd_args_authenticationToken :: Maybe String,f_GetRandomAd_args_adParameters :: Maybe AdParameters} deriving (Show,Eq,Ord,Typeable)
write_GetRandomAd_args oprot record = do
  writeStructBegin oprot "GetRandomAd_args"
  case f_GetRandomAd_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_GetRandomAd_args_adParameters record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("adParameters",T_STRUCT,2)
    write_AdParameters oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetRandomAd_args_fields iprot record = do
  (_,_t754,_id755) <- readFieldBegin iprot
  if _t754 == T_STOP then return record else
    case _id755 of 
      1 -> if _t754 == T_STRING then do
        s <- readString iprot
        read_GetRandomAd_args_fields iprot record{f_GetRandomAd_args_authenticationToken=Just s}
        else do
          skip iprot _t754
          read_GetRandomAd_args_fields iprot record
      2 -> if _t754 == T_STRUCT then do
        s <- (read_AdParameters iprot)
        read_GetRandomAd_args_fields iprot record{f_GetRandomAd_args_adParameters=Just s}
        else do
          skip iprot _t754
          read_GetRandomAd_args_fields iprot record
      _ -> do
        skip iprot _t754
        readFieldEnd iprot
        read_GetRandomAd_args_fields iprot record
read_GetRandomAd_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetRandomAd_args_fields iprot (GetRandomAd_args{f_GetRandomAd_args_authenticationToken=Nothing,f_GetRandomAd_args_adParameters=Nothing})
  readStructEnd iprot
  return record
data GetRandomAd_result = GetRandomAd_result{f_GetRandomAd_result_success :: Maybe Types_Types.Ad,f_GetRandomAd_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetRandomAd_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetRandomAd_result oprot record = do
  writeStructBegin oprot "GetRandomAd_result"
  case f_GetRandomAd_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Ad oprot _v
    writeFieldEnd oprot}
  case f_GetRandomAd_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetRandomAd_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,2)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetRandomAd_result_fields iprot record = do
  (_,_t759,_id760) <- readFieldBegin iprot
  if _t759 == T_STOP then return record else
    case _id760 of 
      0 -> if _t759 == T_STRUCT then do
        s <- (read_Ad iprot)
        read_GetRandomAd_result_fields iprot record{f_GetRandomAd_result_success=Just s}
        else do
          skip iprot _t759
          read_GetRandomAd_result_fields iprot record
      1 -> if _t759 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetRandomAd_result_fields iprot record{f_GetRandomAd_result_userException=Just s}
        else do
          skip iprot _t759
          read_GetRandomAd_result_fields iprot record
      2 -> if _t759 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetRandomAd_result_fields iprot record{f_GetRandomAd_result_systemException=Just s}
        else do
          skip iprot _t759
          read_GetRandomAd_result_fields iprot record
      _ -> do
        skip iprot _t759
        readFieldEnd iprot
        read_GetRandomAd_result_fields iprot record
read_GetRandomAd_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetRandomAd_result_fields iprot (GetRandomAd_result{f_GetRandomAd_result_success=Nothing,f_GetRandomAd_result_userException=Nothing,f_GetRandomAd_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetPublicNotebook_args = GetPublicNotebook_args{f_GetPublicNotebook_args_userId :: Maybe Int32,f_GetPublicNotebook_args_publicUri :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetPublicNotebook_args oprot record = do
  writeStructBegin oprot "GetPublicNotebook_args"
  case f_GetPublicNotebook_args_userId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userId",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_GetPublicNotebook_args_publicUri record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("publicUri",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetPublicNotebook_args_fields iprot record = do
  (_,_t764,_id765) <- readFieldBegin iprot
  if _t764 == T_STOP then return record else
    case _id765 of 
      1 -> if _t764 == T_I32 then do
        s <- readI32 iprot
        read_GetPublicNotebook_args_fields iprot record{f_GetPublicNotebook_args_userId=Just s}
        else do
          skip iprot _t764
          read_GetPublicNotebook_args_fields iprot record
      2 -> if _t764 == T_STRING then do
        s <- readString iprot
        read_GetPublicNotebook_args_fields iprot record{f_GetPublicNotebook_args_publicUri=Just s}
        else do
          skip iprot _t764
          read_GetPublicNotebook_args_fields iprot record
      _ -> do
        skip iprot _t764
        readFieldEnd iprot
        read_GetPublicNotebook_args_fields iprot record
read_GetPublicNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetPublicNotebook_args_fields iprot (GetPublicNotebook_args{f_GetPublicNotebook_args_userId=Nothing,f_GetPublicNotebook_args_publicUri=Nothing})
  readStructEnd iprot
  return record
data GetPublicNotebook_result = GetPublicNotebook_result{f_GetPublicNotebook_result_success :: Maybe Types_Types.Notebook,f_GetPublicNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException,f_GetPublicNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException} deriving (Show,Eq,Ord,Typeable)
write_GetPublicNotebook_result oprot record = do
  writeStructBegin oprot "GetPublicNotebook_result"
  case f_GetPublicNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_Notebook oprot _v
    writeFieldEnd oprot}
  case f_GetPublicNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,1)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  case f_GetPublicNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetPublicNotebook_result_fields iprot record = do
  (_,_t769,_id770) <- readFieldBegin iprot
  if _t769 == T_STOP then return record else
    case _id770 of 
      0 -> if _t769 == T_STRUCT then do
        s <- (read_Notebook iprot)
        read_GetPublicNotebook_result_fields iprot record{f_GetPublicNotebook_result_success=Just s}
        else do
          skip iprot _t769
          read_GetPublicNotebook_result_fields iprot record
      1 -> if _t769 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetPublicNotebook_result_fields iprot record{f_GetPublicNotebook_result_systemException=Just s}
        else do
          skip iprot _t769
          read_GetPublicNotebook_result_fields iprot record
      2 -> if _t769 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetPublicNotebook_result_fields iprot record{f_GetPublicNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t769
          read_GetPublicNotebook_result_fields iprot record
      _ -> do
        skip iprot _t769
        readFieldEnd iprot
        read_GetPublicNotebook_result_fields iprot record
read_GetPublicNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetPublicNotebook_result_fields iprot (GetPublicNotebook_result{f_GetPublicNotebook_result_success=Nothing,f_GetPublicNotebook_result_systemException=Nothing,f_GetPublicNotebook_result_notFoundException=Nothing})
  readStructEnd iprot
  return record
data CreateSharedNotebook_args = CreateSharedNotebook_args{f_CreateSharedNotebook_args_authenticationToken :: Maybe String,f_CreateSharedNotebook_args_sharedNotebook :: Maybe Types_Types.SharedNotebook} deriving (Show,Eq,Ord,Typeable)
write_CreateSharedNotebook_args oprot record = do
  writeStructBegin oprot "CreateSharedNotebook_args"
  case f_CreateSharedNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateSharedNotebook_args_sharedNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sharedNotebook",T_STRUCT,2)
    Types_Types.write_SharedNotebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateSharedNotebook_args_fields iprot record = do
  (_,_t774,_id775) <- readFieldBegin iprot
  if _t774 == T_STOP then return record else
    case _id775 of 
      1 -> if _t774 == T_STRING then do
        s <- readString iprot
        read_CreateSharedNotebook_args_fields iprot record{f_CreateSharedNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t774
          read_CreateSharedNotebook_args_fields iprot record
      2 -> if _t774 == T_STRUCT then do
        s <- (read_SharedNotebook iprot)
        read_CreateSharedNotebook_args_fields iprot record{f_CreateSharedNotebook_args_sharedNotebook=Just s}
        else do
          skip iprot _t774
          read_CreateSharedNotebook_args_fields iprot record
      _ -> do
        skip iprot _t774
        readFieldEnd iprot
        read_CreateSharedNotebook_args_fields iprot record
read_CreateSharedNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateSharedNotebook_args_fields iprot (CreateSharedNotebook_args{f_CreateSharedNotebook_args_authenticationToken=Nothing,f_CreateSharedNotebook_args_sharedNotebook=Nothing})
  readStructEnd iprot
  return record
data CreateSharedNotebook_result = CreateSharedNotebook_result{f_CreateSharedNotebook_result_success :: Maybe Types_Types.SharedNotebook,f_CreateSharedNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateSharedNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_CreateSharedNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_CreateSharedNotebook_result oprot record = do
  writeStructBegin oprot "CreateSharedNotebook_result"
  case f_CreateSharedNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_SharedNotebook oprot _v
    writeFieldEnd oprot}
  case f_CreateSharedNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateSharedNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_CreateSharedNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateSharedNotebook_result_fields iprot record = do
  (_,_t779,_id780) <- readFieldBegin iprot
  if _t779 == T_STOP then return record else
    case _id780 of 
      0 -> if _t779 == T_STRUCT then do
        s <- (read_SharedNotebook iprot)
        read_CreateSharedNotebook_result_fields iprot record{f_CreateSharedNotebook_result_success=Just s}
        else do
          skip iprot _t779
          read_CreateSharedNotebook_result_fields iprot record
      1 -> if _t779 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateSharedNotebook_result_fields iprot record{f_CreateSharedNotebook_result_userException=Just s}
        else do
          skip iprot _t779
          read_CreateSharedNotebook_result_fields iprot record
      2 -> if _t779 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_CreateSharedNotebook_result_fields iprot record{f_CreateSharedNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t779
          read_CreateSharedNotebook_result_fields iprot record
      3 -> if _t779 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateSharedNotebook_result_fields iprot record{f_CreateSharedNotebook_result_systemException=Just s}
        else do
          skip iprot _t779
          read_CreateSharedNotebook_result_fields iprot record
      _ -> do
        skip iprot _t779
        readFieldEnd iprot
        read_CreateSharedNotebook_result_fields iprot record
read_CreateSharedNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateSharedNotebook_result_fields iprot (CreateSharedNotebook_result{f_CreateSharedNotebook_result_success=Nothing,f_CreateSharedNotebook_result_userException=Nothing,f_CreateSharedNotebook_result_notFoundException=Nothing,f_CreateSharedNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ListSharedNotebooks_args = ListSharedNotebooks_args{f_ListSharedNotebooks_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListSharedNotebooks_args oprot record = do
  writeStructBegin oprot "ListSharedNotebooks_args"
  case f_ListSharedNotebooks_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListSharedNotebooks_args_fields iprot record = do
  (_,_t784,_id785) <- readFieldBegin iprot
  if _t784 == T_STOP then return record else
    case _id785 of 
      1 -> if _t784 == T_STRING then do
        s <- readString iprot
        read_ListSharedNotebooks_args_fields iprot record{f_ListSharedNotebooks_args_authenticationToken=Just s}
        else do
          skip iprot _t784
          read_ListSharedNotebooks_args_fields iprot record
      _ -> do
        skip iprot _t784
        readFieldEnd iprot
        read_ListSharedNotebooks_args_fields iprot record
read_ListSharedNotebooks_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListSharedNotebooks_args_fields iprot (ListSharedNotebooks_args{f_ListSharedNotebooks_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ListSharedNotebooks_result = ListSharedNotebooks_result{f_ListSharedNotebooks_result_success :: Maybe [Types_Types.SharedNotebook],f_ListSharedNotebooks_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListSharedNotebooks_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_ListSharedNotebooks_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ListSharedNotebooks_result oprot record = do
  writeStructBegin oprot "ListSharedNotebooks_result"
  case f_ListSharedNotebooks_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter788:t) = do {Types_Types.write_SharedNotebook oprot _viter788;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListSharedNotebooks_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListSharedNotebooks_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_ListSharedNotebooks_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListSharedNotebooks_result_fields iprot record = do
  (_,_t790,_id791) <- readFieldBegin iprot
  if _t790 == T_STOP then return record else
    case _id791 of 
      0 -> if _t790 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_SharedNotebook iprot);r <- f (n-1); return $ v:r}} in do {(_etype795,_size792) <- readListBegin iprot; f _size792})
        read_ListSharedNotebooks_result_fields iprot record{f_ListSharedNotebooks_result_success=Just s}
        else do
          skip iprot _t790
          read_ListSharedNotebooks_result_fields iprot record
      1 -> if _t790 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListSharedNotebooks_result_fields iprot record{f_ListSharedNotebooks_result_userException=Just s}
        else do
          skip iprot _t790
          read_ListSharedNotebooks_result_fields iprot record
      2 -> if _t790 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ListSharedNotebooks_result_fields iprot record{f_ListSharedNotebooks_result_notFoundException=Just s}
        else do
          skip iprot _t790
          read_ListSharedNotebooks_result_fields iprot record
      3 -> if _t790 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListSharedNotebooks_result_fields iprot record{f_ListSharedNotebooks_result_systemException=Just s}
        else do
          skip iprot _t790
          read_ListSharedNotebooks_result_fields iprot record
      _ -> do
        skip iprot _t790
        readFieldEnd iprot
        read_ListSharedNotebooks_result_fields iprot record
read_ListSharedNotebooks_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListSharedNotebooks_result_fields iprot (ListSharedNotebooks_result{f_ListSharedNotebooks_result_success=Nothing,f_ListSharedNotebooks_result_userException=Nothing,f_ListSharedNotebooks_result_notFoundException=Nothing,f_ListSharedNotebooks_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ExpungeSharedNotebooks_args = ExpungeSharedNotebooks_args{f_ExpungeSharedNotebooks_args_authenticationToken :: Maybe String,f_ExpungeSharedNotebooks_args_sharedNotebookIds :: Maybe [Int64]} deriving (Show,Eq,Ord,Typeable)
write_ExpungeSharedNotebooks_args oprot record = do
  writeStructBegin oprot "ExpungeSharedNotebooks_args"
  case f_ExpungeSharedNotebooks_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSharedNotebooks_args_sharedNotebookIds record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sharedNotebookIds",T_LIST,2)
    (let {f [] = return (); f (_viter799:t) = do {writeI64 oprot _viter799;f t}} in do {writeListBegin oprot (T_I64,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeSharedNotebooks_args_fields iprot record = do
  (_,_t801,_id802) <- readFieldBegin iprot
  if _t801 == T_STOP then return record else
    case _id802 of 
      1 -> if _t801 == T_STRING then do
        s <- readString iprot
        read_ExpungeSharedNotebooks_args_fields iprot record{f_ExpungeSharedNotebooks_args_authenticationToken=Just s}
        else do
          skip iprot _t801
          read_ExpungeSharedNotebooks_args_fields iprot record
      2 -> if _t801 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readI64 iprot;r <- f (n-1); return $ v:r}} in do {(_etype806,_size803) <- readListBegin iprot; f _size803})
        read_ExpungeSharedNotebooks_args_fields iprot record{f_ExpungeSharedNotebooks_args_sharedNotebookIds=Just s}
        else do
          skip iprot _t801
          read_ExpungeSharedNotebooks_args_fields iprot record
      _ -> do
        skip iprot _t801
        readFieldEnd iprot
        read_ExpungeSharedNotebooks_args_fields iprot record
read_ExpungeSharedNotebooks_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeSharedNotebooks_args_fields iprot (ExpungeSharedNotebooks_args{f_ExpungeSharedNotebooks_args_authenticationToken=Nothing,f_ExpungeSharedNotebooks_args_sharedNotebookIds=Nothing})
  readStructEnd iprot
  return record
data ExpungeSharedNotebooks_result = ExpungeSharedNotebooks_result{f_ExpungeSharedNotebooks_result_success :: Maybe Int32,f_ExpungeSharedNotebooks_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeSharedNotebooks_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_ExpungeSharedNotebooks_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeSharedNotebooks_result oprot record = do
  writeStructBegin oprot "ExpungeSharedNotebooks_result"
  case f_ExpungeSharedNotebooks_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSharedNotebooks_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSharedNotebooks_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeSharedNotebooks_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeSharedNotebooks_result_fields iprot record = do
  (_,_t811,_id812) <- readFieldBegin iprot
  if _t811 == T_STOP then return record else
    case _id812 of 
      0 -> if _t811 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeSharedNotebooks_result_fields iprot record{f_ExpungeSharedNotebooks_result_success=Just s}
        else do
          skip iprot _t811
          read_ExpungeSharedNotebooks_result_fields iprot record
      1 -> if _t811 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeSharedNotebooks_result_fields iprot record{f_ExpungeSharedNotebooks_result_userException=Just s}
        else do
          skip iprot _t811
          read_ExpungeSharedNotebooks_result_fields iprot record
      2 -> if _t811 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeSharedNotebooks_result_fields iprot record{f_ExpungeSharedNotebooks_result_notFoundException=Just s}
        else do
          skip iprot _t811
          read_ExpungeSharedNotebooks_result_fields iprot record
      3 -> if _t811 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeSharedNotebooks_result_fields iprot record{f_ExpungeSharedNotebooks_result_systemException=Just s}
        else do
          skip iprot _t811
          read_ExpungeSharedNotebooks_result_fields iprot record
      _ -> do
        skip iprot _t811
        readFieldEnd iprot
        read_ExpungeSharedNotebooks_result_fields iprot record
read_ExpungeSharedNotebooks_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeSharedNotebooks_result_fields iprot (ExpungeSharedNotebooks_result{f_ExpungeSharedNotebooks_result_success=Nothing,f_ExpungeSharedNotebooks_result_userException=Nothing,f_ExpungeSharedNotebooks_result_notFoundException=Nothing,f_ExpungeSharedNotebooks_result_systemException=Nothing})
  readStructEnd iprot
  return record
data CreateLinkedNotebook_args = CreateLinkedNotebook_args{f_CreateLinkedNotebook_args_authenticationToken :: Maybe String,f_CreateLinkedNotebook_args_linkedNotebook :: Maybe Types_Types.LinkedNotebook} deriving (Show,Eq,Ord,Typeable)
write_CreateLinkedNotebook_args oprot record = do
  writeStructBegin oprot "CreateLinkedNotebook_args"
  case f_CreateLinkedNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_CreateLinkedNotebook_args_linkedNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("linkedNotebook",T_STRUCT,2)
    Types_Types.write_LinkedNotebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateLinkedNotebook_args_fields iprot record = do
  (_,_t816,_id817) <- readFieldBegin iprot
  if _t816 == T_STOP then return record else
    case _id817 of 
      1 -> if _t816 == T_STRING then do
        s <- readString iprot
        read_CreateLinkedNotebook_args_fields iprot record{f_CreateLinkedNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t816
          read_CreateLinkedNotebook_args_fields iprot record
      2 -> if _t816 == T_STRUCT then do
        s <- (read_LinkedNotebook iprot)
        read_CreateLinkedNotebook_args_fields iprot record{f_CreateLinkedNotebook_args_linkedNotebook=Just s}
        else do
          skip iprot _t816
          read_CreateLinkedNotebook_args_fields iprot record
      _ -> do
        skip iprot _t816
        readFieldEnd iprot
        read_CreateLinkedNotebook_args_fields iprot record
read_CreateLinkedNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateLinkedNotebook_args_fields iprot (CreateLinkedNotebook_args{f_CreateLinkedNotebook_args_authenticationToken=Nothing,f_CreateLinkedNotebook_args_linkedNotebook=Nothing})
  readStructEnd iprot
  return record
data CreateLinkedNotebook_result = CreateLinkedNotebook_result{f_CreateLinkedNotebook_result_success :: Maybe Types_Types.LinkedNotebook,f_CreateLinkedNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_CreateLinkedNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_CreateLinkedNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_CreateLinkedNotebook_result oprot record = do
  writeStructBegin oprot "CreateLinkedNotebook_result"
  case f_CreateLinkedNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_LinkedNotebook oprot _v
    writeFieldEnd oprot}
  case f_CreateLinkedNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_CreateLinkedNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_CreateLinkedNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_CreateLinkedNotebook_result_fields iprot record = do
  (_,_t821,_id822) <- readFieldBegin iprot
  if _t821 == T_STOP then return record else
    case _id822 of 
      0 -> if _t821 == T_STRUCT then do
        s <- (read_LinkedNotebook iprot)
        read_CreateLinkedNotebook_result_fields iprot record{f_CreateLinkedNotebook_result_success=Just s}
        else do
          skip iprot _t821
          read_CreateLinkedNotebook_result_fields iprot record
      1 -> if _t821 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_CreateLinkedNotebook_result_fields iprot record{f_CreateLinkedNotebook_result_userException=Just s}
        else do
          skip iprot _t821
          read_CreateLinkedNotebook_result_fields iprot record
      2 -> if _t821 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_CreateLinkedNotebook_result_fields iprot record{f_CreateLinkedNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t821
          read_CreateLinkedNotebook_result_fields iprot record
      3 -> if _t821 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_CreateLinkedNotebook_result_fields iprot record{f_CreateLinkedNotebook_result_systemException=Just s}
        else do
          skip iprot _t821
          read_CreateLinkedNotebook_result_fields iprot record
      _ -> do
        skip iprot _t821
        readFieldEnd iprot
        read_CreateLinkedNotebook_result_fields iprot record
read_CreateLinkedNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_CreateLinkedNotebook_result_fields iprot (CreateLinkedNotebook_result{f_CreateLinkedNotebook_result_success=Nothing,f_CreateLinkedNotebook_result_userException=Nothing,f_CreateLinkedNotebook_result_notFoundException=Nothing,f_CreateLinkedNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data UpdateLinkedNotebook_args = UpdateLinkedNotebook_args{f_UpdateLinkedNotebook_args_authenticationToken :: Maybe String,f_UpdateLinkedNotebook_args_linkedNotebook :: Maybe Types_Types.LinkedNotebook} deriving (Show,Eq,Ord,Typeable)
write_UpdateLinkedNotebook_args oprot record = do
  writeStructBegin oprot "UpdateLinkedNotebook_args"
  case f_UpdateLinkedNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UpdateLinkedNotebook_args_linkedNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("linkedNotebook",T_STRUCT,2)
    Types_Types.write_LinkedNotebook oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateLinkedNotebook_args_fields iprot record = do
  (_,_t826,_id827) <- readFieldBegin iprot
  if _t826 == T_STOP then return record else
    case _id827 of 
      1 -> if _t826 == T_STRING then do
        s <- readString iprot
        read_UpdateLinkedNotebook_args_fields iprot record{f_UpdateLinkedNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t826
          read_UpdateLinkedNotebook_args_fields iprot record
      2 -> if _t826 == T_STRUCT then do
        s <- (read_LinkedNotebook iprot)
        read_UpdateLinkedNotebook_args_fields iprot record{f_UpdateLinkedNotebook_args_linkedNotebook=Just s}
        else do
          skip iprot _t826
          read_UpdateLinkedNotebook_args_fields iprot record
      _ -> do
        skip iprot _t826
        readFieldEnd iprot
        read_UpdateLinkedNotebook_args_fields iprot record
read_UpdateLinkedNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateLinkedNotebook_args_fields iprot (UpdateLinkedNotebook_args{f_UpdateLinkedNotebook_args_authenticationToken=Nothing,f_UpdateLinkedNotebook_args_linkedNotebook=Nothing})
  readStructEnd iprot
  return record
data UpdateLinkedNotebook_result = UpdateLinkedNotebook_result{f_UpdateLinkedNotebook_result_success :: Maybe Int32,f_UpdateLinkedNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_UpdateLinkedNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_UpdateLinkedNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_UpdateLinkedNotebook_result oprot record = do
  writeStructBegin oprot "UpdateLinkedNotebook_result"
  case f_UpdateLinkedNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UpdateLinkedNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_UpdateLinkedNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_UpdateLinkedNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UpdateLinkedNotebook_result_fields iprot record = do
  (_,_t831,_id832) <- readFieldBegin iprot
  if _t831 == T_STOP then return record else
    case _id832 of 
      0 -> if _t831 == T_I32 then do
        s <- readI32 iprot
        read_UpdateLinkedNotebook_result_fields iprot record{f_UpdateLinkedNotebook_result_success=Just s}
        else do
          skip iprot _t831
          read_UpdateLinkedNotebook_result_fields iprot record
      1 -> if _t831 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_UpdateLinkedNotebook_result_fields iprot record{f_UpdateLinkedNotebook_result_userException=Just s}
        else do
          skip iprot _t831
          read_UpdateLinkedNotebook_result_fields iprot record
      2 -> if _t831 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_UpdateLinkedNotebook_result_fields iprot record{f_UpdateLinkedNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t831
          read_UpdateLinkedNotebook_result_fields iprot record
      3 -> if _t831 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_UpdateLinkedNotebook_result_fields iprot record{f_UpdateLinkedNotebook_result_systemException=Just s}
        else do
          skip iprot _t831
          read_UpdateLinkedNotebook_result_fields iprot record
      _ -> do
        skip iprot _t831
        readFieldEnd iprot
        read_UpdateLinkedNotebook_result_fields iprot record
read_UpdateLinkedNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_UpdateLinkedNotebook_result_fields iprot (UpdateLinkedNotebook_result{f_UpdateLinkedNotebook_result_success=Nothing,f_UpdateLinkedNotebook_result_userException=Nothing,f_UpdateLinkedNotebook_result_notFoundException=Nothing,f_UpdateLinkedNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ListLinkedNotebooks_args = ListLinkedNotebooks_args{f_ListLinkedNotebooks_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ListLinkedNotebooks_args oprot record = do
  writeStructBegin oprot "ListLinkedNotebooks_args"
  case f_ListLinkedNotebooks_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListLinkedNotebooks_args_fields iprot record = do
  (_,_t836,_id837) <- readFieldBegin iprot
  if _t836 == T_STOP then return record else
    case _id837 of 
      1 -> if _t836 == T_STRING then do
        s <- readString iprot
        read_ListLinkedNotebooks_args_fields iprot record{f_ListLinkedNotebooks_args_authenticationToken=Just s}
        else do
          skip iprot _t836
          read_ListLinkedNotebooks_args_fields iprot record
      _ -> do
        skip iprot _t836
        readFieldEnd iprot
        read_ListLinkedNotebooks_args_fields iprot record
read_ListLinkedNotebooks_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ListLinkedNotebooks_args_fields iprot (ListLinkedNotebooks_args{f_ListLinkedNotebooks_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data ListLinkedNotebooks_result = ListLinkedNotebooks_result{f_ListLinkedNotebooks_result_success :: Maybe [Types_Types.LinkedNotebook],f_ListLinkedNotebooks_result_userException :: Maybe Errors_Types.EDAMUserException,f_ListLinkedNotebooks_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_ListLinkedNotebooks_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ListLinkedNotebooks_result oprot record = do
  writeStructBegin oprot "ListLinkedNotebooks_result"
  case f_ListLinkedNotebooks_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter840:t) = do {Types_Types.write_LinkedNotebook oprot _viter840;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_ListLinkedNotebooks_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ListLinkedNotebooks_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_ListLinkedNotebooks_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ListLinkedNotebooks_result_fields iprot record = do
  (_,_t842,_id843) <- readFieldBegin iprot
  if _t842 == T_STOP then return record else
    case _id843 of 
      0 -> if _t842 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_LinkedNotebook iprot);r <- f (n-1); return $ v:r}} in do {(_etype847,_size844) <- readListBegin iprot; f _size844})
        read_ListLinkedNotebooks_result_fields iprot record{f_ListLinkedNotebooks_result_success=Just s}
        else do
          skip iprot _t842
          read_ListLinkedNotebooks_result_fields iprot record
      1 -> if _t842 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ListLinkedNotebooks_result_fields iprot record{f_ListLinkedNotebooks_result_userException=Just s}
        else do
          skip iprot _t842
          read_ListLinkedNotebooks_result_fields iprot record
      2 -> if _t842 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ListLinkedNotebooks_result_fields iprot record{f_ListLinkedNotebooks_result_notFoundException=Just s}
        else do
          skip iprot _t842
          read_ListLinkedNotebooks_result_fields iprot record
      3 -> if _t842 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ListLinkedNotebooks_result_fields iprot record{f_ListLinkedNotebooks_result_systemException=Just s}
        else do
          skip iprot _t842
          read_ListLinkedNotebooks_result_fields iprot record
      _ -> do
        skip iprot _t842
        readFieldEnd iprot
        read_ListLinkedNotebooks_result_fields iprot record
read_ListLinkedNotebooks_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ListLinkedNotebooks_result_fields iprot (ListLinkedNotebooks_result{f_ListLinkedNotebooks_result_success=Nothing,f_ListLinkedNotebooks_result_userException=Nothing,f_ListLinkedNotebooks_result_notFoundException=Nothing,f_ListLinkedNotebooks_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ExpungeLinkedNotebook_args = ExpungeLinkedNotebook_args{f_ExpungeLinkedNotebook_args_authenticationToken :: Maybe String,f_ExpungeLinkedNotebook_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ExpungeLinkedNotebook_args oprot record = do
  writeStructBegin oprot "ExpungeLinkedNotebook_args"
  case f_ExpungeLinkedNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ExpungeLinkedNotebook_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeLinkedNotebook_args_fields iprot record = do
  (_,_t852,_id853) <- readFieldBegin iprot
  if _t852 == T_STOP then return record else
    case _id853 of 
      1 -> if _t852 == T_STRING then do
        s <- readString iprot
        read_ExpungeLinkedNotebook_args_fields iprot record{f_ExpungeLinkedNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t852
          read_ExpungeLinkedNotebook_args_fields iprot record
      2 -> if _t852 == T_STRING then do
        s <- readString iprot
        read_ExpungeLinkedNotebook_args_fields iprot record{f_ExpungeLinkedNotebook_args_guid=Just s}
        else do
          skip iprot _t852
          read_ExpungeLinkedNotebook_args_fields iprot record
      _ -> do
        skip iprot _t852
        readFieldEnd iprot
        read_ExpungeLinkedNotebook_args_fields iprot record
read_ExpungeLinkedNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeLinkedNotebook_args_fields iprot (ExpungeLinkedNotebook_args{f_ExpungeLinkedNotebook_args_authenticationToken=Nothing,f_ExpungeLinkedNotebook_args_guid=Nothing})
  readStructEnd iprot
  return record
data ExpungeLinkedNotebook_result = ExpungeLinkedNotebook_result{f_ExpungeLinkedNotebook_result_success :: Maybe Int32,f_ExpungeLinkedNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_ExpungeLinkedNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_ExpungeLinkedNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ExpungeLinkedNotebook_result oprot record = do
  writeStructBegin oprot "ExpungeLinkedNotebook_result"
  case f_ExpungeLinkedNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_ExpungeLinkedNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeLinkedNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_ExpungeLinkedNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ExpungeLinkedNotebook_result_fields iprot record = do
  (_,_t857,_id858) <- readFieldBegin iprot
  if _t857 == T_STOP then return record else
    case _id858 of 
      0 -> if _t857 == T_I32 then do
        s <- readI32 iprot
        read_ExpungeLinkedNotebook_result_fields iprot record{f_ExpungeLinkedNotebook_result_success=Just s}
        else do
          skip iprot _t857
          read_ExpungeLinkedNotebook_result_fields iprot record
      1 -> if _t857 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ExpungeLinkedNotebook_result_fields iprot record{f_ExpungeLinkedNotebook_result_userException=Just s}
        else do
          skip iprot _t857
          read_ExpungeLinkedNotebook_result_fields iprot record
      2 -> if _t857 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ExpungeLinkedNotebook_result_fields iprot record{f_ExpungeLinkedNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t857
          read_ExpungeLinkedNotebook_result_fields iprot record
      3 -> if _t857 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ExpungeLinkedNotebook_result_fields iprot record{f_ExpungeLinkedNotebook_result_systemException=Just s}
        else do
          skip iprot _t857
          read_ExpungeLinkedNotebook_result_fields iprot record
      _ -> do
        skip iprot _t857
        readFieldEnd iprot
        read_ExpungeLinkedNotebook_result_fields iprot record
read_ExpungeLinkedNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ExpungeLinkedNotebook_result_fields iprot (ExpungeLinkedNotebook_result{f_ExpungeLinkedNotebook_result_success=Nothing,f_ExpungeLinkedNotebook_result_userException=Nothing,f_ExpungeLinkedNotebook_result_notFoundException=Nothing,f_ExpungeLinkedNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data AuthenticateToSharedNotebook_args = AuthenticateToSharedNotebook_args{f_AuthenticateToSharedNotebook_args_shareKey :: Maybe String,f_AuthenticateToSharedNotebook_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_AuthenticateToSharedNotebook_args oprot record = do
  writeStructBegin oprot "AuthenticateToSharedNotebook_args"
  case f_AuthenticateToSharedNotebook_args_shareKey record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shareKey",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNotebook_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AuthenticateToSharedNotebook_args_fields iprot record = do
  (_,_t862,_id863) <- readFieldBegin iprot
  if _t862 == T_STOP then return record else
    case _id863 of 
      1 -> if _t862 == T_STRING then do
        s <- readString iprot
        read_AuthenticateToSharedNotebook_args_fields iprot record{f_AuthenticateToSharedNotebook_args_shareKey=Just s}
        else do
          skip iprot _t862
          read_AuthenticateToSharedNotebook_args_fields iprot record
      2 -> if _t862 == T_STRING then do
        s <- readString iprot
        read_AuthenticateToSharedNotebook_args_fields iprot record{f_AuthenticateToSharedNotebook_args_authenticationToken=Just s}
        else do
          skip iprot _t862
          read_AuthenticateToSharedNotebook_args_fields iprot record
      _ -> do
        skip iprot _t862
        readFieldEnd iprot
        read_AuthenticateToSharedNotebook_args_fields iprot record
read_AuthenticateToSharedNotebook_args iprot = do
  _ <- readStructBegin iprot
  record <- read_AuthenticateToSharedNotebook_args_fields iprot (AuthenticateToSharedNotebook_args{f_AuthenticateToSharedNotebook_args_shareKey=Nothing,f_AuthenticateToSharedNotebook_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data AuthenticateToSharedNotebook_result = AuthenticateToSharedNotebook_result{f_AuthenticateToSharedNotebook_result_success :: Maybe UserStore_Types.AuthenticationResult,f_AuthenticateToSharedNotebook_result_userException :: Maybe Errors_Types.EDAMUserException,f_AuthenticateToSharedNotebook_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_AuthenticateToSharedNotebook_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_AuthenticateToSharedNotebook_result oprot record = do
  writeStructBegin oprot "AuthenticateToSharedNotebook_result"
  case f_AuthenticateToSharedNotebook_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    UserStore_Types.write_AuthenticationResult oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNotebook_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNotebook_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNotebook_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AuthenticateToSharedNotebook_result_fields iprot record = do
  (_,_t867,_id868) <- readFieldBegin iprot
  if _t867 == T_STOP then return record else
    case _id868 of 
      0 -> if _t867 == T_STRUCT then do
        s <- (read_AuthenticationResult iprot)
        read_AuthenticateToSharedNotebook_result_fields iprot record{f_AuthenticateToSharedNotebook_result_success=Just s}
        else do
          skip iprot _t867
          read_AuthenticateToSharedNotebook_result_fields iprot record
      1 -> if _t867 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_AuthenticateToSharedNotebook_result_fields iprot record{f_AuthenticateToSharedNotebook_result_userException=Just s}
        else do
          skip iprot _t867
          read_AuthenticateToSharedNotebook_result_fields iprot record
      2 -> if _t867 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_AuthenticateToSharedNotebook_result_fields iprot record{f_AuthenticateToSharedNotebook_result_notFoundException=Just s}
        else do
          skip iprot _t867
          read_AuthenticateToSharedNotebook_result_fields iprot record
      3 -> if _t867 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_AuthenticateToSharedNotebook_result_fields iprot record{f_AuthenticateToSharedNotebook_result_systemException=Just s}
        else do
          skip iprot _t867
          read_AuthenticateToSharedNotebook_result_fields iprot record
      _ -> do
        skip iprot _t867
        readFieldEnd iprot
        read_AuthenticateToSharedNotebook_result_fields iprot record
read_AuthenticateToSharedNotebook_result iprot = do
  _ <- readStructBegin iprot
  record <- read_AuthenticateToSharedNotebook_result_fields iprot (AuthenticateToSharedNotebook_result{f_AuthenticateToSharedNotebook_result_success=Nothing,f_AuthenticateToSharedNotebook_result_userException=Nothing,f_AuthenticateToSharedNotebook_result_notFoundException=Nothing,f_AuthenticateToSharedNotebook_result_systemException=Nothing})
  readStructEnd iprot
  return record
data GetSharedNotebookByAuth_args = GetSharedNotebookByAuth_args{f_GetSharedNotebookByAuth_args_authenticationToken :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_GetSharedNotebookByAuth_args oprot record = do
  writeStructBegin oprot "GetSharedNotebookByAuth_args"
  case f_GetSharedNotebookByAuth_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSharedNotebookByAuth_args_fields iprot record = do
  (_,_t872,_id873) <- readFieldBegin iprot
  if _t872 == T_STOP then return record else
    case _id873 of 
      1 -> if _t872 == T_STRING then do
        s <- readString iprot
        read_GetSharedNotebookByAuth_args_fields iprot record{f_GetSharedNotebookByAuth_args_authenticationToken=Just s}
        else do
          skip iprot _t872
          read_GetSharedNotebookByAuth_args_fields iprot record
      _ -> do
        skip iprot _t872
        readFieldEnd iprot
        read_GetSharedNotebookByAuth_args_fields iprot record
read_GetSharedNotebookByAuth_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSharedNotebookByAuth_args_fields iprot (GetSharedNotebookByAuth_args{f_GetSharedNotebookByAuth_args_authenticationToken=Nothing})
  readStructEnd iprot
  return record
data GetSharedNotebookByAuth_result = GetSharedNotebookByAuth_result{f_GetSharedNotebookByAuth_result_success :: Maybe Types_Types.SharedNotebook,f_GetSharedNotebookByAuth_result_userException :: Maybe Errors_Types.EDAMUserException,f_GetSharedNotebookByAuth_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_GetSharedNotebookByAuth_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_GetSharedNotebookByAuth_result oprot record = do
  writeStructBegin oprot "GetSharedNotebookByAuth_result"
  case f_GetSharedNotebookByAuth_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    Types_Types.write_SharedNotebook oprot _v
    writeFieldEnd oprot}
  case f_GetSharedNotebookByAuth_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_GetSharedNotebookByAuth_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_GetSharedNotebookByAuth_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetSharedNotebookByAuth_result_fields iprot record = do
  (_,_t877,_id878) <- readFieldBegin iprot
  if _t877 == T_STOP then return record else
    case _id878 of 
      0 -> if _t877 == T_STRUCT then do
        s <- (read_SharedNotebook iprot)
        read_GetSharedNotebookByAuth_result_fields iprot record{f_GetSharedNotebookByAuth_result_success=Just s}
        else do
          skip iprot _t877
          read_GetSharedNotebookByAuth_result_fields iprot record
      1 -> if _t877 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_GetSharedNotebookByAuth_result_fields iprot record{f_GetSharedNotebookByAuth_result_userException=Just s}
        else do
          skip iprot _t877
          read_GetSharedNotebookByAuth_result_fields iprot record
      2 -> if _t877 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_GetSharedNotebookByAuth_result_fields iprot record{f_GetSharedNotebookByAuth_result_notFoundException=Just s}
        else do
          skip iprot _t877
          read_GetSharedNotebookByAuth_result_fields iprot record
      3 -> if _t877 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_GetSharedNotebookByAuth_result_fields iprot record{f_GetSharedNotebookByAuth_result_systemException=Just s}
        else do
          skip iprot _t877
          read_GetSharedNotebookByAuth_result_fields iprot record
      _ -> do
        skip iprot _t877
        readFieldEnd iprot
        read_GetSharedNotebookByAuth_result_fields iprot record
read_GetSharedNotebookByAuth_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetSharedNotebookByAuth_result_fields iprot (GetSharedNotebookByAuth_result{f_GetSharedNotebookByAuth_result_success=Nothing,f_GetSharedNotebookByAuth_result_userException=Nothing,f_GetSharedNotebookByAuth_result_notFoundException=Nothing,f_GetSharedNotebookByAuth_result_systemException=Nothing})
  readStructEnd iprot
  return record
data EmailNote_args = EmailNote_args{f_EmailNote_args_authenticationToken :: Maybe String,f_EmailNote_args_parameters :: Maybe NoteEmailParameters} deriving (Show,Eq,Ord,Typeable)
write_EmailNote_args oprot record = do
  writeStructBegin oprot "EmailNote_args"
  case f_EmailNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_EmailNote_args_parameters record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("parameters",T_STRUCT,2)
    write_NoteEmailParameters oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_EmailNote_args_fields iprot record = do
  (_,_t882,_id883) <- readFieldBegin iprot
  if _t882 == T_STOP then return record else
    case _id883 of 
      1 -> if _t882 == T_STRING then do
        s <- readString iprot
        read_EmailNote_args_fields iprot record{f_EmailNote_args_authenticationToken=Just s}
        else do
          skip iprot _t882
          read_EmailNote_args_fields iprot record
      2 -> if _t882 == T_STRUCT then do
        s <- (read_NoteEmailParameters iprot)
        read_EmailNote_args_fields iprot record{f_EmailNote_args_parameters=Just s}
        else do
          skip iprot _t882
          read_EmailNote_args_fields iprot record
      _ -> do
        skip iprot _t882
        readFieldEnd iprot
        read_EmailNote_args_fields iprot record
read_EmailNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_EmailNote_args_fields iprot (EmailNote_args{f_EmailNote_args_authenticationToken=Nothing,f_EmailNote_args_parameters=Nothing})
  readStructEnd iprot
  return record
data EmailNote_result = EmailNote_result{f_EmailNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_EmailNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_EmailNote_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_EmailNote_result oprot record = do
  writeStructBegin oprot "EmailNote_result"
  case f_EmailNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_EmailNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_EmailNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_EmailNote_result_fields iprot record = do
  (_,_t887,_id888) <- readFieldBegin iprot
  if _t887 == T_STOP then return record else
    case _id888 of 
      1 -> if _t887 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_EmailNote_result_fields iprot record{f_EmailNote_result_userException=Just s}
        else do
          skip iprot _t887
          read_EmailNote_result_fields iprot record
      2 -> if _t887 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_EmailNote_result_fields iprot record{f_EmailNote_result_notFoundException=Just s}
        else do
          skip iprot _t887
          read_EmailNote_result_fields iprot record
      3 -> if _t887 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_EmailNote_result_fields iprot record{f_EmailNote_result_systemException=Just s}
        else do
          skip iprot _t887
          read_EmailNote_result_fields iprot record
      _ -> do
        skip iprot _t887
        readFieldEnd iprot
        read_EmailNote_result_fields iprot record
read_EmailNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_EmailNote_result_fields iprot (EmailNote_result{f_EmailNote_result_userException=Nothing,f_EmailNote_result_notFoundException=Nothing,f_EmailNote_result_systemException=Nothing})
  readStructEnd iprot
  return record
data ShareNote_args = ShareNote_args{f_ShareNote_args_authenticationToken :: Maybe String,f_ShareNote_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_ShareNote_args oprot record = do
  writeStructBegin oprot "ShareNote_args"
  case f_ShareNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ShareNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ShareNote_args_fields iprot record = do
  (_,_t892,_id893) <- readFieldBegin iprot
  if _t892 == T_STOP then return record else
    case _id893 of 
      1 -> if _t892 == T_STRING then do
        s <- readString iprot
        read_ShareNote_args_fields iprot record{f_ShareNote_args_authenticationToken=Just s}
        else do
          skip iprot _t892
          read_ShareNote_args_fields iprot record
      2 -> if _t892 == T_STRING then do
        s <- readString iprot
        read_ShareNote_args_fields iprot record{f_ShareNote_args_guid=Just s}
        else do
          skip iprot _t892
          read_ShareNote_args_fields iprot record
      _ -> do
        skip iprot _t892
        readFieldEnd iprot
        read_ShareNote_args_fields iprot record
read_ShareNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ShareNote_args_fields iprot (ShareNote_args{f_ShareNote_args_authenticationToken=Nothing,f_ShareNote_args_guid=Nothing})
  readStructEnd iprot
  return record
data ShareNote_result = ShareNote_result{f_ShareNote_result_success :: Maybe String,f_ShareNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_ShareNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_ShareNote_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_ShareNote_result oprot record = do
  writeStructBegin oprot "ShareNote_result"
  case f_ShareNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRING,0)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ShareNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_ShareNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_ShareNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ShareNote_result_fields iprot record = do
  (_,_t897,_id898) <- readFieldBegin iprot
  if _t897 == T_STOP then return record else
    case _id898 of 
      0 -> if _t897 == T_STRING then do
        s <- readString iprot
        read_ShareNote_result_fields iprot record{f_ShareNote_result_success=Just s}
        else do
          skip iprot _t897
          read_ShareNote_result_fields iprot record
      1 -> if _t897 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_ShareNote_result_fields iprot record{f_ShareNote_result_userException=Just s}
        else do
          skip iprot _t897
          read_ShareNote_result_fields iprot record
      2 -> if _t897 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_ShareNote_result_fields iprot record{f_ShareNote_result_notFoundException=Just s}
        else do
          skip iprot _t897
          read_ShareNote_result_fields iprot record
      3 -> if _t897 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_ShareNote_result_fields iprot record{f_ShareNote_result_systemException=Just s}
        else do
          skip iprot _t897
          read_ShareNote_result_fields iprot record
      _ -> do
        skip iprot _t897
        readFieldEnd iprot
        read_ShareNote_result_fields iprot record
read_ShareNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ShareNote_result_fields iprot (ShareNote_result{f_ShareNote_result_success=Nothing,f_ShareNote_result_userException=Nothing,f_ShareNote_result_notFoundException=Nothing,f_ShareNote_result_systemException=Nothing})
  readStructEnd iprot
  return record
data StopSharingNote_args = StopSharingNote_args{f_StopSharingNote_args_authenticationToken :: Maybe String,f_StopSharingNote_args_guid :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_StopSharingNote_args oprot record = do
  writeStructBegin oprot "StopSharingNote_args"
  case f_StopSharingNote_args_authenticationToken record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("authenticationToken",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_StopSharingNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_StopSharingNote_args_fields iprot record = do
  (_,_t902,_id903) <- readFieldBegin iprot
  if _t902 == T_STOP then return record else
    case _id903 of 
      1 -> if _t902 == T_STRING then do
        s <- readString iprot
        read_StopSharingNote_args_fields iprot record{f_StopSharingNote_args_authenticationToken=Just s}
        else do
          skip iprot _t902
          read_StopSharingNote_args_fields iprot record
      2 -> if _t902 == T_STRING then do
        s <- readString iprot
        read_StopSharingNote_args_fields iprot record{f_StopSharingNote_args_guid=Just s}
        else do
          skip iprot _t902
          read_StopSharingNote_args_fields iprot record
      _ -> do
        skip iprot _t902
        readFieldEnd iprot
        read_StopSharingNote_args_fields iprot record
read_StopSharingNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_StopSharingNote_args_fields iprot (StopSharingNote_args{f_StopSharingNote_args_authenticationToken=Nothing,f_StopSharingNote_args_guid=Nothing})
  readStructEnd iprot
  return record
data StopSharingNote_result = StopSharingNote_result{f_StopSharingNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_StopSharingNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_StopSharingNote_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_StopSharingNote_result oprot record = do
  writeStructBegin oprot "StopSharingNote_result"
  case f_StopSharingNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_StopSharingNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_StopSharingNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_StopSharingNote_result_fields iprot record = do
  (_,_t907,_id908) <- readFieldBegin iprot
  if _t907 == T_STOP then return record else
    case _id908 of 
      1 -> if _t907 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_StopSharingNote_result_fields iprot record{f_StopSharingNote_result_userException=Just s}
        else do
          skip iprot _t907
          read_StopSharingNote_result_fields iprot record
      2 -> if _t907 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_StopSharingNote_result_fields iprot record{f_StopSharingNote_result_notFoundException=Just s}
        else do
          skip iprot _t907
          read_StopSharingNote_result_fields iprot record
      3 -> if _t907 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_StopSharingNote_result_fields iprot record{f_StopSharingNote_result_systemException=Just s}
        else do
          skip iprot _t907
          read_StopSharingNote_result_fields iprot record
      _ -> do
        skip iprot _t907
        readFieldEnd iprot
        read_StopSharingNote_result_fields iprot record
read_StopSharingNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_StopSharingNote_result_fields iprot (StopSharingNote_result{f_StopSharingNote_result_userException=Nothing,f_StopSharingNote_result_notFoundException=Nothing,f_StopSharingNote_result_systemException=Nothing})
  readStructEnd iprot
  return record
data AuthenticateToSharedNote_args = AuthenticateToSharedNote_args{f_AuthenticateToSharedNote_args_guid :: Maybe String,f_AuthenticateToSharedNote_args_noteKey :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_AuthenticateToSharedNote_args oprot record = do
  writeStructBegin oprot "AuthenticateToSharedNote_args"
  case f_AuthenticateToSharedNote_args_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNote_args_noteKey record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteKey",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AuthenticateToSharedNote_args_fields iprot record = do
  (_,_t912,_id913) <- readFieldBegin iprot
  if _t912 == T_STOP then return record else
    case _id913 of 
      1 -> if _t912 == T_STRING then do
        s <- readString iprot
        read_AuthenticateToSharedNote_args_fields iprot record{f_AuthenticateToSharedNote_args_guid=Just s}
        else do
          skip iprot _t912
          read_AuthenticateToSharedNote_args_fields iprot record
      2 -> if _t912 == T_STRING then do
        s <- readString iprot
        read_AuthenticateToSharedNote_args_fields iprot record{f_AuthenticateToSharedNote_args_noteKey=Just s}
        else do
          skip iprot _t912
          read_AuthenticateToSharedNote_args_fields iprot record
      _ -> do
        skip iprot _t912
        readFieldEnd iprot
        read_AuthenticateToSharedNote_args_fields iprot record
read_AuthenticateToSharedNote_args iprot = do
  _ <- readStructBegin iprot
  record <- read_AuthenticateToSharedNote_args_fields iprot (AuthenticateToSharedNote_args{f_AuthenticateToSharedNote_args_guid=Nothing,f_AuthenticateToSharedNote_args_noteKey=Nothing})
  readStructEnd iprot
  return record
data AuthenticateToSharedNote_result = AuthenticateToSharedNote_result{f_AuthenticateToSharedNote_result_success :: Maybe UserStore_Types.AuthenticationResult,f_AuthenticateToSharedNote_result_userException :: Maybe Errors_Types.EDAMUserException,f_AuthenticateToSharedNote_result_notFoundException :: Maybe Errors_Types.EDAMNotFoundException,f_AuthenticateToSharedNote_result_systemException :: Maybe Errors_Types.EDAMSystemException} deriving (Show,Eq,Ord,Typeable)
write_AuthenticateToSharedNote_result oprot record = do
  writeStructBegin oprot "AuthenticateToSharedNote_result"
  case f_AuthenticateToSharedNote_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    UserStore_Types.write_AuthenticationResult oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNote_result_userException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userException",T_STRUCT,1)
    Errors_Types.write_EDAMUserException oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNote_result_notFoundException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notFoundException",T_STRUCT,2)
    Errors_Types.write_EDAMNotFoundException oprot _v
    writeFieldEnd oprot}
  case f_AuthenticateToSharedNote_result_systemException record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("systemException",T_STRUCT,3)
    Errors_Types.write_EDAMSystemException oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_AuthenticateToSharedNote_result_fields iprot record = do
  (_,_t917,_id918) <- readFieldBegin iprot
  if _t917 == T_STOP then return record else
    case _id918 of 
      0 -> if _t917 == T_STRUCT then do
        s <- (read_AuthenticationResult iprot)
        read_AuthenticateToSharedNote_result_fields iprot record{f_AuthenticateToSharedNote_result_success=Just s}
        else do
          skip iprot _t917
          read_AuthenticateToSharedNote_result_fields iprot record
      1 -> if _t917 == T_STRUCT then do
        s <- (read_EDAMUserException iprot)
        read_AuthenticateToSharedNote_result_fields iprot record{f_AuthenticateToSharedNote_result_userException=Just s}
        else do
          skip iprot _t917
          read_AuthenticateToSharedNote_result_fields iprot record
      2 -> if _t917 == T_STRUCT then do
        s <- (read_EDAMNotFoundException iprot)
        read_AuthenticateToSharedNote_result_fields iprot record{f_AuthenticateToSharedNote_result_notFoundException=Just s}
        else do
          skip iprot _t917
          read_AuthenticateToSharedNote_result_fields iprot record
      3 -> if _t917 == T_STRUCT then do
        s <- (read_EDAMSystemException iprot)
        read_AuthenticateToSharedNote_result_fields iprot record{f_AuthenticateToSharedNote_result_systemException=Just s}
        else do
          skip iprot _t917
          read_AuthenticateToSharedNote_result_fields iprot record
      _ -> do
        skip iprot _t917
        readFieldEnd iprot
        read_AuthenticateToSharedNote_result_fields iprot record
read_AuthenticateToSharedNote_result iprot = do
  _ <- readStructBegin iprot
  record <- read_AuthenticateToSharedNote_result_fields iprot (AuthenticateToSharedNote_result{f_AuthenticateToSharedNote_result_success=Nothing,f_AuthenticateToSharedNote_result_userException=Nothing,f_AuthenticateToSharedNote_result_notFoundException=Nothing,f_AuthenticateToSharedNote_result_systemException=Nothing})
  readStructEnd iprot
  return record
process_getSyncState (seqid, iprot, oprot, handler) = do
  args <- read_GetSyncState_args iprot
  readMessageEnd iprot
  rs <- return (GetSyncState_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getSyncState handler (f_GetSyncState_args_authenticationToken args)
        return rs{f_GetSyncState_result_success= Just res})
      (\e  -> 
        return rs{f_GetSyncState_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetSyncState_result_systemException =Just e}))
  writeMessageBegin oprot ("getSyncState", M_REPLY, seqid);
  write_GetSyncState_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getSyncChunk (seqid, iprot, oprot, handler) = do
  args <- read_GetSyncChunk_args iprot
  readMessageEnd iprot
  rs <- return (GetSyncChunk_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getSyncChunk handler (f_GetSyncChunk_args_authenticationToken args) (f_GetSyncChunk_args_afterUSN args) (f_GetSyncChunk_args_maxEntries args) (f_GetSyncChunk_args_fullSyncOnly args)
        return rs{f_GetSyncChunk_result_success= Just res})
      (\e  -> 
        return rs{f_GetSyncChunk_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetSyncChunk_result_systemException =Just e}))
  writeMessageBegin oprot ("getSyncChunk", M_REPLY, seqid);
  write_GetSyncChunk_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getLinkedNotebookSyncState (seqid, iprot, oprot, handler) = do
  args <- read_GetLinkedNotebookSyncState_args iprot
  readMessageEnd iprot
  rs <- return (GetLinkedNotebookSyncState_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getLinkedNotebookSyncState handler (f_GetLinkedNotebookSyncState_args_authenticationToken args) (f_GetLinkedNotebookSyncState_args_linkedNotebook args)
          return rs{f_GetLinkedNotebookSyncState_result_success= Just res})
        (\e  -> 
          return rs{f_GetLinkedNotebookSyncState_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetLinkedNotebookSyncState_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetLinkedNotebookSyncState_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getLinkedNotebookSyncState", M_REPLY, seqid);
  write_GetLinkedNotebookSyncState_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getLinkedNotebookSyncChunk (seqid, iprot, oprot, handler) = do
  args <- read_GetLinkedNotebookSyncChunk_args iprot
  readMessageEnd iprot
  rs <- return (GetLinkedNotebookSyncChunk_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getLinkedNotebookSyncChunk handler (f_GetLinkedNotebookSyncChunk_args_authenticationToken args) (f_GetLinkedNotebookSyncChunk_args_linkedNotebook args) (f_GetLinkedNotebookSyncChunk_args_afterUSN args) (f_GetLinkedNotebookSyncChunk_args_maxEntries args) (f_GetLinkedNotebookSyncChunk_args_fullSyncOnly args)
          return rs{f_GetLinkedNotebookSyncChunk_result_success= Just res})
        (\e  -> 
          return rs{f_GetLinkedNotebookSyncChunk_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetLinkedNotebookSyncChunk_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetLinkedNotebookSyncChunk_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getLinkedNotebookSyncChunk", M_REPLY, seqid);
  write_GetLinkedNotebookSyncChunk_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listNotebooks (seqid, iprot, oprot, handler) = do
  args <- read_ListNotebooks_args iprot
  readMessageEnd iprot
  rs <- return (ListNotebooks_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.listNotebooks handler (f_ListNotebooks_args_authenticationToken args)
        return rs{f_ListNotebooks_result_success= Just res})
      (\e  -> 
        return rs{f_ListNotebooks_result_userException =Just e}))
    (\e  -> 
      return rs{f_ListNotebooks_result_systemException =Just e}))
  writeMessageBegin oprot ("listNotebooks", M_REPLY, seqid);
  write_ListNotebooks_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNotebook (seqid, iprot, oprot, handler) = do
  args <- read_GetNotebook_args iprot
  readMessageEnd iprot
  rs <- return (GetNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNotebook handler (f_GetNotebook_args_authenticationToken args) (f_GetNotebook_args_guid args)
          return rs{f_GetNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_GetNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNotebook_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNotebook_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNotebook", M_REPLY, seqid);
  write_GetNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getDefaultNotebook (seqid, iprot, oprot, handler) = do
  args <- read_GetDefaultNotebook_args iprot
  readMessageEnd iprot
  rs <- return (GetDefaultNotebook_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getDefaultNotebook handler (f_GetDefaultNotebook_args_authenticationToken args)
        return rs{f_GetDefaultNotebook_result_success= Just res})
      (\e  -> 
        return rs{f_GetDefaultNotebook_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetDefaultNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("getDefaultNotebook", M_REPLY, seqid);
  write_GetDefaultNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createNotebook (seqid, iprot, oprot, handler) = do
  args <- read_CreateNotebook_args iprot
  readMessageEnd iprot
  rs <- return (CreateNotebook_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.createNotebook handler (f_CreateNotebook_args_authenticationToken args) (f_CreateNotebook_args_notebook args)
        return rs{f_CreateNotebook_result_success= Just res})
      (\e  -> 
        return rs{f_CreateNotebook_result_userException =Just e}))
    (\e  -> 
      return rs{f_CreateNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("createNotebook", M_REPLY, seqid);
  write_CreateNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateNotebook (seqid, iprot, oprot, handler) = do
  args <- read_UpdateNotebook_args iprot
  readMessageEnd iprot
  rs <- return (UpdateNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateNotebook handler (f_UpdateNotebook_args_authenticationToken args) (f_UpdateNotebook_args_notebook args)
          return rs{f_UpdateNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateNotebook_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UpdateNotebook_result_notFoundException =Just e}))
  writeMessageBegin oprot ("updateNotebook", M_REPLY, seqid);
  write_UpdateNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeNotebook (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeNotebook_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeNotebook handler (f_ExpungeNotebook_args_authenticationToken args) (f_ExpungeNotebook_args_guid args)
          return rs{f_ExpungeNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeNotebook_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ExpungeNotebook_result_notFoundException =Just e}))
  writeMessageBegin oprot ("expungeNotebook", M_REPLY, seqid);
  write_ExpungeNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listTags (seqid, iprot, oprot, handler) = do
  args <- read_ListTags_args iprot
  readMessageEnd iprot
  rs <- return (ListTags_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.listTags handler (f_ListTags_args_authenticationToken args)
        return rs{f_ListTags_result_success= Just res})
      (\e  -> 
        return rs{f_ListTags_result_userException =Just e}))
    (\e  -> 
      return rs{f_ListTags_result_systemException =Just e}))
  writeMessageBegin oprot ("listTags", M_REPLY, seqid);
  write_ListTags_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listTagsByNotebook (seqid, iprot, oprot, handler) = do
  args <- read_ListTagsByNotebook_args iprot
  readMessageEnd iprot
  rs <- return (ListTagsByNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.listTagsByNotebook handler (f_ListTagsByNotebook_args_authenticationToken args) (f_ListTagsByNotebook_args_notebookGuid args)
          return rs{f_ListTagsByNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_ListTagsByNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_ListTagsByNotebook_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ListTagsByNotebook_result_notFoundException =Just e}))
  writeMessageBegin oprot ("listTagsByNotebook", M_REPLY, seqid);
  write_ListTagsByNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getTag (seqid, iprot, oprot, handler) = do
  args <- read_GetTag_args iprot
  readMessageEnd iprot
  rs <- return (GetTag_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getTag handler (f_GetTag_args_authenticationToken args) (f_GetTag_args_guid args)
          return rs{f_GetTag_result_success= Just res})
        (\e  -> 
          return rs{f_GetTag_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetTag_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetTag_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getTag", M_REPLY, seqid);
  write_GetTag_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createTag (seqid, iprot, oprot, handler) = do
  args <- read_CreateTag_args iprot
  readMessageEnd iprot
  rs <- return (CreateTag_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.createTag handler (f_CreateTag_args_authenticationToken args) (f_CreateTag_args_tag args)
          return rs{f_CreateTag_result_success= Just res})
        (\e  -> 
          return rs{f_CreateTag_result_userException =Just e}))
      (\e  -> 
        return rs{f_CreateTag_result_systemException =Just e}))
    (\e  -> 
      return rs{f_CreateTag_result_notFoundException =Just e}))
  writeMessageBegin oprot ("createTag", M_REPLY, seqid);
  write_CreateTag_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateTag (seqid, iprot, oprot, handler) = do
  args <- read_UpdateTag_args iprot
  readMessageEnd iprot
  rs <- return (UpdateTag_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateTag handler (f_UpdateTag_args_authenticationToken args) (f_UpdateTag_args_tag args)
          return rs{f_UpdateTag_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateTag_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateTag_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UpdateTag_result_notFoundException =Just e}))
  writeMessageBegin oprot ("updateTag", M_REPLY, seqid);
  write_UpdateTag_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_untagAll (seqid, iprot, oprot, handler) = do
  args <- read_UntagAll_args iprot
  readMessageEnd iprot
  rs <- return (UntagAll_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          Iface.untagAll handler (f_UntagAll_args_authenticationToken args) (f_UntagAll_args_guid args)
          return rs)
        (\e  -> 
          return rs{f_UntagAll_result_userException =Just e}))
      (\e  -> 
        return rs{f_UntagAll_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UntagAll_result_notFoundException =Just e}))
  writeMessageBegin oprot ("untagAll", M_REPLY, seqid);
  write_UntagAll_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeTag (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeTag_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeTag_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeTag handler (f_ExpungeTag_args_authenticationToken args) (f_ExpungeTag_args_guid args)
          return rs{f_ExpungeTag_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeTag_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeTag_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ExpungeTag_result_notFoundException =Just e}))
  writeMessageBegin oprot ("expungeTag", M_REPLY, seqid);
  write_ExpungeTag_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listSearches (seqid, iprot, oprot, handler) = do
  args <- read_ListSearches_args iprot
  readMessageEnd iprot
  rs <- return (ListSearches_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.listSearches handler (f_ListSearches_args_authenticationToken args)
        return rs{f_ListSearches_result_success= Just res})
      (\e  -> 
        return rs{f_ListSearches_result_userException =Just e}))
    (\e  -> 
      return rs{f_ListSearches_result_systemException =Just e}))
  writeMessageBegin oprot ("listSearches", M_REPLY, seqid);
  write_ListSearches_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getSearch (seqid, iprot, oprot, handler) = do
  args <- read_GetSearch_args iprot
  readMessageEnd iprot
  rs <- return (GetSearch_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getSearch handler (f_GetSearch_args_authenticationToken args) (f_GetSearch_args_guid args)
          return rs{f_GetSearch_result_success= Just res})
        (\e  -> 
          return rs{f_GetSearch_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetSearch_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetSearch_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getSearch", M_REPLY, seqid);
  write_GetSearch_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createSearch (seqid, iprot, oprot, handler) = do
  args <- read_CreateSearch_args iprot
  readMessageEnd iprot
  rs <- return (CreateSearch_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.createSearch handler (f_CreateSearch_args_authenticationToken args) (f_CreateSearch_args_search args)
        return rs{f_CreateSearch_result_success= Just res})
      (\e  -> 
        return rs{f_CreateSearch_result_userException =Just e}))
    (\e  -> 
      return rs{f_CreateSearch_result_systemException =Just e}))
  writeMessageBegin oprot ("createSearch", M_REPLY, seqid);
  write_CreateSearch_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateSearch (seqid, iprot, oprot, handler) = do
  args <- read_UpdateSearch_args iprot
  readMessageEnd iprot
  rs <- return (UpdateSearch_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateSearch handler (f_UpdateSearch_args_authenticationToken args) (f_UpdateSearch_args_search args)
          return rs{f_UpdateSearch_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateSearch_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateSearch_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UpdateSearch_result_notFoundException =Just e}))
  writeMessageBegin oprot ("updateSearch", M_REPLY, seqid);
  write_UpdateSearch_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeSearch (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeSearch_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeSearch_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeSearch handler (f_ExpungeSearch_args_authenticationToken args) (f_ExpungeSearch_args_guid args)
          return rs{f_ExpungeSearch_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeSearch_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeSearch_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ExpungeSearch_result_notFoundException =Just e}))
  writeMessageBegin oprot ("expungeSearch", M_REPLY, seqid);
  write_ExpungeSearch_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_findNotes (seqid, iprot, oprot, handler) = do
  args <- read_FindNotes_args iprot
  readMessageEnd iprot
  rs <- return (FindNotes_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.findNotes handler (f_FindNotes_args_authenticationToken args) (f_FindNotes_args_filter args) (f_FindNotes_args_offset args) (f_FindNotes_args_maxNotes args)
          return rs{f_FindNotes_result_success= Just res})
        (\e  -> 
          return rs{f_FindNotes_result_userException =Just e}))
      (\e  -> 
        return rs{f_FindNotes_result_systemException =Just e}))
    (\e  -> 
      return rs{f_FindNotes_result_notFoundException =Just e}))
  writeMessageBegin oprot ("findNotes", M_REPLY, seqid);
  write_FindNotes_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_findNoteOffset (seqid, iprot, oprot, handler) = do
  args <- read_FindNoteOffset_args iprot
  readMessageEnd iprot
  rs <- return (FindNoteOffset_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.findNoteOffset handler (f_FindNoteOffset_args_authenticationToken args) (f_FindNoteOffset_args_filter args) (f_FindNoteOffset_args_guid args)
          return rs{f_FindNoteOffset_result_success= Just res})
        (\e  -> 
          return rs{f_FindNoteOffset_result_userException =Just e}))
      (\e  -> 
        return rs{f_FindNoteOffset_result_systemException =Just e}))
    (\e  -> 
      return rs{f_FindNoteOffset_result_notFoundException =Just e}))
  writeMessageBegin oprot ("findNoteOffset", M_REPLY, seqid);
  write_FindNoteOffset_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_findNotesMetadata (seqid, iprot, oprot, handler) = do
  args <- read_FindNotesMetadata_args iprot
  readMessageEnd iprot
  rs <- return (FindNotesMetadata_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.findNotesMetadata handler (f_FindNotesMetadata_args_authenticationToken args) (f_FindNotesMetadata_args_filter args) (f_FindNotesMetadata_args_offset args) (f_FindNotesMetadata_args_maxNotes args) (f_FindNotesMetadata_args_resultSpec args)
          return rs{f_FindNotesMetadata_result_success= Just res})
        (\e  -> 
          return rs{f_FindNotesMetadata_result_userException =Just e}))
      (\e  -> 
        return rs{f_FindNotesMetadata_result_systemException =Just e}))
    (\e  -> 
      return rs{f_FindNotesMetadata_result_notFoundException =Just e}))
  writeMessageBegin oprot ("findNotesMetadata", M_REPLY, seqid);
  write_FindNotesMetadata_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_findNoteCounts (seqid, iprot, oprot, handler) = do
  args <- read_FindNoteCounts_args iprot
  readMessageEnd iprot
  rs <- return (FindNoteCounts_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.findNoteCounts handler (f_FindNoteCounts_args_authenticationToken args) (f_FindNoteCounts_args_filter args) (f_FindNoteCounts_args_withTrash args)
          return rs{f_FindNoteCounts_result_success= Just res})
        (\e  -> 
          return rs{f_FindNoteCounts_result_userException =Just e}))
      (\e  -> 
        return rs{f_FindNoteCounts_result_systemException =Just e}))
    (\e  -> 
      return rs{f_FindNoteCounts_result_notFoundException =Just e}))
  writeMessageBegin oprot ("findNoteCounts", M_REPLY, seqid);
  write_FindNoteCounts_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNote (seqid, iprot, oprot, handler) = do
  args <- read_GetNote_args iprot
  readMessageEnd iprot
  rs <- return (GetNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNote handler (f_GetNote_args_authenticationToken args) (f_GetNote_args_guid args) (f_GetNote_args_withContent args) (f_GetNote_args_withResourcesData args) (f_GetNote_args_withResourcesRecognition args) (f_GetNote_args_withResourcesAlternateData args)
          return rs{f_GetNote_result_success= Just res})
        (\e  -> 
          return rs{f_GetNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNote", M_REPLY, seqid);
  write_GetNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNoteContent (seqid, iprot, oprot, handler) = do
  args <- read_GetNoteContent_args iprot
  readMessageEnd iprot
  rs <- return (GetNoteContent_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNoteContent handler (f_GetNoteContent_args_authenticationToken args) (f_GetNoteContent_args_guid args)
          return rs{f_GetNoteContent_result_success= Just res})
        (\e  -> 
          return rs{f_GetNoteContent_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNoteContent_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNoteContent_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNoteContent", M_REPLY, seqid);
  write_GetNoteContent_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNoteSearchText (seqid, iprot, oprot, handler) = do
  args <- read_GetNoteSearchText_args iprot
  readMessageEnd iprot
  rs <- return (GetNoteSearchText_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNoteSearchText handler (f_GetNoteSearchText_args_authenticationToken args) (f_GetNoteSearchText_args_guid args) (f_GetNoteSearchText_args_noteOnly args) (f_GetNoteSearchText_args_tokenizeForIndexing args)
          return rs{f_GetNoteSearchText_result_success= Just res})
        (\e  -> 
          return rs{f_GetNoteSearchText_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNoteSearchText_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNoteSearchText_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNoteSearchText", M_REPLY, seqid);
  write_GetNoteSearchText_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceSearchText (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceSearchText_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceSearchText_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceSearchText handler (f_GetResourceSearchText_args_authenticationToken args) (f_GetResourceSearchText_args_guid args)
          return rs{f_GetResourceSearchText_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceSearchText_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceSearchText_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceSearchText_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceSearchText", M_REPLY, seqid);
  write_GetResourceSearchText_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNoteTagNames (seqid, iprot, oprot, handler) = do
  args <- read_GetNoteTagNames_args iprot
  readMessageEnd iprot
  rs <- return (GetNoteTagNames_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNoteTagNames handler (f_GetNoteTagNames_args_authenticationToken args) (f_GetNoteTagNames_args_guid args)
          return rs{f_GetNoteTagNames_result_success= Just res})
        (\e  -> 
          return rs{f_GetNoteTagNames_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNoteTagNames_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNoteTagNames_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNoteTagNames", M_REPLY, seqid);
  write_GetNoteTagNames_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createNote (seqid, iprot, oprot, handler) = do
  args <- read_CreateNote_args iprot
  readMessageEnd iprot
  rs <- return (CreateNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.createNote handler (f_CreateNote_args_authenticationToken args) (f_CreateNote_args_note args)
          return rs{f_CreateNote_result_success= Just res})
        (\e  -> 
          return rs{f_CreateNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_CreateNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_CreateNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("createNote", M_REPLY, seqid);
  write_CreateNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateNote (seqid, iprot, oprot, handler) = do
  args <- read_UpdateNote_args iprot
  readMessageEnd iprot
  rs <- return (UpdateNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateNote handler (f_UpdateNote_args_authenticationToken args) (f_UpdateNote_args_note args)
          return rs{f_UpdateNote_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UpdateNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("updateNote", M_REPLY, seqid);
  write_UpdateNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_deleteNote (seqid, iprot, oprot, handler) = do
  args <- read_DeleteNote_args iprot
  readMessageEnd iprot
  rs <- return (DeleteNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.deleteNote handler (f_DeleteNote_args_authenticationToken args) (f_DeleteNote_args_guid args)
          return rs{f_DeleteNote_result_success= Just res})
        (\e  -> 
          return rs{f_DeleteNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_DeleteNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_DeleteNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("deleteNote", M_REPLY, seqid);
  write_DeleteNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeNote (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeNote_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeNote handler (f_ExpungeNote_args_authenticationToken args) (f_ExpungeNote_args_guid args)
          return rs{f_ExpungeNote_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ExpungeNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("expungeNote", M_REPLY, seqid);
  write_ExpungeNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeNotes (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeNotes_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeNotes_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeNotes handler (f_ExpungeNotes_args_authenticationToken args) (f_ExpungeNotes_args_noteGuids args)
          return rs{f_ExpungeNotes_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeNotes_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeNotes_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ExpungeNotes_result_notFoundException =Just e}))
  writeMessageBegin oprot ("expungeNotes", M_REPLY, seqid);
  write_ExpungeNotes_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeInactiveNotes (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeInactiveNotes_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeInactiveNotes_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.expungeInactiveNotes handler (f_ExpungeInactiveNotes_args_authenticationToken args)
        return rs{f_ExpungeInactiveNotes_result_success= Just res})
      (\e  -> 
        return rs{f_ExpungeInactiveNotes_result_userException =Just e}))
    (\e  -> 
      return rs{f_ExpungeInactiveNotes_result_systemException =Just e}))
  writeMessageBegin oprot ("expungeInactiveNotes", M_REPLY, seqid);
  write_ExpungeInactiveNotes_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_copyNote (seqid, iprot, oprot, handler) = do
  args <- read_CopyNote_args iprot
  readMessageEnd iprot
  rs <- return (CopyNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.copyNote handler (f_CopyNote_args_authenticationToken args) (f_CopyNote_args_noteGuid args) (f_CopyNote_args_toNotebookGuid args)
          return rs{f_CopyNote_result_success= Just res})
        (\e  -> 
          return rs{f_CopyNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_CopyNote_result_systemException =Just e}))
    (\e  -> 
      return rs{f_CopyNote_result_notFoundException =Just e}))
  writeMessageBegin oprot ("copyNote", M_REPLY, seqid);
  write_CopyNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listNoteVersions (seqid, iprot, oprot, handler) = do
  args <- read_ListNoteVersions_args iprot
  readMessageEnd iprot
  rs <- return (ListNoteVersions_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.listNoteVersions handler (f_ListNoteVersions_args_authenticationToken args) (f_ListNoteVersions_args_noteGuid args)
          return rs{f_ListNoteVersions_result_success= Just res})
        (\e  -> 
          return rs{f_ListNoteVersions_result_userException =Just e}))
      (\e  -> 
        return rs{f_ListNoteVersions_result_systemException =Just e}))
    (\e  -> 
      return rs{f_ListNoteVersions_result_notFoundException =Just e}))
  writeMessageBegin oprot ("listNoteVersions", M_REPLY, seqid);
  write_ListNoteVersions_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getNoteVersion (seqid, iprot, oprot, handler) = do
  args <- read_GetNoteVersion_args iprot
  readMessageEnd iprot
  rs <- return (GetNoteVersion_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getNoteVersion handler (f_GetNoteVersion_args_authenticationToken args) (f_GetNoteVersion_args_noteGuid args) (f_GetNoteVersion_args_updateSequenceNum args) (f_GetNoteVersion_args_withResourcesData args) (f_GetNoteVersion_args_withResourcesRecognition args) (f_GetNoteVersion_args_withResourcesAlternateData args)
          return rs{f_GetNoteVersion_result_success= Just res})
        (\e  -> 
          return rs{f_GetNoteVersion_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetNoteVersion_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetNoteVersion_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getNoteVersion", M_REPLY, seqid);
  write_GetNoteVersion_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResource (seqid, iprot, oprot, handler) = do
  args <- read_GetResource_args iprot
  readMessageEnd iprot
  rs <- return (GetResource_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResource handler (f_GetResource_args_authenticationToken args) (f_GetResource_args_guid args) (f_GetResource_args_withData args) (f_GetResource_args_withRecognition args) (f_GetResource_args_withAttributes args) (f_GetResource_args_withAlternateData args)
          return rs{f_GetResource_result_success= Just res})
        (\e  -> 
          return rs{f_GetResource_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResource_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResource_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResource", M_REPLY, seqid);
  write_GetResource_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateResource (seqid, iprot, oprot, handler) = do
  args <- read_UpdateResource_args iprot
  readMessageEnd iprot
  rs <- return (UpdateResource_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateResource handler (f_UpdateResource_args_authenticationToken args) (f_UpdateResource_args_resource args)
          return rs{f_UpdateResource_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateResource_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateResource_result_systemException =Just e}))
    (\e  -> 
      return rs{f_UpdateResource_result_notFoundException =Just e}))
  writeMessageBegin oprot ("updateResource", M_REPLY, seqid);
  write_UpdateResource_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceData (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceData_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceData_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceData handler (f_GetResourceData_args_authenticationToken args) (f_GetResourceData_args_guid args)
          return rs{f_GetResourceData_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceData_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceData_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceData_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceData", M_REPLY, seqid);
  write_GetResourceData_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceByHash (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceByHash_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceByHash_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceByHash handler (f_GetResourceByHash_args_authenticationToken args) (f_GetResourceByHash_args_noteGuid args) (f_GetResourceByHash_args_contentHash args) (f_GetResourceByHash_args_withData args) (f_GetResourceByHash_args_withRecognition args) (f_GetResourceByHash_args_withAlternateData args)
          return rs{f_GetResourceByHash_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceByHash_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceByHash_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceByHash_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceByHash", M_REPLY, seqid);
  write_GetResourceByHash_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceRecognition (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceRecognition_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceRecognition_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceRecognition handler (f_GetResourceRecognition_args_authenticationToken args) (f_GetResourceRecognition_args_guid args)
          return rs{f_GetResourceRecognition_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceRecognition_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceRecognition_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceRecognition_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceRecognition", M_REPLY, seqid);
  write_GetResourceRecognition_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceAlternateData (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceAlternateData_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceAlternateData_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceAlternateData handler (f_GetResourceAlternateData_args_authenticationToken args) (f_GetResourceAlternateData_args_guid args)
          return rs{f_GetResourceAlternateData_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceAlternateData_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceAlternateData_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceAlternateData_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceAlternateData", M_REPLY, seqid);
  write_GetResourceAlternateData_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getResourceAttributes (seqid, iprot, oprot, handler) = do
  args <- read_GetResourceAttributes_args iprot
  readMessageEnd iprot
  rs <- return (GetResourceAttributes_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getResourceAttributes handler (f_GetResourceAttributes_args_authenticationToken args) (f_GetResourceAttributes_args_guid args)
          return rs{f_GetResourceAttributes_result_success= Just res})
        (\e  -> 
          return rs{f_GetResourceAttributes_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetResourceAttributes_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetResourceAttributes_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getResourceAttributes", M_REPLY, seqid);
  write_GetResourceAttributes_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getAccountSize (seqid, iprot, oprot, handler) = do
  args <- read_GetAccountSize_args iprot
  readMessageEnd iprot
  rs <- return (GetAccountSize_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getAccountSize handler (f_GetAccountSize_args_authenticationToken args)
        return rs{f_GetAccountSize_result_success= Just res})
      (\e  -> 
        return rs{f_GetAccountSize_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetAccountSize_result_systemException =Just e}))
  writeMessageBegin oprot ("getAccountSize", M_REPLY, seqid);
  write_GetAccountSize_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getAds (seqid, iprot, oprot, handler) = do
  args <- read_GetAds_args iprot
  readMessageEnd iprot
  rs <- return (GetAds_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getAds handler (f_GetAds_args_authenticationToken args) (f_GetAds_args_adParameters args)
        return rs{f_GetAds_result_success= Just res})
      (\e  -> 
        return rs{f_GetAds_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetAds_result_systemException =Just e}))
  writeMessageBegin oprot ("getAds", M_REPLY, seqid);
  write_GetAds_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getRandomAd (seqid, iprot, oprot, handler) = do
  args <- read_GetRandomAd_args iprot
  readMessageEnd iprot
  rs <- return (GetRandomAd_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getRandomAd handler (f_GetRandomAd_args_authenticationToken args) (f_GetRandomAd_args_adParameters args)
        return rs{f_GetRandomAd_result_success= Just res})
      (\e  -> 
        return rs{f_GetRandomAd_result_userException =Just e}))
    (\e  -> 
      return rs{f_GetRandomAd_result_systemException =Just e}))
  writeMessageBegin oprot ("getRandomAd", M_REPLY, seqid);
  write_GetRandomAd_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getPublicNotebook (seqid, iprot, oprot, handler) = do
  args <- read_GetPublicNotebook_args iprot
  readMessageEnd iprot
  rs <- return (GetPublicNotebook_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (do
        res <- Iface.getPublicNotebook handler (f_GetPublicNotebook_args_userId args) (f_GetPublicNotebook_args_publicUri args)
        return rs{f_GetPublicNotebook_result_success= Just res})
      (\e  -> 
        return rs{f_GetPublicNotebook_result_systemException =Just e}))
    (\e  -> 
      return rs{f_GetPublicNotebook_result_notFoundException =Just e}))
  writeMessageBegin oprot ("getPublicNotebook", M_REPLY, seqid);
  write_GetPublicNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createSharedNotebook (seqid, iprot, oprot, handler) = do
  args <- read_CreateSharedNotebook_args iprot
  readMessageEnd iprot
  rs <- return (CreateSharedNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.createSharedNotebook handler (f_CreateSharedNotebook_args_authenticationToken args) (f_CreateSharedNotebook_args_sharedNotebook args)
          return rs{f_CreateSharedNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_CreateSharedNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_CreateSharedNotebook_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_CreateSharedNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("createSharedNotebook", M_REPLY, seqid);
  write_CreateSharedNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listSharedNotebooks (seqid, iprot, oprot, handler) = do
  args <- read_ListSharedNotebooks_args iprot
  readMessageEnd iprot
  rs <- return (ListSharedNotebooks_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.listSharedNotebooks handler (f_ListSharedNotebooks_args_authenticationToken args)
          return rs{f_ListSharedNotebooks_result_success= Just res})
        (\e  -> 
          return rs{f_ListSharedNotebooks_result_userException =Just e}))
      (\e  -> 
        return rs{f_ListSharedNotebooks_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_ListSharedNotebooks_result_systemException =Just e}))
  writeMessageBegin oprot ("listSharedNotebooks", M_REPLY, seqid);
  write_ListSharedNotebooks_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeSharedNotebooks (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeSharedNotebooks_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeSharedNotebooks_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeSharedNotebooks handler (f_ExpungeSharedNotebooks_args_authenticationToken args) (f_ExpungeSharedNotebooks_args_sharedNotebookIds args)
          return rs{f_ExpungeSharedNotebooks_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeSharedNotebooks_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeSharedNotebooks_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_ExpungeSharedNotebooks_result_systemException =Just e}))
  writeMessageBegin oprot ("expungeSharedNotebooks", M_REPLY, seqid);
  write_ExpungeSharedNotebooks_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_createLinkedNotebook (seqid, iprot, oprot, handler) = do
  args <- read_CreateLinkedNotebook_args iprot
  readMessageEnd iprot
  rs <- return (CreateLinkedNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.createLinkedNotebook handler (f_CreateLinkedNotebook_args_authenticationToken args) (f_CreateLinkedNotebook_args_linkedNotebook args)
          return rs{f_CreateLinkedNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_CreateLinkedNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_CreateLinkedNotebook_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_CreateLinkedNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("createLinkedNotebook", M_REPLY, seqid);
  write_CreateLinkedNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_updateLinkedNotebook (seqid, iprot, oprot, handler) = do
  args <- read_UpdateLinkedNotebook_args iprot
  readMessageEnd iprot
  rs <- return (UpdateLinkedNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.updateLinkedNotebook handler (f_UpdateLinkedNotebook_args_authenticationToken args) (f_UpdateLinkedNotebook_args_linkedNotebook args)
          return rs{f_UpdateLinkedNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_UpdateLinkedNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_UpdateLinkedNotebook_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_UpdateLinkedNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("updateLinkedNotebook", M_REPLY, seqid);
  write_UpdateLinkedNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_listLinkedNotebooks (seqid, iprot, oprot, handler) = do
  args <- read_ListLinkedNotebooks_args iprot
  readMessageEnd iprot
  rs <- return (ListLinkedNotebooks_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.listLinkedNotebooks handler (f_ListLinkedNotebooks_args_authenticationToken args)
          return rs{f_ListLinkedNotebooks_result_success= Just res})
        (\e  -> 
          return rs{f_ListLinkedNotebooks_result_userException =Just e}))
      (\e  -> 
        return rs{f_ListLinkedNotebooks_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_ListLinkedNotebooks_result_systemException =Just e}))
  writeMessageBegin oprot ("listLinkedNotebooks", M_REPLY, seqid);
  write_ListLinkedNotebooks_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_expungeLinkedNotebook (seqid, iprot, oprot, handler) = do
  args <- read_ExpungeLinkedNotebook_args iprot
  readMessageEnd iprot
  rs <- return (ExpungeLinkedNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.expungeLinkedNotebook handler (f_ExpungeLinkedNotebook_args_authenticationToken args) (f_ExpungeLinkedNotebook_args_guid args)
          return rs{f_ExpungeLinkedNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_ExpungeLinkedNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_ExpungeLinkedNotebook_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_ExpungeLinkedNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("expungeLinkedNotebook", M_REPLY, seqid);
  write_ExpungeLinkedNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_authenticateToSharedNotebook (seqid, iprot, oprot, handler) = do
  args <- read_AuthenticateToSharedNotebook_args iprot
  readMessageEnd iprot
  rs <- return (AuthenticateToSharedNotebook_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.authenticateToSharedNotebook handler (f_AuthenticateToSharedNotebook_args_shareKey args) (f_AuthenticateToSharedNotebook_args_authenticationToken args)
          return rs{f_AuthenticateToSharedNotebook_result_success= Just res})
        (\e  -> 
          return rs{f_AuthenticateToSharedNotebook_result_userException =Just e}))
      (\e  -> 
        return rs{f_AuthenticateToSharedNotebook_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_AuthenticateToSharedNotebook_result_systemException =Just e}))
  writeMessageBegin oprot ("authenticateToSharedNotebook", M_REPLY, seqid);
  write_AuthenticateToSharedNotebook_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getSharedNotebookByAuth (seqid, iprot, oprot, handler) = do
  args <- read_GetSharedNotebookByAuth_args iprot
  readMessageEnd iprot
  rs <- return (GetSharedNotebookByAuth_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.getSharedNotebookByAuth handler (f_GetSharedNotebookByAuth_args_authenticationToken args)
          return rs{f_GetSharedNotebookByAuth_result_success= Just res})
        (\e  -> 
          return rs{f_GetSharedNotebookByAuth_result_userException =Just e}))
      (\e  -> 
        return rs{f_GetSharedNotebookByAuth_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_GetSharedNotebookByAuth_result_systemException =Just e}))
  writeMessageBegin oprot ("getSharedNotebookByAuth", M_REPLY, seqid);
  write_GetSharedNotebookByAuth_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_emailNote (seqid, iprot, oprot, handler) = do
  args <- read_EmailNote_args iprot
  readMessageEnd iprot
  rs <- return (EmailNote_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          Iface.emailNote handler (f_EmailNote_args_authenticationToken args) (f_EmailNote_args_parameters args)
          return rs)
        (\e  -> 
          return rs{f_EmailNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_EmailNote_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_EmailNote_result_systemException =Just e}))
  writeMessageBegin oprot ("emailNote", M_REPLY, seqid);
  write_EmailNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_shareNote (seqid, iprot, oprot, handler) = do
  args <- read_ShareNote_args iprot
  readMessageEnd iprot
  rs <- return (ShareNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.shareNote handler (f_ShareNote_args_authenticationToken args) (f_ShareNote_args_guid args)
          return rs{f_ShareNote_result_success= Just res})
        (\e  -> 
          return rs{f_ShareNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_ShareNote_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_ShareNote_result_systemException =Just e}))
  writeMessageBegin oprot ("shareNote", M_REPLY, seqid);
  write_ShareNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_stopSharingNote (seqid, iprot, oprot, handler) = do
  args <- read_StopSharingNote_args iprot
  readMessageEnd iprot
  rs <- return (StopSharingNote_result Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          Iface.stopSharingNote handler (f_StopSharingNote_args_authenticationToken args) (f_StopSharingNote_args_guid args)
          return rs)
        (\e  -> 
          return rs{f_StopSharingNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_StopSharingNote_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_StopSharingNote_result_systemException =Just e}))
  writeMessageBegin oprot ("stopSharingNote", M_REPLY, seqid);
  write_StopSharingNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_authenticateToSharedNote (seqid, iprot, oprot, handler) = do
  args <- read_AuthenticateToSharedNote_args iprot
  readMessageEnd iprot
  rs <- return (AuthenticateToSharedNote_result Nothing Nothing Nothing Nothing)
  res <- (Control.Exception.catch
    (Control.Exception.catch
      (Control.Exception.catch
        (do
          res <- Iface.authenticateToSharedNote handler (f_AuthenticateToSharedNote_args_guid args) (f_AuthenticateToSharedNote_args_noteKey args)
          return rs{f_AuthenticateToSharedNote_result_success= Just res})
        (\e  -> 
          return rs{f_AuthenticateToSharedNote_result_userException =Just e}))
      (\e  -> 
        return rs{f_AuthenticateToSharedNote_result_notFoundException =Just e}))
    (\e  -> 
      return rs{f_AuthenticateToSharedNote_result_systemException =Just e}))
  writeMessageBegin oprot ("authenticateToSharedNote", M_REPLY, seqid);
  write_AuthenticateToSharedNote_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "getSyncState" -> process_getSyncState (seqid,iprot,oprot,handler)
  "getSyncChunk" -> process_getSyncChunk (seqid,iprot,oprot,handler)
  "getLinkedNotebookSyncState" -> process_getLinkedNotebookSyncState (seqid,iprot,oprot,handler)
  "getLinkedNotebookSyncChunk" -> process_getLinkedNotebookSyncChunk (seqid,iprot,oprot,handler)
  "listNotebooks" -> process_listNotebooks (seqid,iprot,oprot,handler)
  "getNotebook" -> process_getNotebook (seqid,iprot,oprot,handler)
  "getDefaultNotebook" -> process_getDefaultNotebook (seqid,iprot,oprot,handler)
  "createNotebook" -> process_createNotebook (seqid,iprot,oprot,handler)
  "updateNotebook" -> process_updateNotebook (seqid,iprot,oprot,handler)
  "expungeNotebook" -> process_expungeNotebook (seqid,iprot,oprot,handler)
  "listTags" -> process_listTags (seqid,iprot,oprot,handler)
  "listTagsByNotebook" -> process_listTagsByNotebook (seqid,iprot,oprot,handler)
  "getTag" -> process_getTag (seqid,iprot,oprot,handler)
  "createTag" -> process_createTag (seqid,iprot,oprot,handler)
  "updateTag" -> process_updateTag (seqid,iprot,oprot,handler)
  "untagAll" -> process_untagAll (seqid,iprot,oprot,handler)
  "expungeTag" -> process_expungeTag (seqid,iprot,oprot,handler)
  "listSearches" -> process_listSearches (seqid,iprot,oprot,handler)
  "getSearch" -> process_getSearch (seqid,iprot,oprot,handler)
  "createSearch" -> process_createSearch (seqid,iprot,oprot,handler)
  "updateSearch" -> process_updateSearch (seqid,iprot,oprot,handler)
  "expungeSearch" -> process_expungeSearch (seqid,iprot,oprot,handler)
  "findNotes" -> process_findNotes (seqid,iprot,oprot,handler)
  "findNoteOffset" -> process_findNoteOffset (seqid,iprot,oprot,handler)
  "findNotesMetadata" -> process_findNotesMetadata (seqid,iprot,oprot,handler)
  "findNoteCounts" -> process_findNoteCounts (seqid,iprot,oprot,handler)
  "getNote" -> process_getNote (seqid,iprot,oprot,handler)
  "getNoteContent" -> process_getNoteContent (seqid,iprot,oprot,handler)
  "getNoteSearchText" -> process_getNoteSearchText (seqid,iprot,oprot,handler)
  "getResourceSearchText" -> process_getResourceSearchText (seqid,iprot,oprot,handler)
  "getNoteTagNames" -> process_getNoteTagNames (seqid,iprot,oprot,handler)
  "createNote" -> process_createNote (seqid,iprot,oprot,handler)
  "updateNote" -> process_updateNote (seqid,iprot,oprot,handler)
  "deleteNote" -> process_deleteNote (seqid,iprot,oprot,handler)
  "expungeNote" -> process_expungeNote (seqid,iprot,oprot,handler)
  "expungeNotes" -> process_expungeNotes (seqid,iprot,oprot,handler)
  "expungeInactiveNotes" -> process_expungeInactiveNotes (seqid,iprot,oprot,handler)
  "copyNote" -> process_copyNote (seqid,iprot,oprot,handler)
  "listNoteVersions" -> process_listNoteVersions (seqid,iprot,oprot,handler)
  "getNoteVersion" -> process_getNoteVersion (seqid,iprot,oprot,handler)
  "getResource" -> process_getResource (seqid,iprot,oprot,handler)
  "updateResource" -> process_updateResource (seqid,iprot,oprot,handler)
  "getResourceData" -> process_getResourceData (seqid,iprot,oprot,handler)
  "getResourceByHash" -> process_getResourceByHash (seqid,iprot,oprot,handler)
  "getResourceRecognition" -> process_getResourceRecognition (seqid,iprot,oprot,handler)
  "getResourceAlternateData" -> process_getResourceAlternateData (seqid,iprot,oprot,handler)
  "getResourceAttributes" -> process_getResourceAttributes (seqid,iprot,oprot,handler)
  "getAccountSize" -> process_getAccountSize (seqid,iprot,oprot,handler)
  "getAds" -> process_getAds (seqid,iprot,oprot,handler)
  "getRandomAd" -> process_getRandomAd (seqid,iprot,oprot,handler)
  "getPublicNotebook" -> process_getPublicNotebook (seqid,iprot,oprot,handler)
  "createSharedNotebook" -> process_createSharedNotebook (seqid,iprot,oprot,handler)
  "listSharedNotebooks" -> process_listSharedNotebooks (seqid,iprot,oprot,handler)
  "expungeSharedNotebooks" -> process_expungeSharedNotebooks (seqid,iprot,oprot,handler)
  "createLinkedNotebook" -> process_createLinkedNotebook (seqid,iprot,oprot,handler)
  "updateLinkedNotebook" -> process_updateLinkedNotebook (seqid,iprot,oprot,handler)
  "listLinkedNotebooks" -> process_listLinkedNotebooks (seqid,iprot,oprot,handler)
  "expungeLinkedNotebook" -> process_expungeLinkedNotebook (seqid,iprot,oprot,handler)
  "authenticateToSharedNotebook" -> process_authenticateToSharedNotebook (seqid,iprot,oprot,handler)
  "getSharedNotebookByAuth" -> process_getSharedNotebookByAuth (seqid,iprot,oprot,handler)
  "emailNote" -> process_emailNote (seqid,iprot,oprot,handler)
  "shareNote" -> process_shareNote (seqid,iprot,oprot,handler)
  "stopSharingNote" -> process_stopSharingNote (seqid,iprot,oprot,handler)
  "authenticateToSharedNote" -> process_authenticateToSharedNote (seqid,iprot,oprot,handler)
  _ -> do
    skip iprot T_STRUCT
    readMessageEnd iprot
    writeMessageBegin oprot (name,M_EXCEPTION,seqid)
    writeAppExn oprot (AppExn AE_UNKNOWN_METHOD ("Unknown function " ++ name))
    writeMessageEnd oprot
    tFlush (getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  return True
