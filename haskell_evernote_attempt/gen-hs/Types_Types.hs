{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Types_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift

import qualified Limits_Types


data PrivilegeLevel = NORMAL|PREMIUM|MANAGER|SUPPORT|ADMIN  deriving (Show,Eq, Typeable, Ord)
instance Enum PrivilegeLevel where
  fromEnum t = case t of
    NORMAL -> 1
    PREMIUM -> 3
    MANAGER -> 7
    SUPPORT -> 8
    ADMIN -> 9
  toEnum t = case t of
    1 -> NORMAL
    3 -> PREMIUM
    7 -> MANAGER
    8 -> SUPPORT
    9 -> ADMIN
    _ -> throw ThriftException
data QueryFormat = USER|SEXP  deriving (Show,Eq, Typeable, Ord)
instance Enum QueryFormat where
  fromEnum t = case t of
    USER -> 1
    SEXP -> 2
  toEnum t = case t of
    1 -> USER
    2 -> SEXP
    _ -> throw ThriftException
data NoteSortOrder = CREATED|UPDATED|RELEVANCE|UPDATE_SEQUENCE_NUMBER|TITLE  deriving (Show,Eq, Typeable, Ord)
instance Enum NoteSortOrder where
  fromEnum t = case t of
    CREATED -> 1
    UPDATED -> 2
    RELEVANCE -> 3
    UPDATE_SEQUENCE_NUMBER -> 4
    TITLE -> 5
  toEnum t = case t of
    1 -> CREATED
    2 -> UPDATED
    3 -> RELEVANCE
    4 -> UPDATE_SEQUENCE_NUMBER
    5 -> TITLE
    _ -> throw ThriftException
data PremiumOrderStatus = NONE|PENDING|ACTIVE|FAILED|CANCELLATION_PENDING|CANCELED  deriving (Show,Eq, Typeable, Ord)
instance Enum PremiumOrderStatus where
  fromEnum t = case t of
    NONE -> 0
    PENDING -> 1
    ACTIVE -> 2
    FAILED -> 3
    CANCELLATION_PENDING -> 4
    CANCELED -> 5
  toEnum t = case t of
    0 -> NONE
    1 -> PENDING
    2 -> ACTIVE
    3 -> FAILED
    4 -> CANCELLATION_PENDING
    5 -> CANCELED
    _ -> throw ThriftException
type UserID = Int32

type Guid = String

type Timestamp = Int64

data Data = Data{f_Data_bodyHash :: Maybe ByteString,f_Data_size :: Maybe Int32,f_Data_body :: Maybe ByteString} deriving (Show,Eq,Ord,Typeable)
write_Data oprot record = do
  writeStructBegin oprot "Data"
  case f_Data_bodyHash record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("bodyHash",T_STRING,1)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_Data_size record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("size",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Data_body record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("body",T_STRING,3)
    writeBinary oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Data_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_STRING then do
        s <- readBinary iprot
        read_Data_fields iprot record{f_Data_bodyHash=Just s}
        else do
          skip iprot _t3
          read_Data_fields iprot record
      2 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_Data_fields iprot record{f_Data_size=Just s}
        else do
          skip iprot _t3
          read_Data_fields iprot record
      3 -> if _t3 == T_STRING then do
        s <- readBinary iprot
        read_Data_fields iprot record{f_Data_body=Just s}
        else do
          skip iprot _t3
          read_Data_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Data_fields iprot record
read_Data iprot = do
  _ <- readStructBegin iprot
  record <- read_Data_fields iprot (Data{f_Data_bodyHash=Nothing,f_Data_size=Nothing,f_Data_body=Nothing})
  readStructEnd iprot
  return record
data UserAttributes = UserAttributes{f_UserAttributes_defaultLocationName :: Maybe String,f_UserAttributes_defaultLatitude :: Maybe Double,f_UserAttributes_defaultLongitude :: Maybe Double,f_UserAttributes_preactivation :: Maybe Bool,f_UserAttributes_viewedPromotions :: Maybe [String],f_UserAttributes_incomingEmailAddress :: Maybe String,f_UserAttributes_recentMailedAddresses :: Maybe [String],f_UserAttributes_comments :: Maybe String,f_UserAttributes_dateAgreedToTermsOfService :: Maybe Int64,f_UserAttributes_maxReferrals :: Maybe Int32,f_UserAttributes_referralCount :: Maybe Int32,f_UserAttributes_refererCode :: Maybe String,f_UserAttributes_sentEmailDate :: Maybe Int64,f_UserAttributes_sentEmailCount :: Maybe Int32,f_UserAttributes_dailyEmailLimit :: Maybe Int32,f_UserAttributes_emailOptOutDate :: Maybe Int64,f_UserAttributes_partnerEmailOptInDate :: Maybe Int64,f_UserAttributes_preferredLanguage :: Maybe String,f_UserAttributes_preferredCountry :: Maybe String,f_UserAttributes_clipFullPage :: Maybe Bool,f_UserAttributes_twitterUserName :: Maybe String,f_UserAttributes_twitterId :: Maybe String,f_UserAttributes_groupName :: Maybe String,f_UserAttributes_recognitionLanguage :: Maybe String,f_UserAttributes_customerProfileId :: Maybe Int64,f_UserAttributes_referralProof :: Maybe String,f_UserAttributes_educationalDiscount :: Maybe Bool,f_UserAttributes_businessAddress :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_UserAttributes oprot record = do
  writeStructBegin oprot "UserAttributes"
  case f_UserAttributes_defaultLocationName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defaultLocationName",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_defaultLatitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defaultLatitude",T_DOUBLE,2)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_defaultLongitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defaultLongitude",T_DOUBLE,3)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_preactivation record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("preactivation",T_BOOL,4)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_viewedPromotions record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("viewedPromotions",T_LIST,5)
    (let {f [] = return (); f (_viter7:t) = do {writeString oprot _viter7;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_UserAttributes_incomingEmailAddress record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("incomingEmailAddress",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_recentMailedAddresses record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("recentMailedAddresses",T_LIST,7)
    (let {f [] = return (); f (_viter8:t) = do {writeString oprot _viter8;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_UserAttributes_comments record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("comments",T_STRING,9)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_dateAgreedToTermsOfService record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("dateAgreedToTermsOfService",T_I64,11)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_maxReferrals record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("maxReferrals",T_I32,12)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_referralCount record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("referralCount",T_I32,13)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_refererCode record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("refererCode",T_STRING,14)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_sentEmailDate record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sentEmailDate",T_I64,15)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_sentEmailCount record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sentEmailCount",T_I32,16)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_dailyEmailLimit record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("dailyEmailLimit",T_I32,17)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_emailOptOutDate record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("emailOptOutDate",T_I64,18)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_partnerEmailOptInDate record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("partnerEmailOptInDate",T_I64,19)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_preferredLanguage record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("preferredLanguage",T_STRING,20)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_preferredCountry record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("preferredCountry",T_STRING,21)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_clipFullPage record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("clipFullPage",T_BOOL,22)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_twitterUserName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("twitterUserName",T_STRING,23)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_twitterId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("twitterId",T_STRING,24)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_groupName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("groupName",T_STRING,25)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_recognitionLanguage record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("recognitionLanguage",T_STRING,26)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_customerProfileId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("customerProfileId",T_I64,27)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_referralProof record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("referralProof",T_STRING,28)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_educationalDiscount record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("educationalDiscount",T_BOOL,29)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_UserAttributes_businessAddress record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("businessAddress",T_STRING,30)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_UserAttributes_fields iprot record = do
  (_,_t10,_id11) <- readFieldBegin iprot
  if _t10 == T_STOP then return record else
    case _id11 of 
      1 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_defaultLocationName=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      2 -> if _t10 == T_DOUBLE then do
        s <- readDouble iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_defaultLatitude=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      3 -> if _t10 == T_DOUBLE then do
        s <- readDouble iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_defaultLongitude=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      4 -> if _t10 == T_BOOL then do
        s <- readBool iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_preactivation=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      5 -> if _t10 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype15,_size12) <- readListBegin iprot; f _size12})
        read_UserAttributes_fields iprot record{f_UserAttributes_viewedPromotions=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      6 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_incomingEmailAddress=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      7 -> if _t10 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype20,_size17) <- readListBegin iprot; f _size17})
        read_UserAttributes_fields iprot record{f_UserAttributes_recentMailedAddresses=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      9 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_comments=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      11 -> if _t10 == T_I64 then do
        s <- readI64 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_dateAgreedToTermsOfService=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      12 -> if _t10 == T_I32 then do
        s <- readI32 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_maxReferrals=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      13 -> if _t10 == T_I32 then do
        s <- readI32 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_referralCount=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      14 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_refererCode=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      15 -> if _t10 == T_I64 then do
        s <- readI64 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_sentEmailDate=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      16 -> if _t10 == T_I32 then do
        s <- readI32 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_sentEmailCount=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      17 -> if _t10 == T_I32 then do
        s <- readI32 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_dailyEmailLimit=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      18 -> if _t10 == T_I64 then do
        s <- readI64 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_emailOptOutDate=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      19 -> if _t10 == T_I64 then do
        s <- readI64 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_partnerEmailOptInDate=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      20 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_preferredLanguage=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      21 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_preferredCountry=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      22 -> if _t10 == T_BOOL then do
        s <- readBool iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_clipFullPage=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      23 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_twitterUserName=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      24 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_twitterId=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      25 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_groupName=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      26 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_recognitionLanguage=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      27 -> if _t10 == T_I64 then do
        s <- readI64 iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_customerProfileId=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      28 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_referralProof=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      29 -> if _t10 == T_BOOL then do
        s <- readBool iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_educationalDiscount=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      30 -> if _t10 == T_STRING then do
        s <- readString iprot
        read_UserAttributes_fields iprot record{f_UserAttributes_businessAddress=Just s}
        else do
          skip iprot _t10
          read_UserAttributes_fields iprot record
      _ -> do
        skip iprot _t10
        readFieldEnd iprot
        read_UserAttributes_fields iprot record
read_UserAttributes iprot = do
  _ <- readStructBegin iprot
  record <- read_UserAttributes_fields iprot (UserAttributes{f_UserAttributes_defaultLocationName=Nothing,f_UserAttributes_defaultLatitude=Nothing,f_UserAttributes_defaultLongitude=Nothing,f_UserAttributes_preactivation=Nothing,f_UserAttributes_viewedPromotions=Nothing,f_UserAttributes_incomingEmailAddress=Nothing,f_UserAttributes_recentMailedAddresses=Nothing,f_UserAttributes_comments=Nothing,f_UserAttributes_dateAgreedToTermsOfService=Nothing,f_UserAttributes_maxReferrals=Nothing,f_UserAttributes_referralCount=Nothing,f_UserAttributes_refererCode=Nothing,f_UserAttributes_sentEmailDate=Nothing,f_UserAttributes_sentEmailCount=Nothing,f_UserAttributes_dailyEmailLimit=Nothing,f_UserAttributes_emailOptOutDate=Nothing,f_UserAttributes_partnerEmailOptInDate=Nothing,f_UserAttributes_preferredLanguage=Nothing,f_UserAttributes_preferredCountry=Nothing,f_UserAttributes_clipFullPage=Nothing,f_UserAttributes_twitterUserName=Nothing,f_UserAttributes_twitterId=Nothing,f_UserAttributes_groupName=Nothing,f_UserAttributes_recognitionLanguage=Nothing,f_UserAttributes_customerProfileId=Nothing,f_UserAttributes_referralProof=Nothing,f_UserAttributes_educationalDiscount=Nothing,f_UserAttributes_businessAddress=Nothing})
  readStructEnd iprot
  return record
data Accounting = Accounting{f_Accounting_uploadLimit :: Maybe Int64,f_Accounting_uploadLimitEnd :: Maybe Int64,f_Accounting_uploadLimitNextMonth :: Maybe Int64,f_Accounting_premiumServiceStatus :: Maybe PremiumOrderStatus,f_Accounting_premiumOrderNumber :: Maybe String,f_Accounting_premiumCommerceService :: Maybe String,f_Accounting_premiumServiceStart :: Maybe Int64,f_Accounting_premiumServiceSKU :: Maybe String,f_Accounting_lastSuccessfulCharge :: Maybe Int64,f_Accounting_lastFailedCharge :: Maybe Int64,f_Accounting_lastFailedChargeReason :: Maybe String,f_Accounting_nextPaymentDue :: Maybe Int64,f_Accounting_premiumLockUntil :: Maybe Int64,f_Accounting_updated :: Maybe Int64,f_Accounting_premiumSubscriptionNumber :: Maybe String,f_Accounting_lastRequestedCharge :: Maybe Int64,f_Accounting_currency :: Maybe String,f_Accounting_unitPrice :: Maybe Int32} deriving (Show,Eq,Ord,Typeable)
write_Accounting oprot record = do
  writeStructBegin oprot "Accounting"
  case f_Accounting_uploadLimit record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("uploadLimit",T_I64,1)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_uploadLimitEnd record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("uploadLimitEnd",T_I64,2)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_uploadLimitNextMonth record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("uploadLimitNextMonth",T_I64,3)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumServiceStatus record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumServiceStatus",T_I32,4)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_Accounting_premiumOrderNumber record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumOrderNumber",T_STRING,5)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumCommerceService record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumCommerceService",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumServiceStart record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumServiceStart",T_I64,7)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumServiceSKU record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumServiceSKU",T_STRING,8)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_lastSuccessfulCharge record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("lastSuccessfulCharge",T_I64,9)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_lastFailedCharge record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("lastFailedCharge",T_I64,10)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_lastFailedChargeReason record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("lastFailedChargeReason",T_STRING,11)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_nextPaymentDue record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("nextPaymentDue",T_I64,12)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumLockUntil record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumLockUntil",T_I64,13)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_updated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updated",T_I64,14)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_premiumSubscriptionNumber record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("premiumSubscriptionNumber",T_STRING,16)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_lastRequestedCharge record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("lastRequestedCharge",T_I64,17)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Accounting_currency record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("currency",T_STRING,18)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Accounting_unitPrice record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("unitPrice",T_I32,19)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Accounting_fields iprot record = do
  (_,_t25,_id26) <- readFieldBegin iprot
  if _t25 == T_STOP then return record else
    case _id26 of 
      1 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_uploadLimit=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      2 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_uploadLimitEnd=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      3 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_uploadLimitNextMonth=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      4 -> if _t25 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_Accounting_fields iprot record{f_Accounting_premiumServiceStatus=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      5 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_premiumOrderNumber=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      6 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_premiumCommerceService=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      7 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_premiumServiceStart=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      8 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_premiumServiceSKU=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      9 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_lastSuccessfulCharge=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      10 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_lastFailedCharge=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      11 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_lastFailedChargeReason=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      12 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_nextPaymentDue=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      13 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_premiumLockUntil=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      14 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_updated=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      16 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_premiumSubscriptionNumber=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      17 -> if _t25 == T_I64 then do
        s <- readI64 iprot
        read_Accounting_fields iprot record{f_Accounting_lastRequestedCharge=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      18 -> if _t25 == T_STRING then do
        s <- readString iprot
        read_Accounting_fields iprot record{f_Accounting_currency=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      19 -> if _t25 == T_I32 then do
        s <- readI32 iprot
        read_Accounting_fields iprot record{f_Accounting_unitPrice=Just s}
        else do
          skip iprot _t25
          read_Accounting_fields iprot record
      _ -> do
        skip iprot _t25
        readFieldEnd iprot
        read_Accounting_fields iprot record
read_Accounting iprot = do
  _ <- readStructBegin iprot
  record <- read_Accounting_fields iprot (Accounting{f_Accounting_uploadLimit=Nothing,f_Accounting_uploadLimitEnd=Nothing,f_Accounting_uploadLimitNextMonth=Nothing,f_Accounting_premiumServiceStatus=Nothing,f_Accounting_premiumOrderNumber=Nothing,f_Accounting_premiumCommerceService=Nothing,f_Accounting_premiumServiceStart=Nothing,f_Accounting_premiumServiceSKU=Nothing,f_Accounting_lastSuccessfulCharge=Nothing,f_Accounting_lastFailedCharge=Nothing,f_Accounting_lastFailedChargeReason=Nothing,f_Accounting_nextPaymentDue=Nothing,f_Accounting_premiumLockUntil=Nothing,f_Accounting_updated=Nothing,f_Accounting_premiumSubscriptionNumber=Nothing,f_Accounting_lastRequestedCharge=Nothing,f_Accounting_currency=Nothing,f_Accounting_unitPrice=Nothing})
  readStructEnd iprot
  return record
data User = User{f_User_id :: Maybe Int32,f_User_username :: Maybe String,f_User_email :: Maybe String,f_User_name :: Maybe String,f_User_timezone :: Maybe String,f_User_privilege :: Maybe PrivilegeLevel,f_User_created :: Maybe Int64,f_User_updated :: Maybe Int64,f_User_deleted :: Maybe Int64,f_User_active :: Maybe Bool,f_User_shardId :: Maybe String,f_User_attributes :: Maybe UserAttributes,f_User_accounting :: Maybe Accounting} deriving (Show,Eq,Ord,Typeable)
write_User oprot record = do
  writeStructBegin oprot "User"
  case f_User_id record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("id",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_User_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_User_email record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("email",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_User_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_User_timezone record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("timezone",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_User_privilege record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("privilege",T_I32,7)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_User_created record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("created",T_I64,9)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_User_updated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updated",T_I64,10)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_User_deleted record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("deleted",T_I64,11)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_User_active record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("active",T_BOOL,13)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_User_shardId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shardId",T_STRING,14)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_User_attributes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attributes",T_STRUCT,15)
    write_UserAttributes oprot _v
    writeFieldEnd oprot}
  case f_User_accounting record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("accounting",T_STRUCT,16)
    write_Accounting oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_User_fields iprot record = do
  (_,_t30,_id31) <- readFieldBegin iprot
  if _t30 == T_STOP then return record else
    case _id31 of 
      1 -> if _t30 == T_I32 then do
        s <- readI32 iprot
        read_User_fields iprot record{f_User_id=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      2 -> if _t30 == T_STRING then do
        s <- readString iprot
        read_User_fields iprot record{f_User_username=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      3 -> if _t30 == T_STRING then do
        s <- readString iprot
        read_User_fields iprot record{f_User_email=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      4 -> if _t30 == T_STRING then do
        s <- readString iprot
        read_User_fields iprot record{f_User_name=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      6 -> if _t30 == T_STRING then do
        s <- readString iprot
        read_User_fields iprot record{f_User_timezone=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      7 -> if _t30 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_User_fields iprot record{f_User_privilege=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      9 -> if _t30 == T_I64 then do
        s <- readI64 iprot
        read_User_fields iprot record{f_User_created=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      10 -> if _t30 == T_I64 then do
        s <- readI64 iprot
        read_User_fields iprot record{f_User_updated=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      11 -> if _t30 == T_I64 then do
        s <- readI64 iprot
        read_User_fields iprot record{f_User_deleted=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      13 -> if _t30 == T_BOOL then do
        s <- readBool iprot
        read_User_fields iprot record{f_User_active=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      14 -> if _t30 == T_STRING then do
        s <- readString iprot
        read_User_fields iprot record{f_User_shardId=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      15 -> if _t30 == T_STRUCT then do
        s <- (read_UserAttributes iprot)
        read_User_fields iprot record{f_User_attributes=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      16 -> if _t30 == T_STRUCT then do
        s <- (read_Accounting iprot)
        read_User_fields iprot record{f_User_accounting=Just s}
        else do
          skip iprot _t30
          read_User_fields iprot record
      _ -> do
        skip iprot _t30
        readFieldEnd iprot
        read_User_fields iprot record
read_User iprot = do
  _ <- readStructBegin iprot
  record <- read_User_fields iprot (User{f_User_id=Nothing,f_User_username=Nothing,f_User_email=Nothing,f_User_name=Nothing,f_User_timezone=Nothing,f_User_privilege=Nothing,f_User_created=Nothing,f_User_updated=Nothing,f_User_deleted=Nothing,f_User_active=Nothing,f_User_shardId=Nothing,f_User_attributes=Nothing,f_User_accounting=Nothing})
  readStructEnd iprot
  return record
data Tag = Tag{f_Tag_guid :: Maybe String,f_Tag_name :: Maybe String,f_Tag_parentGuid :: Maybe String,f_Tag_updateSequenceNum :: Maybe Int32} deriving (Show,Eq,Ord,Typeable)
write_Tag oprot record = do
  writeStructBegin oprot "Tag"
  case f_Tag_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Tag_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Tag_parentGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("parentGuid",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Tag_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Tag_fields iprot record = do
  (_,_t35,_id36) <- readFieldBegin iprot
  if _t35 == T_STOP then return record else
    case _id36 of 
      1 -> if _t35 == T_STRING then do
        s <- readString iprot
        read_Tag_fields iprot record{f_Tag_guid=Just s}
        else do
          skip iprot _t35
          read_Tag_fields iprot record
      2 -> if _t35 == T_STRING then do
        s <- readString iprot
        read_Tag_fields iprot record{f_Tag_name=Just s}
        else do
          skip iprot _t35
          read_Tag_fields iprot record
      3 -> if _t35 == T_STRING then do
        s <- readString iprot
        read_Tag_fields iprot record{f_Tag_parentGuid=Just s}
        else do
          skip iprot _t35
          read_Tag_fields iprot record
      4 -> if _t35 == T_I32 then do
        s <- readI32 iprot
        read_Tag_fields iprot record{f_Tag_updateSequenceNum=Just s}
        else do
          skip iprot _t35
          read_Tag_fields iprot record
      _ -> do
        skip iprot _t35
        readFieldEnd iprot
        read_Tag_fields iprot record
read_Tag iprot = do
  _ <- readStructBegin iprot
  record <- read_Tag_fields iprot (Tag{f_Tag_guid=Nothing,f_Tag_name=Nothing,f_Tag_parentGuid=Nothing,f_Tag_updateSequenceNum=Nothing})
  readStructEnd iprot
  return record
data ResourceAttributes = ResourceAttributes{f_ResourceAttributes_sourceURL :: Maybe String,f_ResourceAttributes_timestamp :: Maybe Int64,f_ResourceAttributes_latitude :: Maybe Double,f_ResourceAttributes_longitude :: Maybe Double,f_ResourceAttributes_altitude :: Maybe Double,f_ResourceAttributes_cameraMake :: Maybe String,f_ResourceAttributes_cameraModel :: Maybe String,f_ResourceAttributes_clientWillIndex :: Maybe Bool,f_ResourceAttributes_recoType :: Maybe String,f_ResourceAttributes_fileName :: Maybe String,f_ResourceAttributes_attachment :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_ResourceAttributes oprot record = do
  writeStructBegin oprot "ResourceAttributes"
  case f_ResourceAttributes_sourceURL record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sourceURL",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_timestamp record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("timestamp",T_I64,2)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_latitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("latitude",T_DOUBLE,3)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_longitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("longitude",T_DOUBLE,4)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_altitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("altitude",T_DOUBLE,5)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_cameraMake record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cameraMake",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_cameraModel record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cameraModel",T_STRING,7)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_clientWillIndex record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("clientWillIndex",T_BOOL,8)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_recoType record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("recoType",T_STRING,9)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_fileName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("fileName",T_STRING,10)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_ResourceAttributes_attachment record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attachment",T_BOOL,11)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ResourceAttributes_fields iprot record = do
  (_,_t40,_id41) <- readFieldBegin iprot
  if _t40 == T_STOP then return record else
    case _id41 of 
      1 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_sourceURL=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      2 -> if _t40 == T_I64 then do
        s <- readI64 iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_timestamp=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      3 -> if _t40 == T_DOUBLE then do
        s <- readDouble iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_latitude=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      4 -> if _t40 == T_DOUBLE then do
        s <- readDouble iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_longitude=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      5 -> if _t40 == T_DOUBLE then do
        s <- readDouble iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_altitude=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      6 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_cameraMake=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      7 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_cameraModel=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      8 -> if _t40 == T_BOOL then do
        s <- readBool iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_clientWillIndex=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      9 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_recoType=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      10 -> if _t40 == T_STRING then do
        s <- readString iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_fileName=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      11 -> if _t40 == T_BOOL then do
        s <- readBool iprot
        read_ResourceAttributes_fields iprot record{f_ResourceAttributes_attachment=Just s}
        else do
          skip iprot _t40
          read_ResourceAttributes_fields iprot record
      _ -> do
        skip iprot _t40
        readFieldEnd iprot
        read_ResourceAttributes_fields iprot record
read_ResourceAttributes iprot = do
  _ <- readStructBegin iprot
  record <- read_ResourceAttributes_fields iprot (ResourceAttributes{f_ResourceAttributes_sourceURL=Nothing,f_ResourceAttributes_timestamp=Nothing,f_ResourceAttributes_latitude=Nothing,f_ResourceAttributes_longitude=Nothing,f_ResourceAttributes_altitude=Nothing,f_ResourceAttributes_cameraMake=Nothing,f_ResourceAttributes_cameraModel=Nothing,f_ResourceAttributes_clientWillIndex=Nothing,f_ResourceAttributes_recoType=Nothing,f_ResourceAttributes_fileName=Nothing,f_ResourceAttributes_attachment=Nothing})
  readStructEnd iprot
  return record
data Resource = Resource{f_Resource_guid :: Maybe String,f_Resource_noteGuid :: Maybe String,f_Resource_data :: Maybe Data,f_Resource_mime :: Maybe String,f_Resource_width :: Maybe Int16,f_Resource_height :: Maybe Int16,f_Resource_duration :: Maybe Int16,f_Resource_active :: Maybe Bool,f_Resource_recognition :: Maybe Data,f_Resource_attributes :: Maybe ResourceAttributes,f_Resource_updateSequenceNum :: Maybe Int32,f_Resource_alternateData :: Maybe Data} deriving (Show,Eq,Ord,Typeable)
write_Resource oprot record = do
  writeStructBegin oprot "Resource"
  case f_Resource_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Resource_noteGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("noteGuid",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Resource_data record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("data",T_STRUCT,3)
    write_Data oprot _v
    writeFieldEnd oprot}
  case f_Resource_mime record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("mime",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Resource_width record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("width",T_I16,5)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Resource_height record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("height",T_I16,6)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Resource_duration record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("duration",T_I16,7)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Resource_active record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("active",T_BOOL,8)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Resource_recognition record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("recognition",T_STRUCT,9)
    write_Data oprot _v
    writeFieldEnd oprot}
  case f_Resource_attributes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attributes",T_STRUCT,11)
    write_ResourceAttributes oprot _v
    writeFieldEnd oprot}
  case f_Resource_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,12)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Resource_alternateData record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("alternateData",T_STRUCT,13)
    write_Data oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Resource_fields iprot record = do
  (_,_t45,_id46) <- readFieldBegin iprot
  if _t45 == T_STOP then return record else
    case _id46 of 
      1 -> if _t45 == T_STRING then do
        s <- readString iprot
        read_Resource_fields iprot record{f_Resource_guid=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      2 -> if _t45 == T_STRING then do
        s <- readString iprot
        read_Resource_fields iprot record{f_Resource_noteGuid=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      3 -> if _t45 == T_STRUCT then do
        s <- (read_Data iprot)
        read_Resource_fields iprot record{f_Resource_data=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      4 -> if _t45 == T_STRING then do
        s <- readString iprot
        read_Resource_fields iprot record{f_Resource_mime=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      5 -> if _t45 == T_I16 then do
        s <- readI16 iprot
        read_Resource_fields iprot record{f_Resource_width=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      6 -> if _t45 == T_I16 then do
        s <- readI16 iprot
        read_Resource_fields iprot record{f_Resource_height=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      7 -> if _t45 == T_I16 then do
        s <- readI16 iprot
        read_Resource_fields iprot record{f_Resource_duration=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      8 -> if _t45 == T_BOOL then do
        s <- readBool iprot
        read_Resource_fields iprot record{f_Resource_active=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      9 -> if _t45 == T_STRUCT then do
        s <- (read_Data iprot)
        read_Resource_fields iprot record{f_Resource_recognition=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      11 -> if _t45 == T_STRUCT then do
        s <- (read_ResourceAttributes iprot)
        read_Resource_fields iprot record{f_Resource_attributes=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      12 -> if _t45 == T_I32 then do
        s <- readI32 iprot
        read_Resource_fields iprot record{f_Resource_updateSequenceNum=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      13 -> if _t45 == T_STRUCT then do
        s <- (read_Data iprot)
        read_Resource_fields iprot record{f_Resource_alternateData=Just s}
        else do
          skip iprot _t45
          read_Resource_fields iprot record
      _ -> do
        skip iprot _t45
        readFieldEnd iprot
        read_Resource_fields iprot record
read_Resource iprot = do
  _ <- readStructBegin iprot
  record <- read_Resource_fields iprot (Resource{f_Resource_guid=Nothing,f_Resource_noteGuid=Nothing,f_Resource_data=Nothing,f_Resource_mime=Nothing,f_Resource_width=Nothing,f_Resource_height=Nothing,f_Resource_duration=Nothing,f_Resource_active=Nothing,f_Resource_recognition=Nothing,f_Resource_attributes=Nothing,f_Resource_updateSequenceNum=Nothing,f_Resource_alternateData=Nothing})
  readStructEnd iprot
  return record
data NoteAttributes = NoteAttributes{f_NoteAttributes_subjectDate :: Maybe Int64,f_NoteAttributes_latitude :: Maybe Double,f_NoteAttributes_longitude :: Maybe Double,f_NoteAttributes_altitude :: Maybe Double,f_NoteAttributes_author :: Maybe String,f_NoteAttributes_source :: Maybe String,f_NoteAttributes_sourceURL :: Maybe String,f_NoteAttributes_sourceApplication :: Maybe String,f_NoteAttributes_shareDate :: Maybe Int64} deriving (Show,Eq,Ord,Typeable)
write_NoteAttributes oprot record = do
  writeStructBegin oprot "NoteAttributes"
  case f_NoteAttributes_subjectDate record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("subjectDate",T_I64,1)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_latitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("latitude",T_DOUBLE,10)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_longitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("longitude",T_DOUBLE,11)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_altitude record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("altitude",T_DOUBLE,12)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_author record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("author",T_STRING,13)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_source record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("source",T_STRING,14)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_sourceURL record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sourceURL",T_STRING,15)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_sourceApplication record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sourceApplication",T_STRING,16)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_NoteAttributes_shareDate record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shareDate",T_I64,17)
    writeI64 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_NoteAttributes_fields iprot record = do
  (_,_t50,_id51) <- readFieldBegin iprot
  if _t50 == T_STOP then return record else
    case _id51 of 
      1 -> if _t50 == T_I64 then do
        s <- readI64 iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_subjectDate=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      10 -> if _t50 == T_DOUBLE then do
        s <- readDouble iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_latitude=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      11 -> if _t50 == T_DOUBLE then do
        s <- readDouble iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_longitude=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      12 -> if _t50 == T_DOUBLE then do
        s <- readDouble iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_altitude=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      13 -> if _t50 == T_STRING then do
        s <- readString iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_author=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      14 -> if _t50 == T_STRING then do
        s <- readString iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_source=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      15 -> if _t50 == T_STRING then do
        s <- readString iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_sourceURL=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      16 -> if _t50 == T_STRING then do
        s <- readString iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_sourceApplication=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      17 -> if _t50 == T_I64 then do
        s <- readI64 iprot
        read_NoteAttributes_fields iprot record{f_NoteAttributes_shareDate=Just s}
        else do
          skip iprot _t50
          read_NoteAttributes_fields iprot record
      _ -> do
        skip iprot _t50
        readFieldEnd iprot
        read_NoteAttributes_fields iprot record
read_NoteAttributes iprot = do
  _ <- readStructBegin iprot
  record <- read_NoteAttributes_fields iprot (NoteAttributes{f_NoteAttributes_subjectDate=Nothing,f_NoteAttributes_latitude=Nothing,f_NoteAttributes_longitude=Nothing,f_NoteAttributes_altitude=Nothing,f_NoteAttributes_author=Nothing,f_NoteAttributes_source=Nothing,f_NoteAttributes_sourceURL=Nothing,f_NoteAttributes_sourceApplication=Nothing,f_NoteAttributes_shareDate=Nothing})
  readStructEnd iprot
  return record
data Note = Note{f_Note_guid :: Maybe String,f_Note_title :: Maybe String,f_Note_content :: Maybe String,f_Note_contentHash :: Maybe ByteString,f_Note_contentLength :: Maybe Int32,f_Note_created :: Maybe Int64,f_Note_updated :: Maybe Int64,f_Note_deleted :: Maybe Int64,f_Note_active :: Maybe Bool,f_Note_updateSequenceNum :: Maybe Int32,f_Note_notebookGuid :: Maybe String,f_Note_tagGuids :: Maybe [String],f_Note_resources :: Maybe [Resource],f_Note_attributes :: Maybe NoteAttributes,f_Note_tagNames :: Maybe [String]} deriving (Show,Eq,Ord,Typeable)
write_Note oprot record = do
  writeStructBegin oprot "Note"
  case f_Note_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Note_title record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("title",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Note_content record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("content",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Note_contentHash record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("contentHash",T_STRING,4)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_Note_contentLength record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("contentLength",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Note_created record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("created",T_I64,6)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Note_updated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updated",T_I64,7)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Note_deleted record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("deleted",T_I64,8)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Note_active record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("active",T_BOOL,9)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Note_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,10)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Note_notebookGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebookGuid",T_STRING,11)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Note_tagGuids record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tagGuids",T_LIST,12)
    (let {f [] = return (); f (_viter54:t) = do {writeString oprot _viter54;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Note_resources record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("resources",T_LIST,13)
    (let {f [] = return (); f (_viter55:t) = do {write_Resource oprot _viter55;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  case f_Note_attributes record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("attributes",T_STRUCT,14)
    write_NoteAttributes oprot _v
    writeFieldEnd oprot}
  case f_Note_tagNames record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tagNames",T_LIST,15)
    (let {f [] = return (); f (_viter56:t) = do {writeString oprot _viter56;f t}} in do {writeListBegin oprot (T_STRING,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Note_fields iprot record = do
  (_,_t58,_id59) <- readFieldBegin iprot
  if _t58 == T_STOP then return record else
    case _id59 of 
      1 -> if _t58 == T_STRING then do
        s <- readString iprot
        read_Note_fields iprot record{f_Note_guid=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      2 -> if _t58 == T_STRING then do
        s <- readString iprot
        read_Note_fields iprot record{f_Note_title=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      3 -> if _t58 == T_STRING then do
        s <- readString iprot
        read_Note_fields iprot record{f_Note_content=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      4 -> if _t58 == T_STRING then do
        s <- readBinary iprot
        read_Note_fields iprot record{f_Note_contentHash=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      5 -> if _t58 == T_I32 then do
        s <- readI32 iprot
        read_Note_fields iprot record{f_Note_contentLength=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      6 -> if _t58 == T_I64 then do
        s <- readI64 iprot
        read_Note_fields iprot record{f_Note_created=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      7 -> if _t58 == T_I64 then do
        s <- readI64 iprot
        read_Note_fields iprot record{f_Note_updated=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      8 -> if _t58 == T_I64 then do
        s <- readI64 iprot
        read_Note_fields iprot record{f_Note_deleted=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      9 -> if _t58 == T_BOOL then do
        s <- readBool iprot
        read_Note_fields iprot record{f_Note_active=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      10 -> if _t58 == T_I32 then do
        s <- readI32 iprot
        read_Note_fields iprot record{f_Note_updateSequenceNum=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      11 -> if _t58 == T_STRING then do
        s <- readString iprot
        read_Note_fields iprot record{f_Note_notebookGuid=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      12 -> if _t58 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype63,_size60) <- readListBegin iprot; f _size60})
        read_Note_fields iprot record{f_Note_tagGuids=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      13 -> if _t58 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Resource iprot);r <- f (n-1); return $ v:r}} in do {(_etype68,_size65) <- readListBegin iprot; f _size65})
        read_Note_fields iprot record{f_Note_resources=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      14 -> if _t58 == T_STRUCT then do
        s <- (read_NoteAttributes iprot)
        read_Note_fields iprot record{f_Note_attributes=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      15 -> if _t58 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype73,_size70) <- readListBegin iprot; f _size70})
        read_Note_fields iprot record{f_Note_tagNames=Just s}
        else do
          skip iprot _t58
          read_Note_fields iprot record
      _ -> do
        skip iprot _t58
        readFieldEnd iprot
        read_Note_fields iprot record
read_Note iprot = do
  _ <- readStructBegin iprot
  record <- read_Note_fields iprot (Note{f_Note_guid=Nothing,f_Note_title=Nothing,f_Note_content=Nothing,f_Note_contentHash=Nothing,f_Note_contentLength=Nothing,f_Note_created=Nothing,f_Note_updated=Nothing,f_Note_deleted=Nothing,f_Note_active=Nothing,f_Note_updateSequenceNum=Nothing,f_Note_notebookGuid=Nothing,f_Note_tagGuids=Nothing,f_Note_resources=Nothing,f_Note_attributes=Nothing,f_Note_tagNames=Nothing})
  readStructEnd iprot
  return record
data Publishing = Publishing{f_Publishing_uri :: Maybe String,f_Publishing_order :: Maybe NoteSortOrder,f_Publishing_ascending :: Maybe Bool,f_Publishing_publicDescription :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_Publishing oprot record = do
  writeStructBegin oprot "Publishing"
  case f_Publishing_uri record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("uri",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Publishing_order record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("order",T_I32,2)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_Publishing_ascending record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("ascending",T_BOOL,3)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Publishing_publicDescription record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("publicDescription",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Publishing_fields iprot record = do
  (_,_t78,_id79) <- readFieldBegin iprot
  if _t78 == T_STOP then return record else
    case _id79 of 
      1 -> if _t78 == T_STRING then do
        s <- readString iprot
        read_Publishing_fields iprot record{f_Publishing_uri=Just s}
        else do
          skip iprot _t78
          read_Publishing_fields iprot record
      2 -> if _t78 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_Publishing_fields iprot record{f_Publishing_order=Just s}
        else do
          skip iprot _t78
          read_Publishing_fields iprot record
      3 -> if _t78 == T_BOOL then do
        s <- readBool iprot
        read_Publishing_fields iprot record{f_Publishing_ascending=Just s}
        else do
          skip iprot _t78
          read_Publishing_fields iprot record
      4 -> if _t78 == T_STRING then do
        s <- readString iprot
        read_Publishing_fields iprot record{f_Publishing_publicDescription=Just s}
        else do
          skip iprot _t78
          read_Publishing_fields iprot record
      _ -> do
        skip iprot _t78
        readFieldEnd iprot
        read_Publishing_fields iprot record
read_Publishing iprot = do
  _ <- readStructBegin iprot
  record <- read_Publishing_fields iprot (Publishing{f_Publishing_uri=Nothing,f_Publishing_order=Nothing,f_Publishing_ascending=Nothing,f_Publishing_publicDescription=Nothing})
  readStructEnd iprot
  return record
data Notebook = Notebook{f_Notebook_guid :: Maybe String,f_Notebook_name :: Maybe String,f_Notebook_updateSequenceNum :: Maybe Int32,f_Notebook_defaultNotebook :: Maybe Bool,f_Notebook_serviceCreated :: Maybe Int64,f_Notebook_serviceUpdated :: Maybe Int64,f_Notebook_publishing :: Maybe Publishing,f_Notebook_published :: Maybe Bool,f_Notebook_stack :: Maybe String,f_Notebook_sharedNotebookIds :: Maybe [Int64]} deriving (Show,Eq,Ord,Typeable)
write_Notebook oprot record = do
  writeStructBegin oprot "Notebook"
  case f_Notebook_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Notebook_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Notebook_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Notebook_defaultNotebook record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("defaultNotebook",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Notebook_serviceCreated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("serviceCreated",T_I64,7)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Notebook_serviceUpdated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("serviceUpdated",T_I64,8)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_Notebook_publishing record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("publishing",T_STRUCT,10)
    write_Publishing oprot _v
    writeFieldEnd oprot}
  case f_Notebook_published record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("published",T_BOOL,11)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_Notebook_stack record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("stack",T_STRING,12)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Notebook_sharedNotebookIds record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("sharedNotebookIds",T_LIST,13)
    (let {f [] = return (); f (_viter82:t) = do {writeI64 oprot _viter82;f t}} in do {writeListBegin oprot (T_I64,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Notebook_fields iprot record = do
  (_,_t84,_id85) <- readFieldBegin iprot
  if _t84 == T_STOP then return record else
    case _id85 of 
      1 -> if _t84 == T_STRING then do
        s <- readString iprot
        read_Notebook_fields iprot record{f_Notebook_guid=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      2 -> if _t84 == T_STRING then do
        s <- readString iprot
        read_Notebook_fields iprot record{f_Notebook_name=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      5 -> if _t84 == T_I32 then do
        s <- readI32 iprot
        read_Notebook_fields iprot record{f_Notebook_updateSequenceNum=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      6 -> if _t84 == T_BOOL then do
        s <- readBool iprot
        read_Notebook_fields iprot record{f_Notebook_defaultNotebook=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      7 -> if _t84 == T_I64 then do
        s <- readI64 iprot
        read_Notebook_fields iprot record{f_Notebook_serviceCreated=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      8 -> if _t84 == T_I64 then do
        s <- readI64 iprot
        read_Notebook_fields iprot record{f_Notebook_serviceUpdated=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      10 -> if _t84 == T_STRUCT then do
        s <- (read_Publishing iprot)
        read_Notebook_fields iprot record{f_Notebook_publishing=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      11 -> if _t84 == T_BOOL then do
        s <- readBool iprot
        read_Notebook_fields iprot record{f_Notebook_published=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      12 -> if _t84 == T_STRING then do
        s <- readString iprot
        read_Notebook_fields iprot record{f_Notebook_stack=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      13 -> if _t84 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- readI64 iprot;r <- f (n-1); return $ v:r}} in do {(_etype89,_size86) <- readListBegin iprot; f _size86})
        read_Notebook_fields iprot record{f_Notebook_sharedNotebookIds=Just s}
        else do
          skip iprot _t84
          read_Notebook_fields iprot record
      _ -> do
        skip iprot _t84
        readFieldEnd iprot
        read_Notebook_fields iprot record
read_Notebook iprot = do
  _ <- readStructBegin iprot
  record <- read_Notebook_fields iprot (Notebook{f_Notebook_guid=Nothing,f_Notebook_name=Nothing,f_Notebook_updateSequenceNum=Nothing,f_Notebook_defaultNotebook=Nothing,f_Notebook_serviceCreated=Nothing,f_Notebook_serviceUpdated=Nothing,f_Notebook_publishing=Nothing,f_Notebook_published=Nothing,f_Notebook_stack=Nothing,f_Notebook_sharedNotebookIds=Nothing})
  readStructEnd iprot
  return record
data SavedSearch = SavedSearch{f_SavedSearch_guid :: Maybe String,f_SavedSearch_name :: Maybe String,f_SavedSearch_query :: Maybe String,f_SavedSearch_format :: Maybe QueryFormat,f_SavedSearch_updateSequenceNum :: Maybe Int32} deriving (Show,Eq,Ord,Typeable)
write_SavedSearch oprot record = do
  writeStructBegin oprot "SavedSearch"
  case f_SavedSearch_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SavedSearch_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SavedSearch_query record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("query",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SavedSearch_format record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("format",T_I32,4)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_SavedSearch_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_SavedSearch_fields iprot record = do
  (_,_t94,_id95) <- readFieldBegin iprot
  if _t94 == T_STOP then return record else
    case _id95 of 
      1 -> if _t94 == T_STRING then do
        s <- readString iprot
        read_SavedSearch_fields iprot record{f_SavedSearch_guid=Just s}
        else do
          skip iprot _t94
          read_SavedSearch_fields iprot record
      2 -> if _t94 == T_STRING then do
        s <- readString iprot
        read_SavedSearch_fields iprot record{f_SavedSearch_name=Just s}
        else do
          skip iprot _t94
          read_SavedSearch_fields iprot record
      3 -> if _t94 == T_STRING then do
        s <- readString iprot
        read_SavedSearch_fields iprot record{f_SavedSearch_query=Just s}
        else do
          skip iprot _t94
          read_SavedSearch_fields iprot record
      4 -> if _t94 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_SavedSearch_fields iprot record{f_SavedSearch_format=Just s}
        else do
          skip iprot _t94
          read_SavedSearch_fields iprot record
      5 -> if _t94 == T_I32 then do
        s <- readI32 iprot
        read_SavedSearch_fields iprot record{f_SavedSearch_updateSequenceNum=Just s}
        else do
          skip iprot _t94
          read_SavedSearch_fields iprot record
      _ -> do
        skip iprot _t94
        readFieldEnd iprot
        read_SavedSearch_fields iprot record
read_SavedSearch iprot = do
  _ <- readStructBegin iprot
  record <- read_SavedSearch_fields iprot (SavedSearch{f_SavedSearch_guid=Nothing,f_SavedSearch_name=Nothing,f_SavedSearch_query=Nothing,f_SavedSearch_format=Nothing,f_SavedSearch_updateSequenceNum=Nothing})
  readStructEnd iprot
  return record
data Ad = Ad{f_Ad_id :: Maybe Int32,f_Ad_width :: Maybe Int16,f_Ad_height :: Maybe Int16,f_Ad_advertiserName :: Maybe String,f_Ad_imageUrl :: Maybe String,f_Ad_destinationUrl :: Maybe String,f_Ad_displaySeconds :: Maybe Int16,f_Ad_score :: Maybe Double,f_Ad_image :: Maybe ByteString,f_Ad_imageMime :: Maybe String,f_Ad_html :: Maybe String,f_Ad_displayFrequency :: Maybe Double,f_Ad_openInTrunk :: Maybe Bool} deriving (Show,Eq,Ord,Typeable)
write_Ad oprot record = do
  writeStructBegin oprot "Ad"
  case f_Ad_id record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("id",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Ad_width record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("width",T_I16,2)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Ad_height record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("height",T_I16,3)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Ad_advertiserName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("advertiserName",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Ad_imageUrl record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("imageUrl",T_STRING,5)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Ad_destinationUrl record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("destinationUrl",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Ad_displaySeconds record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("displaySeconds",T_I16,7)
    writeI16 oprot _v
    writeFieldEnd oprot}
  case f_Ad_score record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("score",T_DOUBLE,8)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_Ad_image record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("image",T_STRING,9)
    writeBinary oprot _v
    writeFieldEnd oprot}
  case f_Ad_imageMime record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("imageMime",T_STRING,10)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Ad_html record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("html",T_STRING,11)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Ad_displayFrequency record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("displayFrequency",T_DOUBLE,12)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_Ad_openInTrunk record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("openInTrunk",T_BOOL,13)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Ad_fields iprot record = do
  (_,_t99,_id100) <- readFieldBegin iprot
  if _t99 == T_STOP then return record else
    case _id100 of 
      1 -> if _t99 == T_I32 then do
        s <- readI32 iprot
        read_Ad_fields iprot record{f_Ad_id=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      2 -> if _t99 == T_I16 then do
        s <- readI16 iprot
        read_Ad_fields iprot record{f_Ad_width=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      3 -> if _t99 == T_I16 then do
        s <- readI16 iprot
        read_Ad_fields iprot record{f_Ad_height=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      4 -> if _t99 == T_STRING then do
        s <- readString iprot
        read_Ad_fields iprot record{f_Ad_advertiserName=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      5 -> if _t99 == T_STRING then do
        s <- readString iprot
        read_Ad_fields iprot record{f_Ad_imageUrl=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      6 -> if _t99 == T_STRING then do
        s <- readString iprot
        read_Ad_fields iprot record{f_Ad_destinationUrl=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      7 -> if _t99 == T_I16 then do
        s <- readI16 iprot
        read_Ad_fields iprot record{f_Ad_displaySeconds=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      8 -> if _t99 == T_DOUBLE then do
        s <- readDouble iprot
        read_Ad_fields iprot record{f_Ad_score=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      9 -> if _t99 == T_STRING then do
        s <- readBinary iprot
        read_Ad_fields iprot record{f_Ad_image=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      10 -> if _t99 == T_STRING then do
        s <- readString iprot
        read_Ad_fields iprot record{f_Ad_imageMime=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      11 -> if _t99 == T_STRING then do
        s <- readString iprot
        read_Ad_fields iprot record{f_Ad_html=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      12 -> if _t99 == T_DOUBLE then do
        s <- readDouble iprot
        read_Ad_fields iprot record{f_Ad_displayFrequency=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      13 -> if _t99 == T_BOOL then do
        s <- readBool iprot
        read_Ad_fields iprot record{f_Ad_openInTrunk=Just s}
        else do
          skip iprot _t99
          read_Ad_fields iprot record
      _ -> do
        skip iprot _t99
        readFieldEnd iprot
        read_Ad_fields iprot record
read_Ad iprot = do
  _ <- readStructBegin iprot
  record <- read_Ad_fields iprot (Ad{f_Ad_id=Nothing,f_Ad_width=Nothing,f_Ad_height=Nothing,f_Ad_advertiserName=Nothing,f_Ad_imageUrl=Nothing,f_Ad_destinationUrl=Nothing,f_Ad_displaySeconds=Nothing,f_Ad_score=Nothing,f_Ad_image=Nothing,f_Ad_imageMime=Nothing,f_Ad_html=Nothing,f_Ad_displayFrequency=Nothing,f_Ad_openInTrunk=Nothing})
  readStructEnd iprot
  return record
data SharedNotebook = SharedNotebook{f_SharedNotebook_id :: Maybe Int64,f_SharedNotebook_userId :: Maybe Int32,f_SharedNotebook_notebookGuid :: Maybe String,f_SharedNotebook_email :: Maybe String,f_SharedNotebook_notebookModifiable :: Maybe Bool,f_SharedNotebook_requireLogin :: Maybe Bool,f_SharedNotebook_serviceCreated :: Maybe Int64,f_SharedNotebook_shareKey :: Maybe String,f_SharedNotebook_username :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_SharedNotebook oprot record = do
  writeStructBegin oprot "SharedNotebook"
  case f_SharedNotebook_id record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("id",T_I64,1)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_userId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("userId",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_notebookGuid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebookGuid",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_email record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("email",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_notebookModifiable record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("notebookModifiable",T_BOOL,5)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_requireLogin record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("requireLogin",T_BOOL,6)
    writeBool oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_serviceCreated record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("serviceCreated",T_I64,7)
    writeI64 oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_shareKey record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shareKey",T_STRING,8)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_SharedNotebook_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,9)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_SharedNotebook_fields iprot record = do
  (_,_t104,_id105) <- readFieldBegin iprot
  if _t104 == T_STOP then return record else
    case _id105 of 
      1 -> if _t104 == T_I64 then do
        s <- readI64 iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_id=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      2 -> if _t104 == T_I32 then do
        s <- readI32 iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_userId=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      3 -> if _t104 == T_STRING then do
        s <- readString iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_notebookGuid=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      4 -> if _t104 == T_STRING then do
        s <- readString iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_email=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      5 -> if _t104 == T_BOOL then do
        s <- readBool iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_notebookModifiable=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      6 -> if _t104 == T_BOOL then do
        s <- readBool iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_requireLogin=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      7 -> if _t104 == T_I64 then do
        s <- readI64 iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_serviceCreated=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      8 -> if _t104 == T_STRING then do
        s <- readString iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_shareKey=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      9 -> if _t104 == T_STRING then do
        s <- readString iprot
        read_SharedNotebook_fields iprot record{f_SharedNotebook_username=Just s}
        else do
          skip iprot _t104
          read_SharedNotebook_fields iprot record
      _ -> do
        skip iprot _t104
        readFieldEnd iprot
        read_SharedNotebook_fields iprot record
read_SharedNotebook iprot = do
  _ <- readStructBegin iprot
  record <- read_SharedNotebook_fields iprot (SharedNotebook{f_SharedNotebook_id=Nothing,f_SharedNotebook_userId=Nothing,f_SharedNotebook_notebookGuid=Nothing,f_SharedNotebook_email=Nothing,f_SharedNotebook_notebookModifiable=Nothing,f_SharedNotebook_requireLogin=Nothing,f_SharedNotebook_serviceCreated=Nothing,f_SharedNotebook_shareKey=Nothing,f_SharedNotebook_username=Nothing})
  readStructEnd iprot
  return record
data LinkedNotebook = LinkedNotebook{f_LinkedNotebook_shareName :: Maybe String,f_LinkedNotebook_username :: Maybe String,f_LinkedNotebook_shardId :: Maybe String,f_LinkedNotebook_shareKey :: Maybe String,f_LinkedNotebook_uri :: Maybe String,f_LinkedNotebook_guid :: Maybe String,f_LinkedNotebook_updateSequenceNum :: Maybe Int32} deriving (Show,Eq,Ord,Typeable)
write_LinkedNotebook oprot record = do
  writeStructBegin oprot "LinkedNotebook"
  case f_LinkedNotebook_shareName record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shareName",T_STRING,2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_username record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("username",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_shardId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shardId",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_shareKey record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("shareKey",T_STRING,5)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_uri record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("uri",T_STRING,6)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_guid record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("guid",T_STRING,7)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_LinkedNotebook_updateSequenceNum record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("updateSequenceNum",T_I32,8)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_LinkedNotebook_fields iprot record = do
  (_,_t109,_id110) <- readFieldBegin iprot
  if _t109 == T_STOP then return record else
    case _id110 of 
      2 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_shareName=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      3 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_username=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      4 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_shardId=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      5 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_shareKey=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      6 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_uri=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      7 -> if _t109 == T_STRING then do
        s <- readString iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_guid=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      8 -> if _t109 == T_I32 then do
        s <- readI32 iprot
        read_LinkedNotebook_fields iprot record{f_LinkedNotebook_updateSequenceNum=Just s}
        else do
          skip iprot _t109
          read_LinkedNotebook_fields iprot record
      _ -> do
        skip iprot _t109
        readFieldEnd iprot
        read_LinkedNotebook_fields iprot record
read_LinkedNotebook iprot = do
  _ <- readStructBegin iprot
  record <- read_LinkedNotebook_fields iprot (LinkedNotebook{f_LinkedNotebook_shareName=Nothing,f_LinkedNotebook_username=Nothing,f_LinkedNotebook_shardId=Nothing,f_LinkedNotebook_shareKey=Nothing,f_LinkedNotebook_uri=Nothing,f_LinkedNotebook_guid=Nothing,f_LinkedNotebook_updateSequenceNum=Nothing})
  readStructEnd iprot
  return record
