{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.7.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Greet_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


data Message = Message{f_Message_msg :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_Message oprot record = do
  writeStructBegin oprot "Message"
  case f_Message_msg record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("msg",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Message_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_Message_fields iprot record{f_Message_msg=Just s}
        else do
          skip iprot _t3
          read_Message_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Message_fields iprot record
read_Message iprot = do
  _ <- readStructBegin iprot
  record <- read_Message_fields iprot (Message{f_Message_msg=Nothing})
  readStructEnd iprot
  return record
